
Test_NUCLEO_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007508  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009e4  080076d8  080076d8  000176d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080bc  080080bc  000207b4  2**0
                  CONTENTS
  4 .ARM          00000008  080080bc  080080bc  000180bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080c4  080080c4  000207b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080c4  080080c4  000180c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080c8  080080c8  000180c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000007b4  20000000  080080cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  200007b4  08008880  000207b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  200008f8  08008880  000208f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000207b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000df2e  00000000  00000000  000207e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e84  00000000  00000000  0002e712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c18  00000000  00000000  00030598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b40  00000000  00000000  000311b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024266  00000000  00000000  00031cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e8ac  00000000  00000000  00055f56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd47d  00000000  00000000  00064802  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cb  00000000  00000000  00141c7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004398  00000000  00000000  00141d4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200007b4 	.word	0x200007b4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080076c0 	.word	0x080076c0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200007b8 	.word	0x200007b8
 800020c:	080076c0 	.word	0x080076c0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eec:	b5b0      	push	{r4, r5, r7, lr}
 8000eee:	b0d0      	sub	sp, #320	; 0x140
 8000ef0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  char buf[50];
  int buf_len = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  // Buffers used to store input and output tensors
  AI_ALIGNED(4) ai_i8 in_data[AI_SINE_MODEL_IN_1_SIZE_BYTES];
  AI_ALIGNED(4) ai_i8 out_data[AI_SINE_MODEL_OUT_1_SIZE_BYTES];

  // Pointer to our model
  ai_handle sine_model = AI_HANDLE_NULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	663b      	str	r3, [r7, #96]	; 0x60

  // Initialize wrapper structs that hold pointers to data and info about the
  // data (tensor height, width, channels)
  ai_buffer ai_input[AI_SINE_MODEL_IN_NUM] = AI_SINE_MODEL_IN;
 8000efc:	4b9f      	ldr	r3, [pc, #636]	; (800117c <main+0x290>)
 8000efe:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8000f02:	461d      	mov	r5, r3
 8000f04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f08:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f0c:	e884 0003 	stmia.w	r4, {r0, r1}
  ai_buffer ai_output[AI_SINE_MODEL_OUT_NUM] = AI_SINE_MODEL_OUT;
 8000f10:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000f14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000f18:	4a98      	ldr	r2, [pc, #608]	; (800117c <main+0x290>)
 8000f1a:	461c      	mov	r4, r3
 8000f1c:	4615      	mov	r5, r2
 8000f1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f22:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f26:	e884 0003 	stmia.w	r4, {r0, r1}

  // Set working memory and get weights/biases from model
  ai_network_params ai_params = {
 8000f2a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000f2e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000f32:	4a93      	ldr	r2, [pc, #588]	; (8001180 <main+0x294>)
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000f3a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000f3e:	2201      	movs	r2, #1
 8000f40:	809a      	strh	r2, [r3, #4]
 8000f42:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000f46:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	80da      	strh	r2, [r3, #6]
 8000f4e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000f52:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000f56:	2201      	movs	r2, #1
 8000f58:	811a      	strh	r2, [r3, #8]
 8000f5a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000f5e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000f62:	f240 5204 	movw	r2, #1284	; 0x504
 8000f66:	60da      	str	r2, [r3, #12]
		  AI_SINE_MODEL_DATA_WEIGHTS(ai_sine_model_data_weights_get()),
 8000f68:	f002 fba4 	bl	80036b4 <ai_sine_model_data_weights_get>
 8000f6c:	4602      	mov	r2, r0
  ai_network_params ai_params = {
 8000f6e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000f72:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000f76:	611a      	str	r2, [r3, #16]
 8000f78:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000f7c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000f80:	2200      	movs	r2, #0
 8000f82:	615a      	str	r2, [r3, #20]
 8000f84:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000f88:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000f8c:	4a7d      	ldr	r2, [pc, #500]	; (8001184 <main+0x298>)
 8000f8e:	619a      	str	r2, [r3, #24]
 8000f90:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000f94:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000f98:	2201      	movs	r2, #1
 8000f9a:	839a      	strh	r2, [r3, #28]
 8000f9c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000fa0:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	83da      	strh	r2, [r3, #30]
 8000fa8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000fac:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	841a      	strh	r2, [r3, #32]
 8000fb4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000fb8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000fbc:	2280      	movs	r2, #128	; 0x80
 8000fbe:	625a      	str	r2, [r3, #36]	; 0x24
 8000fc0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000fc4:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000fc8:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8000fcc:	629a      	str	r2, [r3, #40]	; 0x28
 8000fce:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000fd2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	62da      	str	r2, [r3, #44]	; 0x2c
		  AI_SINE_MODEL_DATA_ACTIVATIONS(activations)
  };

  // Set pointers wrapper structs to our data buffers
  ai_input[0].n_batches = 1;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  ai_input[0].data = AI_HANDLE_PTR(in_data);
 8000fe0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000fe4:	65bb      	str	r3, [r7, #88]	; 0x58
  ai_output[0].n_batches = 1;
 8000fe6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000fea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000fee:	2201      	movs	r2, #1
 8000ff0:	809a      	strh	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(out_data);
 8000ff2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000ff6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000ffa:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8000ffe:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001000:	f000 fbf2 	bl	80017e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001004:	f000 f8ce 	bl	80011a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001008:	f000 f99a 	bl	8001340 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800100c:	f000 f96e 	bl	80012ec <MX_USART2_UART_Init>
  MX_CRC_Init();
 8001010:	f000 f934 	bl	800127c <MX_CRC_Init>
  MX_TIM14_Init();
 8001014:	f000 f946 	bl	80012a4 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  // Start timer/counter
  HAL_TIM_Base_Start(&htim14);
 8001018:	485b      	ldr	r0, [pc, #364]	; (8001188 <main+0x29c>)
 800101a:	f001 fd63 	bl	8002ae4 <HAL_TIM_Base_Start>

  // Greetings!
  buf_len = sprintf(buf, "\r\n\r\nSTM32 X-Cube-AI test\r\n");
 800101e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001022:	495a      	ldr	r1, [pc, #360]	; (800118c <main+0x2a0>)
 8001024:	4618      	mov	r0, r3
 8001026:	f004 f9d9 	bl	80053dc <siprintf>
 800102a:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 800102e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001032:	b29a      	uxth	r2, r3
 8001034:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 8001038:	2364      	movs	r3, #100	; 0x64
 800103a:	4855      	ldr	r0, [pc, #340]	; (8001190 <main+0x2a4>)
 800103c:	f001 fea7 	bl	8002d8e <HAL_UART_Transmit>

  // Create instance of neural network
  ai_err = ai_sine_model_create(&sine_model, AI_SINE_MODEL_DATA_CONFIG);
 8001040:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001044:	2100      	movs	r1, #0
 8001046:	4618      	mov	r0, r3
 8001048:	f002 face 	bl	80035e8 <ai_sine_model_create>
 800104c:	4603      	mov	r3, r0
 800104e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (ai_err.type != AI_ERROR_NONE)
 8001052:	f897 30ec 	ldrb.w	r3, [r7, #236]	; 0xec
 8001056:	2b00      	cmp	r3, #0
 8001058:	d011      	beq.n	800107e <main+0x192>
  {
     buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 800105a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800105e:	494d      	ldr	r1, [pc, #308]	; (8001194 <main+0x2a8>)
 8001060:	4618      	mov	r0, r3
 8001062:	f004 f9bb 	bl	80053dc <siprintf>
 8001066:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
     HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 800106a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800106e:	b29a      	uxth	r2, r3
 8001070:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 8001074:	2364      	movs	r3, #100	; 0x64
 8001076:	4846      	ldr	r0, [pc, #280]	; (8001190 <main+0x2a4>)
 8001078:	f001 fe89 	bl	8002d8e <HAL_UART_Transmit>
     while(1);
 800107c:	e7fe      	b.n	800107c <main+0x190>
  }

  // Initialize neural network
  if (!ai_sine_model_init(sine_model, &ai_params))
 800107e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001080:	463a      	mov	r2, r7
 8001082:	4611      	mov	r1, r2
 8001084:	4618      	mov	r0, r3
 8001086:	f002 fac5 	bl	8003614 <ai_sine_model_init>
 800108a:	4603      	mov	r3, r0
 800108c:	f083 0301 	eor.w	r3, r3, #1
 8001090:	b2db      	uxtb	r3, r3
 8001092:	2b00      	cmp	r3, #0
 8001094:	d011      	beq.n	80010ba <main+0x1ce>
  {
      buf_len = sprintf(buf, "Error: could not initialize NN\r\n");
 8001096:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800109a:	493f      	ldr	r1, [pc, #252]	; (8001198 <main+0x2ac>)
 800109c:	4618      	mov	r0, r3
 800109e:	f004 f99d 	bl	80053dc <siprintf>
 80010a2:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
      HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 80010a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 80010b0:	2364      	movs	r3, #100	; 0x64
 80010b2:	4837      	ldr	r0, [pc, #220]	; (8001190 <main+0x2a4>)
 80010b4:	f001 fe6b 	bl	8002d8e <HAL_UART_Transmit>
      while(1);
 80010b8:	e7fe      	b.n	80010b8 <main+0x1cc>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Fill input buffer (use test value)
	  for (uint32_t i = 0; i < AI_SINE_MODEL_IN_1_SIZE; i++)
 80010ba:	2300      	movs	r3, #0
 80010bc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80010c0:	e00d      	b.n	80010de <main+0x1f2>
	  {
		((ai_float *)in_data)[i] = (ai_float)2.0f;
 80010c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80010cc:	4413      	add	r3, r2
 80010ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010d2:	601a      	str	r2, [r3, #0]
	  for (uint32_t i = 0; i < AI_SINE_MODEL_IN_1_SIZE; i++)
 80010d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80010d8:	3301      	adds	r3, #1
 80010da:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80010de:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d0ed      	beq.n	80010c2 <main+0x1d6>
	  }

	  // Get current timestamp
	  timestamp = htim14.Instance->CNT;
 80010e6:	4b28      	ldr	r3, [pc, #160]	; (8001188 <main+0x29c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	  // Perform inference
	  nbatch = ai_sine_model_run(sine_model, &ai_input[0], &ai_output[0]);
 80010f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80010f2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80010f6:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80010fa:	4618      	mov	r0, r3
 80010fc:	f002 fac9 	bl	8003692 <ai_sine_model_run>
 8001100:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
	  if (nbatch != 1) {
 8001104:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001108:	2b01      	cmp	r3, #1
 800110a:	d010      	beq.n	800112e <main+0x242>
		buf_len = sprintf(buf, "Error: could not run inference\r\n");
 800110c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001110:	4922      	ldr	r1, [pc, #136]	; (800119c <main+0x2b0>)
 8001112:	4618      	mov	r0, r3
 8001114:	f004 f962 	bl	80053dc <siprintf>
 8001118:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
		HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 800111c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001120:	b29a      	uxth	r2, r3
 8001122:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 8001126:	2364      	movs	r3, #100	; 0x64
 8001128:	4819      	ldr	r0, [pc, #100]	; (8001190 <main+0x2a4>)
 800112a:	f001 fe30 	bl	8002d8e <HAL_UART_Transmit>
	  }

	  // Read output (predicted y) of neural network
	  y_val = ((float *)out_data)[0];
 800112e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

	  // Print output of neural network along with inference time (microseconds)
	  buf_len = sprintf(buf,
 8001138:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800113c:	f7ff fa24 	bl	8000588 <__aeabi_f2d>
 8001140:	4602      	mov	r2, r0
 8001142:	460b      	mov	r3, r1
						"Output: %f | Duration: %lu\r\n",
						y_val,
						htim14.Instance->CNT - timestamp);
 8001144:	4910      	ldr	r1, [pc, #64]	; (8001188 <main+0x29c>)
 8001146:	6809      	ldr	r1, [r1, #0]
 8001148:	6a48      	ldr	r0, [r1, #36]	; 0x24
	  buf_len = sprintf(buf,
 800114a:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800114e:	1a41      	subs	r1, r0, r1
 8001150:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 8001154:	9100      	str	r1, [sp, #0]
 8001156:	4912      	ldr	r1, [pc, #72]	; (80011a0 <main+0x2b4>)
 8001158:	f004 f940 	bl	80053dc <siprintf>
 800115c:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
	  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 8001160:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001164:	b29a      	uxth	r2, r3
 8001166:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 800116a:	2364      	movs	r3, #100	; 0x64
 800116c:	4808      	ldr	r0, [pc, #32]	; (8001190 <main+0x2a4>)
 800116e:	f001 fe0e 	bl	8002d8e <HAL_UART_Transmit>

	  // Wait before doing it again
	  HAL_Delay(500);
 8001172:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001176:	f000 fba9 	bl	80018cc <HAL_Delay>
	  for (uint32_t i = 0; i < AI_SINE_MODEL_IN_1_SIZE; i++)
 800117a:	e79e      	b.n	80010ba <main+0x1ce>
 800117c:	08007784 	.word	0x08007784
 8001180:	40040440 	.word	0x40040440
 8001184:	00040440 	.word	0x00040440
 8001188:	200007d8 	.word	0x200007d8
 800118c:	080076d8 	.word	0x080076d8
 8001190:	20000820 	.word	0x20000820
 8001194:	080076f4 	.word	0x080076f4
 8001198:	0800771c 	.word	0x0800771c
 800119c:	08007740 	.word	0x08007740
 80011a0:	08007764 	.word	0x08007764

080011a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b094      	sub	sp, #80	; 0x50
 80011a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011aa:	f107 031c 	add.w	r3, r7, #28
 80011ae:	2234      	movs	r2, #52	; 0x34
 80011b0:	2100      	movs	r1, #0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f003 fbb0 	bl	8004918 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b8:	f107 0308 	add.w	r3, r7, #8
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c8:	2300      	movs	r3, #0
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	4b29      	ldr	r3, [pc, #164]	; (8001274 <SystemClock_Config+0xd0>)
 80011ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d0:	4a28      	ldr	r2, [pc, #160]	; (8001274 <SystemClock_Config+0xd0>)
 80011d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d6:	6413      	str	r3, [r2, #64]	; 0x40
 80011d8:	4b26      	ldr	r3, [pc, #152]	; (8001274 <SystemClock_Config+0xd0>)
 80011da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e0:	607b      	str	r3, [r7, #4]
 80011e2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011e4:	2300      	movs	r3, #0
 80011e6:	603b      	str	r3, [r7, #0]
 80011e8:	4b23      	ldr	r3, [pc, #140]	; (8001278 <SystemClock_Config+0xd4>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011f0:	4a21      	ldr	r2, [pc, #132]	; (8001278 <SystemClock_Config+0xd4>)
 80011f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f6:	6013      	str	r3, [r2, #0]
 80011f8:	4b1f      	ldr	r3, [pc, #124]	; (8001278 <SystemClock_Config+0xd4>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001200:	603b      	str	r3, [r7, #0]
 8001202:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001204:	2302      	movs	r3, #2
 8001206:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001208:	2301      	movs	r3, #1
 800120a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800120c:	2310      	movs	r3, #16
 800120e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001210:	2302      	movs	r3, #2
 8001212:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001214:	2300      	movs	r3, #0
 8001216:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001218:	2308      	movs	r3, #8
 800121a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 800121c:	2350      	movs	r3, #80	; 0x50
 800121e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001220:	2302      	movs	r3, #2
 8001222:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001224:	2302      	movs	r3, #2
 8001226:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001228:	2302      	movs	r3, #2
 800122a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800122c:	f107 031c 	add.w	r3, r7, #28
 8001230:	4618      	mov	r0, r3
 8001232:	f001 f969 	bl	8002508 <HAL_RCC_OscConfig>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800123c:	f000 f8ee 	bl	800141c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001240:	230f      	movs	r3, #15
 8001242:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001244:	2302      	movs	r3, #2
 8001246:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001248:	2300      	movs	r3, #0
 800124a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800124c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001250:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001252:	2300      	movs	r3, #0
 8001254:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001256:	f107 0308 	add.w	r3, r7, #8
 800125a:	2102      	movs	r1, #2
 800125c:	4618      	mov	r0, r3
 800125e:	f000 fe09 	bl	8001e74 <HAL_RCC_ClockConfig>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001268:	f000 f8d8 	bl	800141c <Error_Handler>
  }
}
 800126c:	bf00      	nop
 800126e:	3750      	adds	r7, #80	; 0x50
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40023800 	.word	0x40023800
 8001278:	40007000 	.word	0x40007000

0800127c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <MX_CRC_Init+0x20>)
 8001282:	4a07      	ldr	r2, [pc, #28]	; (80012a0 <MX_CRC_Init+0x24>)
 8001284:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001286:	4805      	ldr	r0, [pc, #20]	; (800129c <MX_CRC_Init+0x20>)
 8001288:	f000 fc29 	bl	8001ade <HAL_CRC_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001292:	f000 f8c3 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	200007d0 	.word	0x200007d0
 80012a0:	40023000 	.word	0x40023000

080012a4 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80012a8:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <MX_TIM14_Init+0x40>)
 80012aa:	4a0f      	ldr	r2, [pc, #60]	; (80012e8 <MX_TIM14_Init+0x44>)
 80012ac:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 79;
 80012ae:	4b0d      	ldr	r3, [pc, #52]	; (80012e4 <MX_TIM14_Init+0x40>)
 80012b0:	224f      	movs	r2, #79	; 0x4f
 80012b2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b4:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <MX_TIM14_Init+0x40>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 80012ba:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <MX_TIM14_Init+0x40>)
 80012bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012c0:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c2:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <MX_TIM14_Init+0x40>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <MX_TIM14_Init+0x40>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80012ce:	4805      	ldr	r0, [pc, #20]	; (80012e4 <MX_TIM14_Init+0x40>)
 80012d0:	f001 fbb8 	bl	8002a44 <HAL_TIM_Base_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 80012da:	f000 f89f 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	200007d8 	.word	0x200007d8
 80012e8:	40002000 	.word	0x40002000

080012ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012f0:	4b11      	ldr	r3, [pc, #68]	; (8001338 <MX_USART2_UART_Init+0x4c>)
 80012f2:	4a12      	ldr	r2, [pc, #72]	; (800133c <MX_USART2_UART_Init+0x50>)
 80012f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012f6:	4b10      	ldr	r3, [pc, #64]	; (8001338 <MX_USART2_UART_Init+0x4c>)
 80012f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012fe:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <MX_USART2_UART_Init+0x4c>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001304:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <MX_USART2_UART_Init+0x4c>)
 8001306:	2200      	movs	r2, #0
 8001308:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800130a:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <MX_USART2_UART_Init+0x4c>)
 800130c:	2200      	movs	r2, #0
 800130e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001310:	4b09      	ldr	r3, [pc, #36]	; (8001338 <MX_USART2_UART_Init+0x4c>)
 8001312:	220c      	movs	r2, #12
 8001314:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001316:	4b08      	ldr	r3, [pc, #32]	; (8001338 <MX_USART2_UART_Init+0x4c>)
 8001318:	2200      	movs	r2, #0
 800131a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <MX_USART2_UART_Init+0x4c>)
 800131e:	2200      	movs	r2, #0
 8001320:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001322:	4805      	ldr	r0, [pc, #20]	; (8001338 <MX_USART2_UART_Init+0x4c>)
 8001324:	f001 fce6 	bl	8002cf4 <HAL_UART_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800132e:	f000 f875 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000820 	.word	0x20000820
 800133c:	40004400 	.word	0x40004400

08001340 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08a      	sub	sp, #40	; 0x28
 8001344:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]
 8001354:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	613b      	str	r3, [r7, #16]
 800135a:	4b2d      	ldr	r3, [pc, #180]	; (8001410 <MX_GPIO_Init+0xd0>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	4a2c      	ldr	r2, [pc, #176]	; (8001410 <MX_GPIO_Init+0xd0>)
 8001360:	f043 0304 	orr.w	r3, r3, #4
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
 8001366:	4b2a      	ldr	r3, [pc, #168]	; (8001410 <MX_GPIO_Init+0xd0>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f003 0304 	and.w	r3, r3, #4
 800136e:	613b      	str	r3, [r7, #16]
 8001370:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	4b26      	ldr	r3, [pc, #152]	; (8001410 <MX_GPIO_Init+0xd0>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	4a25      	ldr	r2, [pc, #148]	; (8001410 <MX_GPIO_Init+0xd0>)
 800137c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001380:	6313      	str	r3, [r2, #48]	; 0x30
 8001382:	4b23      	ldr	r3, [pc, #140]	; (8001410 <MX_GPIO_Init+0xd0>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	4b1f      	ldr	r3, [pc, #124]	; (8001410 <MX_GPIO_Init+0xd0>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	4a1e      	ldr	r2, [pc, #120]	; (8001410 <MX_GPIO_Init+0xd0>)
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	6313      	str	r3, [r2, #48]	; 0x30
 800139e:	4b1c      	ldr	r3, [pc, #112]	; (8001410 <MX_GPIO_Init+0xd0>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	607b      	str	r3, [r7, #4]
 80013ae:	4b18      	ldr	r3, [pc, #96]	; (8001410 <MX_GPIO_Init+0xd0>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	4a17      	ldr	r2, [pc, #92]	; (8001410 <MX_GPIO_Init+0xd0>)
 80013b4:	f043 0302 	orr.w	r3, r3, #2
 80013b8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ba:	4b15      	ldr	r3, [pc, #84]	; (8001410 <MX_GPIO_Init+0xd0>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2120      	movs	r1, #32
 80013ca:	4812      	ldr	r0, [pc, #72]	; (8001414 <MX_GPIO_Init+0xd4>)
 80013cc:	f000 fd38 	bl	8001e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013d6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80013da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	4619      	mov	r1, r3
 80013e6:	480c      	ldr	r0, [pc, #48]	; (8001418 <MX_GPIO_Init+0xd8>)
 80013e8:	f000 fb96 	bl	8001b18 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013ec:	2320      	movs	r3, #32
 80013ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f0:	2301      	movs	r3, #1
 80013f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f8:	2300      	movs	r3, #0
 80013fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	4619      	mov	r1, r3
 8001402:	4804      	ldr	r0, [pc, #16]	; (8001414 <MX_GPIO_Init+0xd4>)
 8001404:	f000 fb88 	bl	8001b18 <HAL_GPIO_Init>

}
 8001408:	bf00      	nop
 800140a:	3728      	adds	r7, #40	; 0x28
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40023800 	.word	0x40023800
 8001414:	40020000 	.word	0x40020000
 8001418:	40020800 	.word	0x40020800

0800141c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001420:	b672      	cpsid	i
}
 8001422:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001424:	e7fe      	b.n	8001424 <Error_Handler+0x8>
	...

08001428 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	607b      	str	r3, [r7, #4]
 8001432:	4b10      	ldr	r3, [pc, #64]	; (8001474 <HAL_MspInit+0x4c>)
 8001434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001436:	4a0f      	ldr	r2, [pc, #60]	; (8001474 <HAL_MspInit+0x4c>)
 8001438:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800143c:	6453      	str	r3, [r2, #68]	; 0x44
 800143e:	4b0d      	ldr	r3, [pc, #52]	; (8001474 <HAL_MspInit+0x4c>)
 8001440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001442:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001446:	607b      	str	r3, [r7, #4]
 8001448:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	603b      	str	r3, [r7, #0]
 800144e:	4b09      	ldr	r3, [pc, #36]	; (8001474 <HAL_MspInit+0x4c>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	4a08      	ldr	r2, [pc, #32]	; (8001474 <HAL_MspInit+0x4c>)
 8001454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001458:	6413      	str	r3, [r2, #64]	; 0x40
 800145a:	4b06      	ldr	r3, [pc, #24]	; (8001474 <HAL_MspInit+0x4c>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001462:	603b      	str	r3, [r7, #0]
 8001464:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001466:	2007      	movs	r0, #7
 8001468:	f000 fb06 	bl	8001a78 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800146c:	bf00      	nop
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40023800 	.word	0x40023800

08001478 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a0b      	ldr	r2, [pc, #44]	; (80014b4 <HAL_CRC_MspInit+0x3c>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d10d      	bne.n	80014a6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <HAL_CRC_MspInit+0x40>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a09      	ldr	r2, [pc, #36]	; (80014b8 <HAL_CRC_MspInit+0x40>)
 8001494:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b07      	ldr	r3, [pc, #28]	; (80014b8 <HAL_CRC_MspInit+0x40>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80014a6:	bf00      	nop
 80014a8:	3714      	adds	r7, #20
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	40023000 	.word	0x40023000
 80014b8:	40023800 	.word	0x40023800

080014bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a0b      	ldr	r2, [pc, #44]	; (80014f8 <HAL_TIM_Base_MspInit+0x3c>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d10d      	bne.n	80014ea <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <HAL_TIM_Base_MspInit+0x40>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	4a09      	ldr	r2, [pc, #36]	; (80014fc <HAL_TIM_Base_MspInit+0x40>)
 80014d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014dc:	6413      	str	r3, [r2, #64]	; 0x40
 80014de:	4b07      	ldr	r3, [pc, #28]	; (80014fc <HAL_TIM_Base_MspInit+0x40>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80014ea:	bf00      	nop
 80014ec:	3714      	adds	r7, #20
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	40002000 	.word	0x40002000
 80014fc:	40023800 	.word	0x40023800

08001500 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08a      	sub	sp, #40	; 0x28
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a19      	ldr	r2, [pc, #100]	; (8001584 <HAL_UART_MspInit+0x84>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d12b      	bne.n	800157a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	613b      	str	r3, [r7, #16]
 8001526:	4b18      	ldr	r3, [pc, #96]	; (8001588 <HAL_UART_MspInit+0x88>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	4a17      	ldr	r2, [pc, #92]	; (8001588 <HAL_UART_MspInit+0x88>)
 800152c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001530:	6413      	str	r3, [r2, #64]	; 0x40
 8001532:	4b15      	ldr	r3, [pc, #84]	; (8001588 <HAL_UART_MspInit+0x88>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153a:	613b      	str	r3, [r7, #16]
 800153c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	4b11      	ldr	r3, [pc, #68]	; (8001588 <HAL_UART_MspInit+0x88>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a10      	ldr	r2, [pc, #64]	; (8001588 <HAL_UART_MspInit+0x88>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
 800154e:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <HAL_UART_MspInit+0x88>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800155a:	230c      	movs	r3, #12
 800155c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155e:	2302      	movs	r3, #2
 8001560:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001566:	2303      	movs	r3, #3
 8001568:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800156a:	2307      	movs	r3, #7
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156e:	f107 0314 	add.w	r3, r7, #20
 8001572:	4619      	mov	r1, r3
 8001574:	4805      	ldr	r0, [pc, #20]	; (800158c <HAL_UART_MspInit+0x8c>)
 8001576:	f000 facf 	bl	8001b18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800157a:	bf00      	nop
 800157c:	3728      	adds	r7, #40	; 0x28
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40004400 	.word	0x40004400
 8001588:	40023800 	.word	0x40023800
 800158c:	40020000 	.word	0x40020000

08001590 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001594:	e7fe      	b.n	8001594 <NMI_Handler+0x4>

08001596 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001596:	b480      	push	{r7}
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800159a:	e7fe      	b.n	800159a <HardFault_Handler+0x4>

0800159c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015a0:	e7fe      	b.n	80015a0 <MemManage_Handler+0x4>

080015a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015a2:	b480      	push	{r7}
 80015a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015a6:	e7fe      	b.n	80015a6 <BusFault_Handler+0x4>

080015a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015ac:	e7fe      	b.n	80015ac <UsageFault_Handler+0x4>

080015ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015dc:	f000 f956 	bl	800188c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
	return 1;
 80015e8:	2301      	movs	r3, #1
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <_kill>:

int _kill(int pid, int sig)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80015fe:	f003 f94b 	bl	8004898 <__errno>
 8001602:	4603      	mov	r3, r0
 8001604:	2216      	movs	r2, #22
 8001606:	601a      	str	r2, [r3, #0]
	return -1;
 8001608:	f04f 33ff 	mov.w	r3, #4294967295
}
 800160c:	4618      	mov	r0, r3
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <_exit>:

void _exit (int status)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800161c:	f04f 31ff 	mov.w	r1, #4294967295
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff ffe7 	bl	80015f4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001626:	e7fe      	b.n	8001626 <_exit+0x12>

08001628 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	e00a      	b.n	8001650 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800163a:	f3af 8000 	nop.w
 800163e:	4601      	mov	r1, r0
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	1c5a      	adds	r2, r3, #1
 8001644:	60ba      	str	r2, [r7, #8]
 8001646:	b2ca      	uxtb	r2, r1
 8001648:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	3301      	adds	r3, #1
 800164e:	617b      	str	r3, [r7, #20]
 8001650:	697a      	ldr	r2, [r7, #20]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	429a      	cmp	r2, r3
 8001656:	dbf0      	blt.n	800163a <_read+0x12>
	}

return len;
 8001658:	687b      	ldr	r3, [r7, #4]
}
 800165a:	4618      	mov	r0, r3
 800165c:	3718      	adds	r7, #24
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b086      	sub	sp, #24
 8001666:	af00      	add	r7, sp, #0
 8001668:	60f8      	str	r0, [r7, #12]
 800166a:	60b9      	str	r1, [r7, #8]
 800166c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]
 8001672:	e009      	b.n	8001688 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	1c5a      	adds	r2, r3, #1
 8001678:	60ba      	str	r2, [r7, #8]
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	3301      	adds	r3, #1
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	697a      	ldr	r2, [r7, #20]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	429a      	cmp	r2, r3
 800168e:	dbf1      	blt.n	8001674 <_write+0x12>
	}
	return len;
 8001690:	687b      	ldr	r3, [r7, #4]
}
 8001692:	4618      	mov	r0, r3
 8001694:	3718      	adds	r7, #24
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <_close>:

int _close(int file)
{
 800169a:	b480      	push	{r7}
 800169c:	b083      	sub	sp, #12
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
	return -1;
 80016a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016b2:	b480      	push	{r7}
 80016b4:	b083      	sub	sp, #12
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
 80016ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016c2:	605a      	str	r2, [r3, #4]
	return 0;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <_isatty>:

int _isatty(int file)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b083      	sub	sp, #12
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
	return 1;
 80016da:	2301      	movs	r3, #1
}
 80016dc:	4618      	mov	r0, r3
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
	return 0;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3714      	adds	r7, #20
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
	...

08001704 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800170c:	4a14      	ldr	r2, [pc, #80]	; (8001760 <_sbrk+0x5c>)
 800170e:	4b15      	ldr	r3, [pc, #84]	; (8001764 <_sbrk+0x60>)
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001718:	4b13      	ldr	r3, [pc, #76]	; (8001768 <_sbrk+0x64>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d102      	bne.n	8001726 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001720:	4b11      	ldr	r3, [pc, #68]	; (8001768 <_sbrk+0x64>)
 8001722:	4a12      	ldr	r2, [pc, #72]	; (800176c <_sbrk+0x68>)
 8001724:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001726:	4b10      	ldr	r3, [pc, #64]	; (8001768 <_sbrk+0x64>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4413      	add	r3, r2
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	429a      	cmp	r2, r3
 8001732:	d207      	bcs.n	8001744 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001734:	f003 f8b0 	bl	8004898 <__errno>
 8001738:	4603      	mov	r3, r0
 800173a:	220c      	movs	r2, #12
 800173c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800173e:	f04f 33ff 	mov.w	r3, #4294967295
 8001742:	e009      	b.n	8001758 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001744:	4b08      	ldr	r3, [pc, #32]	; (8001768 <_sbrk+0x64>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800174a:	4b07      	ldr	r3, [pc, #28]	; (8001768 <_sbrk+0x64>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4413      	add	r3, r2
 8001752:	4a05      	ldr	r2, [pc, #20]	; (8001768 <_sbrk+0x64>)
 8001754:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001756:	68fb      	ldr	r3, [r7, #12]
}
 8001758:	4618      	mov	r0, r3
 800175a:	3718      	adds	r7, #24
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	20020000 	.word	0x20020000
 8001764:	00000800 	.word	0x00000800
 8001768:	20000864 	.word	0x20000864
 800176c:	200008f8 	.word	0x200008f8

08001770 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001774:	4b06      	ldr	r3, [pc, #24]	; (8001790 <SystemInit+0x20>)
 8001776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800177a:	4a05      	ldr	r2, [pc, #20]	; (8001790 <SystemInit+0x20>)
 800177c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001780:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001794:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001798:	480d      	ldr	r0, [pc, #52]	; (80017d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800179a:	490e      	ldr	r1, [pc, #56]	; (80017d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800179c:	4a0e      	ldr	r2, [pc, #56]	; (80017d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800179e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017a0:	e002      	b.n	80017a8 <LoopCopyDataInit>

080017a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017a6:	3304      	adds	r3, #4

080017a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017ac:	d3f9      	bcc.n	80017a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ae:	4a0b      	ldr	r2, [pc, #44]	; (80017dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017b0:	4c0b      	ldr	r4, [pc, #44]	; (80017e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017b4:	e001      	b.n	80017ba <LoopFillZerobss>

080017b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017b8:	3204      	adds	r2, #4

080017ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017bc:	d3fb      	bcc.n	80017b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017be:	f7ff ffd7 	bl	8001770 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017c2:	f003 f86f 	bl	80048a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017c6:	f7ff fb91 	bl	8000eec <main>
  bx  lr    
 80017ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017d4:	200007b4 	.word	0x200007b4
  ldr r2, =_sidata
 80017d8:	080080cc 	.word	0x080080cc
  ldr r2, =_sbss
 80017dc:	200007b4 	.word	0x200007b4
  ldr r4, =_ebss
 80017e0:	200008f8 	.word	0x200008f8

080017e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017e4:	e7fe      	b.n	80017e4 <ADC_IRQHandler>
	...

080017e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017ec:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <HAL_Init+0x40>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a0d      	ldr	r2, [pc, #52]	; (8001828 <HAL_Init+0x40>)
 80017f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017f8:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <HAL_Init+0x40>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a0a      	ldr	r2, [pc, #40]	; (8001828 <HAL_Init+0x40>)
 80017fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001802:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001804:	4b08      	ldr	r3, [pc, #32]	; (8001828 <HAL_Init+0x40>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a07      	ldr	r2, [pc, #28]	; (8001828 <HAL_Init+0x40>)
 800180a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800180e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001810:	2003      	movs	r0, #3
 8001812:	f000 f931 	bl	8001a78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001816:	2000      	movs	r0, #0
 8001818:	f000 f808 	bl	800182c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800181c:	f7ff fe04 	bl	8001428 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40023c00 	.word	0x40023c00

0800182c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001834:	4b12      	ldr	r3, [pc, #72]	; (8001880 <HAL_InitTick+0x54>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4b12      	ldr	r3, [pc, #72]	; (8001884 <HAL_InitTick+0x58>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	4619      	mov	r1, r3
 800183e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001842:	fbb3 f3f1 	udiv	r3, r3, r1
 8001846:	fbb2 f3f3 	udiv	r3, r2, r3
 800184a:	4618      	mov	r0, r3
 800184c:	f000 f93b 	bl	8001ac6 <HAL_SYSTICK_Config>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e00e      	b.n	8001878 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2b0f      	cmp	r3, #15
 800185e:	d80a      	bhi.n	8001876 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001860:	2200      	movs	r2, #0
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	f04f 30ff 	mov.w	r0, #4294967295
 8001868:	f000 f911 	bl	8001a8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800186c:	4a06      	ldr	r2, [pc, #24]	; (8001888 <HAL_InitTick+0x5c>)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001872:	2300      	movs	r3, #0
 8001874:	e000      	b.n	8001878 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
}
 8001878:	4618      	mov	r0, r3
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20000000 	.word	0x20000000
 8001884:	20000008 	.word	0x20000008
 8001888:	20000004 	.word	0x20000004

0800188c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001890:	4b06      	ldr	r3, [pc, #24]	; (80018ac <HAL_IncTick+0x20>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	461a      	mov	r2, r3
 8001896:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <HAL_IncTick+0x24>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4413      	add	r3, r2
 800189c:	4a04      	ldr	r2, [pc, #16]	; (80018b0 <HAL_IncTick+0x24>)
 800189e:	6013      	str	r3, [r2, #0]
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	20000008 	.word	0x20000008
 80018b0:	20000868 	.word	0x20000868

080018b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  return uwTick;
 80018b8:	4b03      	ldr	r3, [pc, #12]	; (80018c8 <HAL_GetTick+0x14>)
 80018ba:	681b      	ldr	r3, [r3, #0]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	20000868 	.word	0x20000868

080018cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018d4:	f7ff ffee 	bl	80018b4 <HAL_GetTick>
 80018d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e4:	d005      	beq.n	80018f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018e6:	4b0a      	ldr	r3, [pc, #40]	; (8001910 <HAL_Delay+0x44>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	461a      	mov	r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4413      	add	r3, r2
 80018f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018f2:	bf00      	nop
 80018f4:	f7ff ffde 	bl	80018b4 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	429a      	cmp	r2, r3
 8001902:	d8f7      	bhi.n	80018f4 <HAL_Delay+0x28>
  {
  }
}
 8001904:	bf00      	nop
 8001906:	bf00      	nop
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000008 	.word	0x20000008

08001914 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001924:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <__NVIC_SetPriorityGrouping+0x44>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800192a:	68ba      	ldr	r2, [r7, #8]
 800192c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001930:	4013      	ands	r3, r2
 8001932:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800193c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001944:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001946:	4a04      	ldr	r2, [pc, #16]	; (8001958 <__NVIC_SetPriorityGrouping+0x44>)
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	60d3      	str	r3, [r2, #12]
}
 800194c:	bf00      	nop
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001960:	4b04      	ldr	r3, [pc, #16]	; (8001974 <__NVIC_GetPriorityGrouping+0x18>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	0a1b      	lsrs	r3, r3, #8
 8001966:	f003 0307 	and.w	r3, r3, #7
}
 800196a:	4618      	mov	r0, r3
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	e000ed00 	.word	0xe000ed00

08001978 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	6039      	str	r1, [r7, #0]
 8001982:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001988:	2b00      	cmp	r3, #0
 800198a:	db0a      	blt.n	80019a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	b2da      	uxtb	r2, r3
 8001990:	490c      	ldr	r1, [pc, #48]	; (80019c4 <__NVIC_SetPriority+0x4c>)
 8001992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001996:	0112      	lsls	r2, r2, #4
 8001998:	b2d2      	uxtb	r2, r2
 800199a:	440b      	add	r3, r1
 800199c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019a0:	e00a      	b.n	80019b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	4908      	ldr	r1, [pc, #32]	; (80019c8 <__NVIC_SetPriority+0x50>)
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	f003 030f 	and.w	r3, r3, #15
 80019ae:	3b04      	subs	r3, #4
 80019b0:	0112      	lsls	r2, r2, #4
 80019b2:	b2d2      	uxtb	r2, r2
 80019b4:	440b      	add	r3, r1
 80019b6:	761a      	strb	r2, [r3, #24]
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	e000e100 	.word	0xe000e100
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b089      	sub	sp, #36	; 0x24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	f1c3 0307 	rsb	r3, r3, #7
 80019e6:	2b04      	cmp	r3, #4
 80019e8:	bf28      	it	cs
 80019ea:	2304      	movcs	r3, #4
 80019ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	3304      	adds	r3, #4
 80019f2:	2b06      	cmp	r3, #6
 80019f4:	d902      	bls.n	80019fc <NVIC_EncodePriority+0x30>
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	3b03      	subs	r3, #3
 80019fa:	e000      	b.n	80019fe <NVIC_EncodePriority+0x32>
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a00:	f04f 32ff 	mov.w	r2, #4294967295
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	43da      	mvns	r2, r3
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	401a      	ands	r2, r3
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a14:	f04f 31ff 	mov.w	r1, #4294967295
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1e:	43d9      	mvns	r1, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a24:	4313      	orrs	r3, r2
         );
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3724      	adds	r7, #36	; 0x24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
	...

08001a34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a44:	d301      	bcc.n	8001a4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a46:	2301      	movs	r3, #1
 8001a48:	e00f      	b.n	8001a6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a4a:	4a0a      	ldr	r2, [pc, #40]	; (8001a74 <SysTick_Config+0x40>)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a52:	210f      	movs	r1, #15
 8001a54:	f04f 30ff 	mov.w	r0, #4294967295
 8001a58:	f7ff ff8e 	bl	8001978 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a5c:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <SysTick_Config+0x40>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a62:	4b04      	ldr	r3, [pc, #16]	; (8001a74 <SysTick_Config+0x40>)
 8001a64:	2207      	movs	r2, #7
 8001a66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	e000e010 	.word	0xe000e010

08001a78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f7ff ff47 	bl	8001914 <__NVIC_SetPriorityGrouping>
}
 8001a86:	bf00      	nop
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b086      	sub	sp, #24
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	4603      	mov	r3, r0
 8001a96:	60b9      	str	r1, [r7, #8]
 8001a98:	607a      	str	r2, [r7, #4]
 8001a9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aa0:	f7ff ff5c 	bl	800195c <__NVIC_GetPriorityGrouping>
 8001aa4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	68b9      	ldr	r1, [r7, #8]
 8001aaa:	6978      	ldr	r0, [r7, #20]
 8001aac:	f7ff ff8e 	bl	80019cc <NVIC_EncodePriority>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ab6:	4611      	mov	r1, r2
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff ff5d 	bl	8001978 <__NVIC_SetPriority>
}
 8001abe:	bf00      	nop
 8001ac0:	3718      	adds	r7, #24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b082      	sub	sp, #8
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff ffb0 	bl	8001a34 <SysTick_Config>
 8001ad4:	4603      	mov	r3, r0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b082      	sub	sp, #8
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d101      	bne.n	8001af0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e00e      	b.n	8001b0e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	795b      	ldrb	r3, [r3, #5]
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d105      	bne.n	8001b06 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7ff fcb9 	bl	8001478 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
	...

08001b18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b089      	sub	sp, #36	; 0x24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b22:	2300      	movs	r3, #0
 8001b24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b26:	2300      	movs	r3, #0
 8001b28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61fb      	str	r3, [r7, #28]
 8001b32:	e165      	b.n	8001e00 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b34:	2201      	movs	r2, #1
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	697a      	ldr	r2, [r7, #20]
 8001b44:	4013      	ands	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	f040 8154 	bne.w	8001dfa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f003 0303 	and.w	r3, r3, #3
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d005      	beq.n	8001b6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d130      	bne.n	8001bcc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	2203      	movs	r2, #3
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	68da      	ldr	r2, [r3, #12]
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	091b      	lsrs	r3, r3, #4
 8001bb6:	f003 0201 	and.w	r2, r3, #1
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 0303 	and.w	r3, r3, #3
 8001bd4:	2b03      	cmp	r3, #3
 8001bd6:	d017      	beq.n	8001c08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	2203      	movs	r2, #3
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	43db      	mvns	r3, r3
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	4013      	ands	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 0303 	and.w	r3, r3, #3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d123      	bne.n	8001c5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	08da      	lsrs	r2, r3, #3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3208      	adds	r2, #8
 8001c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	f003 0307 	and.w	r3, r3, #7
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	220f      	movs	r2, #15
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4013      	ands	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	691a      	ldr	r2, [r3, #16]
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	08da      	lsrs	r2, r3, #3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	3208      	adds	r2, #8
 8001c56:	69b9      	ldr	r1, [r7, #24]
 8001c58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	2203      	movs	r2, #3
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4013      	ands	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f003 0203 	and.w	r2, r3, #3
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	f000 80ae 	beq.w	8001dfa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	4b5d      	ldr	r3, [pc, #372]	; (8001e18 <HAL_GPIO_Init+0x300>)
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca6:	4a5c      	ldr	r2, [pc, #368]	; (8001e18 <HAL_GPIO_Init+0x300>)
 8001ca8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cac:	6453      	str	r3, [r2, #68]	; 0x44
 8001cae:	4b5a      	ldr	r3, [pc, #360]	; (8001e18 <HAL_GPIO_Init+0x300>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cba:	4a58      	ldr	r2, [pc, #352]	; (8001e1c <HAL_GPIO_Init+0x304>)
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	089b      	lsrs	r3, r3, #2
 8001cc0:	3302      	adds	r3, #2
 8001cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	f003 0303 	and.w	r3, r3, #3
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	220f      	movs	r2, #15
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a4f      	ldr	r2, [pc, #316]	; (8001e20 <HAL_GPIO_Init+0x308>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d025      	beq.n	8001d32 <HAL_GPIO_Init+0x21a>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a4e      	ldr	r2, [pc, #312]	; (8001e24 <HAL_GPIO_Init+0x30c>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d01f      	beq.n	8001d2e <HAL_GPIO_Init+0x216>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a4d      	ldr	r2, [pc, #308]	; (8001e28 <HAL_GPIO_Init+0x310>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d019      	beq.n	8001d2a <HAL_GPIO_Init+0x212>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a4c      	ldr	r2, [pc, #304]	; (8001e2c <HAL_GPIO_Init+0x314>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d013      	beq.n	8001d26 <HAL_GPIO_Init+0x20e>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a4b      	ldr	r2, [pc, #300]	; (8001e30 <HAL_GPIO_Init+0x318>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d00d      	beq.n	8001d22 <HAL_GPIO_Init+0x20a>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a4a      	ldr	r2, [pc, #296]	; (8001e34 <HAL_GPIO_Init+0x31c>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d007      	beq.n	8001d1e <HAL_GPIO_Init+0x206>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a49      	ldr	r2, [pc, #292]	; (8001e38 <HAL_GPIO_Init+0x320>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d101      	bne.n	8001d1a <HAL_GPIO_Init+0x202>
 8001d16:	2306      	movs	r3, #6
 8001d18:	e00c      	b.n	8001d34 <HAL_GPIO_Init+0x21c>
 8001d1a:	2307      	movs	r3, #7
 8001d1c:	e00a      	b.n	8001d34 <HAL_GPIO_Init+0x21c>
 8001d1e:	2305      	movs	r3, #5
 8001d20:	e008      	b.n	8001d34 <HAL_GPIO_Init+0x21c>
 8001d22:	2304      	movs	r3, #4
 8001d24:	e006      	b.n	8001d34 <HAL_GPIO_Init+0x21c>
 8001d26:	2303      	movs	r3, #3
 8001d28:	e004      	b.n	8001d34 <HAL_GPIO_Init+0x21c>
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	e002      	b.n	8001d34 <HAL_GPIO_Init+0x21c>
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e000      	b.n	8001d34 <HAL_GPIO_Init+0x21c>
 8001d32:	2300      	movs	r3, #0
 8001d34:	69fa      	ldr	r2, [r7, #28]
 8001d36:	f002 0203 	and.w	r2, r2, #3
 8001d3a:	0092      	lsls	r2, r2, #2
 8001d3c:	4093      	lsls	r3, r2
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d44:	4935      	ldr	r1, [pc, #212]	; (8001e1c <HAL_GPIO_Init+0x304>)
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	089b      	lsrs	r3, r3, #2
 8001d4a:	3302      	adds	r3, #2
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d52:	4b3a      	ldr	r3, [pc, #232]	; (8001e3c <HAL_GPIO_Init+0x324>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d76:	4a31      	ldr	r2, [pc, #196]	; (8001e3c <HAL_GPIO_Init+0x324>)
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d7c:	4b2f      	ldr	r3, [pc, #188]	; (8001e3c <HAL_GPIO_Init+0x324>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	43db      	mvns	r3, r3
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d003      	beq.n	8001da0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001da0:	4a26      	ldr	r2, [pc, #152]	; (8001e3c <HAL_GPIO_Init+0x324>)
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001da6:	4b25      	ldr	r3, [pc, #148]	; (8001e3c <HAL_GPIO_Init+0x324>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	43db      	mvns	r3, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4013      	ands	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dca:	4a1c      	ldr	r2, [pc, #112]	; (8001e3c <HAL_GPIO_Init+0x324>)
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dd0:	4b1a      	ldr	r3, [pc, #104]	; (8001e3c <HAL_GPIO_Init+0x324>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d003      	beq.n	8001df4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001df4:	4a11      	ldr	r2, [pc, #68]	; (8001e3c <HAL_GPIO_Init+0x324>)
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	61fb      	str	r3, [r7, #28]
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	2b0f      	cmp	r3, #15
 8001e04:	f67f ae96 	bls.w	8001b34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e08:	bf00      	nop
 8001e0a:	bf00      	nop
 8001e0c:	3724      	adds	r7, #36	; 0x24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40013800 	.word	0x40013800
 8001e20:	40020000 	.word	0x40020000
 8001e24:	40020400 	.word	0x40020400
 8001e28:	40020800 	.word	0x40020800
 8001e2c:	40020c00 	.word	0x40020c00
 8001e30:	40021000 	.word	0x40021000
 8001e34:	40021400 	.word	0x40021400
 8001e38:	40021800 	.word	0x40021800
 8001e3c:	40013c00 	.word	0x40013c00

08001e40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	460b      	mov	r3, r1
 8001e4a:	807b      	strh	r3, [r7, #2]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e50:	787b      	ldrb	r3, [r7, #1]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e56:	887a      	ldrh	r2, [r7, #2]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e5c:	e003      	b.n	8001e66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e5e:	887b      	ldrh	r3, [r7, #2]
 8001e60:	041a      	lsls	r2, r3, #16
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	619a      	str	r2, [r3, #24]
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
	...

08001e74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d101      	bne.n	8001e88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e0cc      	b.n	8002022 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e88:	4b68      	ldr	r3, [pc, #416]	; (800202c <HAL_RCC_ClockConfig+0x1b8>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 030f 	and.w	r3, r3, #15
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d90c      	bls.n	8001eb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e96:	4b65      	ldr	r3, [pc, #404]	; (800202c <HAL_RCC_ClockConfig+0x1b8>)
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	b2d2      	uxtb	r2, r2
 8001e9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e9e:	4b63      	ldr	r3, [pc, #396]	; (800202c <HAL_RCC_ClockConfig+0x1b8>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d001      	beq.n	8001eb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e0b8      	b.n	8002022 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d020      	beq.n	8001efe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0304 	and.w	r3, r3, #4
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d005      	beq.n	8001ed4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ec8:	4b59      	ldr	r3, [pc, #356]	; (8002030 <HAL_RCC_ClockConfig+0x1bc>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	4a58      	ldr	r2, [pc, #352]	; (8002030 <HAL_RCC_ClockConfig+0x1bc>)
 8001ece:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ed2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0308 	and.w	r3, r3, #8
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d005      	beq.n	8001eec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ee0:	4b53      	ldr	r3, [pc, #332]	; (8002030 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	4a52      	ldr	r2, [pc, #328]	; (8002030 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001eea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eec:	4b50      	ldr	r3, [pc, #320]	; (8002030 <HAL_RCC_ClockConfig+0x1bc>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	494d      	ldr	r1, [pc, #308]	; (8002030 <HAL_RCC_ClockConfig+0x1bc>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d044      	beq.n	8001f94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d107      	bne.n	8001f22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f12:	4b47      	ldr	r3, [pc, #284]	; (8002030 <HAL_RCC_ClockConfig+0x1bc>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d119      	bne.n	8001f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e07f      	b.n	8002022 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d003      	beq.n	8001f32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f2e:	2b03      	cmp	r3, #3
 8001f30:	d107      	bne.n	8001f42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f32:	4b3f      	ldr	r3, [pc, #252]	; (8002030 <HAL_RCC_ClockConfig+0x1bc>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d109      	bne.n	8001f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e06f      	b.n	8002022 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f42:	4b3b      	ldr	r3, [pc, #236]	; (8002030 <HAL_RCC_ClockConfig+0x1bc>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e067      	b.n	8002022 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f52:	4b37      	ldr	r3, [pc, #220]	; (8002030 <HAL_RCC_ClockConfig+0x1bc>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f023 0203 	bic.w	r2, r3, #3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	4934      	ldr	r1, [pc, #208]	; (8002030 <HAL_RCC_ClockConfig+0x1bc>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f64:	f7ff fca6 	bl	80018b4 <HAL_GetTick>
 8001f68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f6a:	e00a      	b.n	8001f82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f6c:	f7ff fca2 	bl	80018b4 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e04f      	b.n	8002022 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f82:	4b2b      	ldr	r3, [pc, #172]	; (8002030 <HAL_RCC_ClockConfig+0x1bc>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f003 020c 	and.w	r2, r3, #12
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d1eb      	bne.n	8001f6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f94:	4b25      	ldr	r3, [pc, #148]	; (800202c <HAL_RCC_ClockConfig+0x1b8>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 030f 	and.w	r3, r3, #15
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d20c      	bcs.n	8001fbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa2:	4b22      	ldr	r3, [pc, #136]	; (800202c <HAL_RCC_ClockConfig+0x1b8>)
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001faa:	4b20      	ldr	r3, [pc, #128]	; (800202c <HAL_RCC_ClockConfig+0x1b8>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 030f 	and.w	r3, r3, #15
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d001      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e032      	b.n	8002022 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0304 	and.w	r3, r3, #4
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d008      	beq.n	8001fda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fc8:	4b19      	ldr	r3, [pc, #100]	; (8002030 <HAL_RCC_ClockConfig+0x1bc>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	4916      	ldr	r1, [pc, #88]	; (8002030 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0308 	and.w	r3, r3, #8
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d009      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fe6:	4b12      	ldr	r3, [pc, #72]	; (8002030 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	490e      	ldr	r1, [pc, #56]	; (8002030 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ffa:	f000 f855 	bl	80020a8 <HAL_RCC_GetSysClockFreq>
 8001ffe:	4602      	mov	r2, r0
 8002000:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <HAL_RCC_ClockConfig+0x1bc>)
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	091b      	lsrs	r3, r3, #4
 8002006:	f003 030f 	and.w	r3, r3, #15
 800200a:	490a      	ldr	r1, [pc, #40]	; (8002034 <HAL_RCC_ClockConfig+0x1c0>)
 800200c:	5ccb      	ldrb	r3, [r1, r3]
 800200e:	fa22 f303 	lsr.w	r3, r2, r3
 8002012:	4a09      	ldr	r2, [pc, #36]	; (8002038 <HAL_RCC_ClockConfig+0x1c4>)
 8002014:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002016:	4b09      	ldr	r3, [pc, #36]	; (800203c <HAL_RCC_ClockConfig+0x1c8>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff fc06 	bl	800182c <HAL_InitTick>

  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40023c00 	.word	0x40023c00
 8002030:	40023800 	.word	0x40023800
 8002034:	080077a0 	.word	0x080077a0
 8002038:	20000000 	.word	0x20000000
 800203c:	20000004 	.word	0x20000004

08002040 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002044:	4b03      	ldr	r3, [pc, #12]	; (8002054 <HAL_RCC_GetHCLKFreq+0x14>)
 8002046:	681b      	ldr	r3, [r3, #0]
}
 8002048:	4618      	mov	r0, r3
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	20000000 	.word	0x20000000

08002058 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800205c:	f7ff fff0 	bl	8002040 <HAL_RCC_GetHCLKFreq>
 8002060:	4602      	mov	r2, r0
 8002062:	4b05      	ldr	r3, [pc, #20]	; (8002078 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	0a9b      	lsrs	r3, r3, #10
 8002068:	f003 0307 	and.w	r3, r3, #7
 800206c:	4903      	ldr	r1, [pc, #12]	; (800207c <HAL_RCC_GetPCLK1Freq+0x24>)
 800206e:	5ccb      	ldrb	r3, [r1, r3]
 8002070:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002074:	4618      	mov	r0, r3
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40023800 	.word	0x40023800
 800207c:	080077b0 	.word	0x080077b0

08002080 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002084:	f7ff ffdc 	bl	8002040 <HAL_RCC_GetHCLKFreq>
 8002088:	4602      	mov	r2, r0
 800208a:	4b05      	ldr	r3, [pc, #20]	; (80020a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	0b5b      	lsrs	r3, r3, #13
 8002090:	f003 0307 	and.w	r3, r3, #7
 8002094:	4903      	ldr	r1, [pc, #12]	; (80020a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002096:	5ccb      	ldrb	r3, [r1, r3]
 8002098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800209c:	4618      	mov	r0, r3
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40023800 	.word	0x40023800
 80020a4:	080077b0 	.word	0x080077b0

080020a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020ac:	b0ae      	sub	sp, #184	; 0xb8
 80020ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80020b0:	2300      	movs	r3, #0
 80020b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80020b6:	2300      	movs	r3, #0
 80020b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80020bc:	2300      	movs	r3, #0
 80020be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80020c2:	2300      	movs	r3, #0
 80020c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80020c8:	2300      	movs	r3, #0
 80020ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020ce:	4bcb      	ldr	r3, [pc, #812]	; (80023fc <HAL_RCC_GetSysClockFreq+0x354>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f003 030c 	and.w	r3, r3, #12
 80020d6:	2b0c      	cmp	r3, #12
 80020d8:	f200 8206 	bhi.w	80024e8 <HAL_RCC_GetSysClockFreq+0x440>
 80020dc:	a201      	add	r2, pc, #4	; (adr r2, 80020e4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80020de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e2:	bf00      	nop
 80020e4:	08002119 	.word	0x08002119
 80020e8:	080024e9 	.word	0x080024e9
 80020ec:	080024e9 	.word	0x080024e9
 80020f0:	080024e9 	.word	0x080024e9
 80020f4:	08002121 	.word	0x08002121
 80020f8:	080024e9 	.word	0x080024e9
 80020fc:	080024e9 	.word	0x080024e9
 8002100:	080024e9 	.word	0x080024e9
 8002104:	08002129 	.word	0x08002129
 8002108:	080024e9 	.word	0x080024e9
 800210c:	080024e9 	.word	0x080024e9
 8002110:	080024e9 	.word	0x080024e9
 8002114:	08002319 	.word	0x08002319
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002118:	4bb9      	ldr	r3, [pc, #740]	; (8002400 <HAL_RCC_GetSysClockFreq+0x358>)
 800211a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800211e:	e1e7      	b.n	80024f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002120:	4bb8      	ldr	r3, [pc, #736]	; (8002404 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002122:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002126:	e1e3      	b.n	80024f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002128:	4bb4      	ldr	r3, [pc, #720]	; (80023fc <HAL_RCC_GetSysClockFreq+0x354>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002130:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002134:	4bb1      	ldr	r3, [pc, #708]	; (80023fc <HAL_RCC_GetSysClockFreq+0x354>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d071      	beq.n	8002224 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002140:	4bae      	ldr	r3, [pc, #696]	; (80023fc <HAL_RCC_GetSysClockFreq+0x354>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	099b      	lsrs	r3, r3, #6
 8002146:	2200      	movs	r2, #0
 8002148:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800214c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002150:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002158:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800215c:	2300      	movs	r3, #0
 800215e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002162:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002166:	4622      	mov	r2, r4
 8002168:	462b      	mov	r3, r5
 800216a:	f04f 0000 	mov.w	r0, #0
 800216e:	f04f 0100 	mov.w	r1, #0
 8002172:	0159      	lsls	r1, r3, #5
 8002174:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002178:	0150      	lsls	r0, r2, #5
 800217a:	4602      	mov	r2, r0
 800217c:	460b      	mov	r3, r1
 800217e:	4621      	mov	r1, r4
 8002180:	1a51      	subs	r1, r2, r1
 8002182:	6439      	str	r1, [r7, #64]	; 0x40
 8002184:	4629      	mov	r1, r5
 8002186:	eb63 0301 	sbc.w	r3, r3, r1
 800218a:	647b      	str	r3, [r7, #68]	; 0x44
 800218c:	f04f 0200 	mov.w	r2, #0
 8002190:	f04f 0300 	mov.w	r3, #0
 8002194:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002198:	4649      	mov	r1, r9
 800219a:	018b      	lsls	r3, r1, #6
 800219c:	4641      	mov	r1, r8
 800219e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021a2:	4641      	mov	r1, r8
 80021a4:	018a      	lsls	r2, r1, #6
 80021a6:	4641      	mov	r1, r8
 80021a8:	1a51      	subs	r1, r2, r1
 80021aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80021ac:	4649      	mov	r1, r9
 80021ae:	eb63 0301 	sbc.w	r3, r3, r1
 80021b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021b4:	f04f 0200 	mov.w	r2, #0
 80021b8:	f04f 0300 	mov.w	r3, #0
 80021bc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80021c0:	4649      	mov	r1, r9
 80021c2:	00cb      	lsls	r3, r1, #3
 80021c4:	4641      	mov	r1, r8
 80021c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021ca:	4641      	mov	r1, r8
 80021cc:	00ca      	lsls	r2, r1, #3
 80021ce:	4610      	mov	r0, r2
 80021d0:	4619      	mov	r1, r3
 80021d2:	4603      	mov	r3, r0
 80021d4:	4622      	mov	r2, r4
 80021d6:	189b      	adds	r3, r3, r2
 80021d8:	633b      	str	r3, [r7, #48]	; 0x30
 80021da:	462b      	mov	r3, r5
 80021dc:	460a      	mov	r2, r1
 80021de:	eb42 0303 	adc.w	r3, r2, r3
 80021e2:	637b      	str	r3, [r7, #52]	; 0x34
 80021e4:	f04f 0200 	mov.w	r2, #0
 80021e8:	f04f 0300 	mov.w	r3, #0
 80021ec:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80021f0:	4629      	mov	r1, r5
 80021f2:	024b      	lsls	r3, r1, #9
 80021f4:	4621      	mov	r1, r4
 80021f6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80021fa:	4621      	mov	r1, r4
 80021fc:	024a      	lsls	r2, r1, #9
 80021fe:	4610      	mov	r0, r2
 8002200:	4619      	mov	r1, r3
 8002202:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002206:	2200      	movs	r2, #0
 8002208:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800220c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002210:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002214:	f7fe fce8 	bl	8000be8 <__aeabi_uldivmod>
 8002218:	4602      	mov	r2, r0
 800221a:	460b      	mov	r3, r1
 800221c:	4613      	mov	r3, r2
 800221e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002222:	e067      	b.n	80022f4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002224:	4b75      	ldr	r3, [pc, #468]	; (80023fc <HAL_RCC_GetSysClockFreq+0x354>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	099b      	lsrs	r3, r3, #6
 800222a:	2200      	movs	r2, #0
 800222c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002230:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002234:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002238:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800223c:	67bb      	str	r3, [r7, #120]	; 0x78
 800223e:	2300      	movs	r3, #0
 8002240:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002242:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002246:	4622      	mov	r2, r4
 8002248:	462b      	mov	r3, r5
 800224a:	f04f 0000 	mov.w	r0, #0
 800224e:	f04f 0100 	mov.w	r1, #0
 8002252:	0159      	lsls	r1, r3, #5
 8002254:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002258:	0150      	lsls	r0, r2, #5
 800225a:	4602      	mov	r2, r0
 800225c:	460b      	mov	r3, r1
 800225e:	4621      	mov	r1, r4
 8002260:	1a51      	subs	r1, r2, r1
 8002262:	62b9      	str	r1, [r7, #40]	; 0x28
 8002264:	4629      	mov	r1, r5
 8002266:	eb63 0301 	sbc.w	r3, r3, r1
 800226a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800226c:	f04f 0200 	mov.w	r2, #0
 8002270:	f04f 0300 	mov.w	r3, #0
 8002274:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002278:	4649      	mov	r1, r9
 800227a:	018b      	lsls	r3, r1, #6
 800227c:	4641      	mov	r1, r8
 800227e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002282:	4641      	mov	r1, r8
 8002284:	018a      	lsls	r2, r1, #6
 8002286:	4641      	mov	r1, r8
 8002288:	ebb2 0a01 	subs.w	sl, r2, r1
 800228c:	4649      	mov	r1, r9
 800228e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002292:	f04f 0200 	mov.w	r2, #0
 8002296:	f04f 0300 	mov.w	r3, #0
 800229a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800229e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80022a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022a6:	4692      	mov	sl, r2
 80022a8:	469b      	mov	fp, r3
 80022aa:	4623      	mov	r3, r4
 80022ac:	eb1a 0303 	adds.w	r3, sl, r3
 80022b0:	623b      	str	r3, [r7, #32]
 80022b2:	462b      	mov	r3, r5
 80022b4:	eb4b 0303 	adc.w	r3, fp, r3
 80022b8:	627b      	str	r3, [r7, #36]	; 0x24
 80022ba:	f04f 0200 	mov.w	r2, #0
 80022be:	f04f 0300 	mov.w	r3, #0
 80022c2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80022c6:	4629      	mov	r1, r5
 80022c8:	028b      	lsls	r3, r1, #10
 80022ca:	4621      	mov	r1, r4
 80022cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022d0:	4621      	mov	r1, r4
 80022d2:	028a      	lsls	r2, r1, #10
 80022d4:	4610      	mov	r0, r2
 80022d6:	4619      	mov	r1, r3
 80022d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80022dc:	2200      	movs	r2, #0
 80022de:	673b      	str	r3, [r7, #112]	; 0x70
 80022e0:	677a      	str	r2, [r7, #116]	; 0x74
 80022e2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80022e6:	f7fe fc7f 	bl	8000be8 <__aeabi_uldivmod>
 80022ea:	4602      	mov	r2, r0
 80022ec:	460b      	mov	r3, r1
 80022ee:	4613      	mov	r3, r2
 80022f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022f4:	4b41      	ldr	r3, [pc, #260]	; (80023fc <HAL_RCC_GetSysClockFreq+0x354>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	0c1b      	lsrs	r3, r3, #16
 80022fa:	f003 0303 	and.w	r3, r3, #3
 80022fe:	3301      	adds	r3, #1
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002306:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800230a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800230e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002312:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002316:	e0eb      	b.n	80024f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002318:	4b38      	ldr	r3, [pc, #224]	; (80023fc <HAL_RCC_GetSysClockFreq+0x354>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002320:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002324:	4b35      	ldr	r3, [pc, #212]	; (80023fc <HAL_RCC_GetSysClockFreq+0x354>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d06b      	beq.n	8002408 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002330:	4b32      	ldr	r3, [pc, #200]	; (80023fc <HAL_RCC_GetSysClockFreq+0x354>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	099b      	lsrs	r3, r3, #6
 8002336:	2200      	movs	r2, #0
 8002338:	66bb      	str	r3, [r7, #104]	; 0x68
 800233a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800233c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800233e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002342:	663b      	str	r3, [r7, #96]	; 0x60
 8002344:	2300      	movs	r3, #0
 8002346:	667b      	str	r3, [r7, #100]	; 0x64
 8002348:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800234c:	4622      	mov	r2, r4
 800234e:	462b      	mov	r3, r5
 8002350:	f04f 0000 	mov.w	r0, #0
 8002354:	f04f 0100 	mov.w	r1, #0
 8002358:	0159      	lsls	r1, r3, #5
 800235a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800235e:	0150      	lsls	r0, r2, #5
 8002360:	4602      	mov	r2, r0
 8002362:	460b      	mov	r3, r1
 8002364:	4621      	mov	r1, r4
 8002366:	1a51      	subs	r1, r2, r1
 8002368:	61b9      	str	r1, [r7, #24]
 800236a:	4629      	mov	r1, r5
 800236c:	eb63 0301 	sbc.w	r3, r3, r1
 8002370:	61fb      	str	r3, [r7, #28]
 8002372:	f04f 0200 	mov.w	r2, #0
 8002376:	f04f 0300 	mov.w	r3, #0
 800237a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800237e:	4659      	mov	r1, fp
 8002380:	018b      	lsls	r3, r1, #6
 8002382:	4651      	mov	r1, sl
 8002384:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002388:	4651      	mov	r1, sl
 800238a:	018a      	lsls	r2, r1, #6
 800238c:	4651      	mov	r1, sl
 800238e:	ebb2 0801 	subs.w	r8, r2, r1
 8002392:	4659      	mov	r1, fp
 8002394:	eb63 0901 	sbc.w	r9, r3, r1
 8002398:	f04f 0200 	mov.w	r2, #0
 800239c:	f04f 0300 	mov.w	r3, #0
 80023a0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023a4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023a8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023ac:	4690      	mov	r8, r2
 80023ae:	4699      	mov	r9, r3
 80023b0:	4623      	mov	r3, r4
 80023b2:	eb18 0303 	adds.w	r3, r8, r3
 80023b6:	613b      	str	r3, [r7, #16]
 80023b8:	462b      	mov	r3, r5
 80023ba:	eb49 0303 	adc.w	r3, r9, r3
 80023be:	617b      	str	r3, [r7, #20]
 80023c0:	f04f 0200 	mov.w	r2, #0
 80023c4:	f04f 0300 	mov.w	r3, #0
 80023c8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80023cc:	4629      	mov	r1, r5
 80023ce:	024b      	lsls	r3, r1, #9
 80023d0:	4621      	mov	r1, r4
 80023d2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80023d6:	4621      	mov	r1, r4
 80023d8:	024a      	lsls	r2, r1, #9
 80023da:	4610      	mov	r0, r2
 80023dc:	4619      	mov	r1, r3
 80023de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80023e2:	2200      	movs	r2, #0
 80023e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80023e6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80023e8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80023ec:	f7fe fbfc 	bl	8000be8 <__aeabi_uldivmod>
 80023f0:	4602      	mov	r2, r0
 80023f2:	460b      	mov	r3, r1
 80023f4:	4613      	mov	r3, r2
 80023f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80023fa:	e065      	b.n	80024c8 <HAL_RCC_GetSysClockFreq+0x420>
 80023fc:	40023800 	.word	0x40023800
 8002400:	00f42400 	.word	0x00f42400
 8002404:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002408:	4b3d      	ldr	r3, [pc, #244]	; (8002500 <HAL_RCC_GetSysClockFreq+0x458>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	099b      	lsrs	r3, r3, #6
 800240e:	2200      	movs	r2, #0
 8002410:	4618      	mov	r0, r3
 8002412:	4611      	mov	r1, r2
 8002414:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002418:	653b      	str	r3, [r7, #80]	; 0x50
 800241a:	2300      	movs	r3, #0
 800241c:	657b      	str	r3, [r7, #84]	; 0x54
 800241e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002422:	4642      	mov	r2, r8
 8002424:	464b      	mov	r3, r9
 8002426:	f04f 0000 	mov.w	r0, #0
 800242a:	f04f 0100 	mov.w	r1, #0
 800242e:	0159      	lsls	r1, r3, #5
 8002430:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002434:	0150      	lsls	r0, r2, #5
 8002436:	4602      	mov	r2, r0
 8002438:	460b      	mov	r3, r1
 800243a:	4641      	mov	r1, r8
 800243c:	1a51      	subs	r1, r2, r1
 800243e:	60b9      	str	r1, [r7, #8]
 8002440:	4649      	mov	r1, r9
 8002442:	eb63 0301 	sbc.w	r3, r3, r1
 8002446:	60fb      	str	r3, [r7, #12]
 8002448:	f04f 0200 	mov.w	r2, #0
 800244c:	f04f 0300 	mov.w	r3, #0
 8002450:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002454:	4659      	mov	r1, fp
 8002456:	018b      	lsls	r3, r1, #6
 8002458:	4651      	mov	r1, sl
 800245a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800245e:	4651      	mov	r1, sl
 8002460:	018a      	lsls	r2, r1, #6
 8002462:	4651      	mov	r1, sl
 8002464:	1a54      	subs	r4, r2, r1
 8002466:	4659      	mov	r1, fp
 8002468:	eb63 0501 	sbc.w	r5, r3, r1
 800246c:	f04f 0200 	mov.w	r2, #0
 8002470:	f04f 0300 	mov.w	r3, #0
 8002474:	00eb      	lsls	r3, r5, #3
 8002476:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800247a:	00e2      	lsls	r2, r4, #3
 800247c:	4614      	mov	r4, r2
 800247e:	461d      	mov	r5, r3
 8002480:	4643      	mov	r3, r8
 8002482:	18e3      	adds	r3, r4, r3
 8002484:	603b      	str	r3, [r7, #0]
 8002486:	464b      	mov	r3, r9
 8002488:	eb45 0303 	adc.w	r3, r5, r3
 800248c:	607b      	str	r3, [r7, #4]
 800248e:	f04f 0200 	mov.w	r2, #0
 8002492:	f04f 0300 	mov.w	r3, #0
 8002496:	e9d7 4500 	ldrd	r4, r5, [r7]
 800249a:	4629      	mov	r1, r5
 800249c:	028b      	lsls	r3, r1, #10
 800249e:	4621      	mov	r1, r4
 80024a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024a4:	4621      	mov	r1, r4
 80024a6:	028a      	lsls	r2, r1, #10
 80024a8:	4610      	mov	r0, r2
 80024aa:	4619      	mov	r1, r3
 80024ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80024b0:	2200      	movs	r2, #0
 80024b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80024b4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80024b6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80024ba:	f7fe fb95 	bl	8000be8 <__aeabi_uldivmod>
 80024be:	4602      	mov	r2, r0
 80024c0:	460b      	mov	r3, r1
 80024c2:	4613      	mov	r3, r2
 80024c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80024c8:	4b0d      	ldr	r3, [pc, #52]	; (8002500 <HAL_RCC_GetSysClockFreq+0x458>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	0f1b      	lsrs	r3, r3, #28
 80024ce:	f003 0307 	and.w	r3, r3, #7
 80024d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80024d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80024da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80024de:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80024e6:	e003      	b.n	80024f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024e8:	4b06      	ldr	r3, [pc, #24]	; (8002504 <HAL_RCC_GetSysClockFreq+0x45c>)
 80024ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80024ee:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	37b8      	adds	r7, #184	; 0xb8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024fe:	bf00      	nop
 8002500:	40023800 	.word	0x40023800
 8002504:	00f42400 	.word	0x00f42400

08002508 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e28d      	b.n	8002a36 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 8083 	beq.w	800262e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002528:	4b94      	ldr	r3, [pc, #592]	; (800277c <HAL_RCC_OscConfig+0x274>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f003 030c 	and.w	r3, r3, #12
 8002530:	2b04      	cmp	r3, #4
 8002532:	d019      	beq.n	8002568 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002534:	4b91      	ldr	r3, [pc, #580]	; (800277c <HAL_RCC_OscConfig+0x274>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800253c:	2b08      	cmp	r3, #8
 800253e:	d106      	bne.n	800254e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002540:	4b8e      	ldr	r3, [pc, #568]	; (800277c <HAL_RCC_OscConfig+0x274>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002548:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800254c:	d00c      	beq.n	8002568 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800254e:	4b8b      	ldr	r3, [pc, #556]	; (800277c <HAL_RCC_OscConfig+0x274>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002556:	2b0c      	cmp	r3, #12
 8002558:	d112      	bne.n	8002580 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800255a:	4b88      	ldr	r3, [pc, #544]	; (800277c <HAL_RCC_OscConfig+0x274>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002562:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002566:	d10b      	bne.n	8002580 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002568:	4b84      	ldr	r3, [pc, #528]	; (800277c <HAL_RCC_OscConfig+0x274>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d05b      	beq.n	800262c <HAL_RCC_OscConfig+0x124>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d157      	bne.n	800262c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e25a      	b.n	8002a36 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002588:	d106      	bne.n	8002598 <HAL_RCC_OscConfig+0x90>
 800258a:	4b7c      	ldr	r3, [pc, #496]	; (800277c <HAL_RCC_OscConfig+0x274>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a7b      	ldr	r2, [pc, #492]	; (800277c <HAL_RCC_OscConfig+0x274>)
 8002590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002594:	6013      	str	r3, [r2, #0]
 8002596:	e01d      	b.n	80025d4 <HAL_RCC_OscConfig+0xcc>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025a0:	d10c      	bne.n	80025bc <HAL_RCC_OscConfig+0xb4>
 80025a2:	4b76      	ldr	r3, [pc, #472]	; (800277c <HAL_RCC_OscConfig+0x274>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a75      	ldr	r2, [pc, #468]	; (800277c <HAL_RCC_OscConfig+0x274>)
 80025a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025ac:	6013      	str	r3, [r2, #0]
 80025ae:	4b73      	ldr	r3, [pc, #460]	; (800277c <HAL_RCC_OscConfig+0x274>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a72      	ldr	r2, [pc, #456]	; (800277c <HAL_RCC_OscConfig+0x274>)
 80025b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025b8:	6013      	str	r3, [r2, #0]
 80025ba:	e00b      	b.n	80025d4 <HAL_RCC_OscConfig+0xcc>
 80025bc:	4b6f      	ldr	r3, [pc, #444]	; (800277c <HAL_RCC_OscConfig+0x274>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a6e      	ldr	r2, [pc, #440]	; (800277c <HAL_RCC_OscConfig+0x274>)
 80025c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025c6:	6013      	str	r3, [r2, #0]
 80025c8:	4b6c      	ldr	r3, [pc, #432]	; (800277c <HAL_RCC_OscConfig+0x274>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a6b      	ldr	r2, [pc, #428]	; (800277c <HAL_RCC_OscConfig+0x274>)
 80025ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d013      	beq.n	8002604 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025dc:	f7ff f96a 	bl	80018b4 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025e4:	f7ff f966 	bl	80018b4 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b64      	cmp	r3, #100	; 0x64
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e21f      	b.n	8002a36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f6:	4b61      	ldr	r3, [pc, #388]	; (800277c <HAL_RCC_OscConfig+0x274>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d0f0      	beq.n	80025e4 <HAL_RCC_OscConfig+0xdc>
 8002602:	e014      	b.n	800262e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002604:	f7ff f956 	bl	80018b4 <HAL_GetTick>
 8002608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800260a:	e008      	b.n	800261e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800260c:	f7ff f952 	bl	80018b4 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b64      	cmp	r3, #100	; 0x64
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e20b      	b.n	8002a36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800261e:	4b57      	ldr	r3, [pc, #348]	; (800277c <HAL_RCC_OscConfig+0x274>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1f0      	bne.n	800260c <HAL_RCC_OscConfig+0x104>
 800262a:	e000      	b.n	800262e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800262c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d06f      	beq.n	800271a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800263a:	4b50      	ldr	r3, [pc, #320]	; (800277c <HAL_RCC_OscConfig+0x274>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f003 030c 	and.w	r3, r3, #12
 8002642:	2b00      	cmp	r3, #0
 8002644:	d017      	beq.n	8002676 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002646:	4b4d      	ldr	r3, [pc, #308]	; (800277c <HAL_RCC_OscConfig+0x274>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800264e:	2b08      	cmp	r3, #8
 8002650:	d105      	bne.n	800265e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002652:	4b4a      	ldr	r3, [pc, #296]	; (800277c <HAL_RCC_OscConfig+0x274>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00b      	beq.n	8002676 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800265e:	4b47      	ldr	r3, [pc, #284]	; (800277c <HAL_RCC_OscConfig+0x274>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002666:	2b0c      	cmp	r3, #12
 8002668:	d11c      	bne.n	80026a4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800266a:	4b44      	ldr	r3, [pc, #272]	; (800277c <HAL_RCC_OscConfig+0x274>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d116      	bne.n	80026a4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002676:	4b41      	ldr	r3, [pc, #260]	; (800277c <HAL_RCC_OscConfig+0x274>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d005      	beq.n	800268e <HAL_RCC_OscConfig+0x186>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d001      	beq.n	800268e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e1d3      	b.n	8002a36 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800268e:	4b3b      	ldr	r3, [pc, #236]	; (800277c <HAL_RCC_OscConfig+0x274>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	4937      	ldr	r1, [pc, #220]	; (800277c <HAL_RCC_OscConfig+0x274>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026a2:	e03a      	b.n	800271a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d020      	beq.n	80026ee <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026ac:	4b34      	ldr	r3, [pc, #208]	; (8002780 <HAL_RCC_OscConfig+0x278>)
 80026ae:	2201      	movs	r2, #1
 80026b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b2:	f7ff f8ff 	bl	80018b4 <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b8:	e008      	b.n	80026cc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026ba:	f7ff f8fb 	bl	80018b4 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e1b4      	b.n	8002a36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026cc:	4b2b      	ldr	r3, [pc, #172]	; (800277c <HAL_RCC_OscConfig+0x274>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d0f0      	beq.n	80026ba <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d8:	4b28      	ldr	r3, [pc, #160]	; (800277c <HAL_RCC_OscConfig+0x274>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	4925      	ldr	r1, [pc, #148]	; (800277c <HAL_RCC_OscConfig+0x274>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	600b      	str	r3, [r1, #0]
 80026ec:	e015      	b.n	800271a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026ee:	4b24      	ldr	r3, [pc, #144]	; (8002780 <HAL_RCC_OscConfig+0x278>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f4:	f7ff f8de 	bl	80018b4 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026fc:	f7ff f8da 	bl	80018b4 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e193      	b.n	8002a36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800270e:	4b1b      	ldr	r3, [pc, #108]	; (800277c <HAL_RCC_OscConfig+0x274>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f0      	bne.n	80026fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0308 	and.w	r3, r3, #8
 8002722:	2b00      	cmp	r3, #0
 8002724:	d036      	beq.n	8002794 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d016      	beq.n	800275c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800272e:	4b15      	ldr	r3, [pc, #84]	; (8002784 <HAL_RCC_OscConfig+0x27c>)
 8002730:	2201      	movs	r2, #1
 8002732:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002734:	f7ff f8be 	bl	80018b4 <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800273c:	f7ff f8ba 	bl	80018b4 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e173      	b.n	8002a36 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800274e:	4b0b      	ldr	r3, [pc, #44]	; (800277c <HAL_RCC_OscConfig+0x274>)
 8002750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0f0      	beq.n	800273c <HAL_RCC_OscConfig+0x234>
 800275a:	e01b      	b.n	8002794 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800275c:	4b09      	ldr	r3, [pc, #36]	; (8002784 <HAL_RCC_OscConfig+0x27c>)
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002762:	f7ff f8a7 	bl	80018b4 <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002768:	e00e      	b.n	8002788 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800276a:	f7ff f8a3 	bl	80018b4 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d907      	bls.n	8002788 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e15c      	b.n	8002a36 <HAL_RCC_OscConfig+0x52e>
 800277c:	40023800 	.word	0x40023800
 8002780:	42470000 	.word	0x42470000
 8002784:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002788:	4b8a      	ldr	r3, [pc, #552]	; (80029b4 <HAL_RCC_OscConfig+0x4ac>)
 800278a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1ea      	bne.n	800276a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0304 	and.w	r3, r3, #4
 800279c:	2b00      	cmp	r3, #0
 800279e:	f000 8097 	beq.w	80028d0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027a2:	2300      	movs	r3, #0
 80027a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027a6:	4b83      	ldr	r3, [pc, #524]	; (80029b4 <HAL_RCC_OscConfig+0x4ac>)
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10f      	bne.n	80027d2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	60bb      	str	r3, [r7, #8]
 80027b6:	4b7f      	ldr	r3, [pc, #508]	; (80029b4 <HAL_RCC_OscConfig+0x4ac>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	4a7e      	ldr	r2, [pc, #504]	; (80029b4 <HAL_RCC_OscConfig+0x4ac>)
 80027bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027c0:	6413      	str	r3, [r2, #64]	; 0x40
 80027c2:	4b7c      	ldr	r3, [pc, #496]	; (80029b4 <HAL_RCC_OscConfig+0x4ac>)
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ca:	60bb      	str	r3, [r7, #8]
 80027cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ce:	2301      	movs	r3, #1
 80027d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d2:	4b79      	ldr	r3, [pc, #484]	; (80029b8 <HAL_RCC_OscConfig+0x4b0>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d118      	bne.n	8002810 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027de:	4b76      	ldr	r3, [pc, #472]	; (80029b8 <HAL_RCC_OscConfig+0x4b0>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a75      	ldr	r2, [pc, #468]	; (80029b8 <HAL_RCC_OscConfig+0x4b0>)
 80027e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ea:	f7ff f863 	bl	80018b4 <HAL_GetTick>
 80027ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f0:	e008      	b.n	8002804 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027f2:	f7ff f85f 	bl	80018b4 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e118      	b.n	8002a36 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002804:	4b6c      	ldr	r3, [pc, #432]	; (80029b8 <HAL_RCC_OscConfig+0x4b0>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800280c:	2b00      	cmp	r3, #0
 800280e:	d0f0      	beq.n	80027f2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d106      	bne.n	8002826 <HAL_RCC_OscConfig+0x31e>
 8002818:	4b66      	ldr	r3, [pc, #408]	; (80029b4 <HAL_RCC_OscConfig+0x4ac>)
 800281a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281c:	4a65      	ldr	r2, [pc, #404]	; (80029b4 <HAL_RCC_OscConfig+0x4ac>)
 800281e:	f043 0301 	orr.w	r3, r3, #1
 8002822:	6713      	str	r3, [r2, #112]	; 0x70
 8002824:	e01c      	b.n	8002860 <HAL_RCC_OscConfig+0x358>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	2b05      	cmp	r3, #5
 800282c:	d10c      	bne.n	8002848 <HAL_RCC_OscConfig+0x340>
 800282e:	4b61      	ldr	r3, [pc, #388]	; (80029b4 <HAL_RCC_OscConfig+0x4ac>)
 8002830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002832:	4a60      	ldr	r2, [pc, #384]	; (80029b4 <HAL_RCC_OscConfig+0x4ac>)
 8002834:	f043 0304 	orr.w	r3, r3, #4
 8002838:	6713      	str	r3, [r2, #112]	; 0x70
 800283a:	4b5e      	ldr	r3, [pc, #376]	; (80029b4 <HAL_RCC_OscConfig+0x4ac>)
 800283c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800283e:	4a5d      	ldr	r2, [pc, #372]	; (80029b4 <HAL_RCC_OscConfig+0x4ac>)
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	6713      	str	r3, [r2, #112]	; 0x70
 8002846:	e00b      	b.n	8002860 <HAL_RCC_OscConfig+0x358>
 8002848:	4b5a      	ldr	r3, [pc, #360]	; (80029b4 <HAL_RCC_OscConfig+0x4ac>)
 800284a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284c:	4a59      	ldr	r2, [pc, #356]	; (80029b4 <HAL_RCC_OscConfig+0x4ac>)
 800284e:	f023 0301 	bic.w	r3, r3, #1
 8002852:	6713      	str	r3, [r2, #112]	; 0x70
 8002854:	4b57      	ldr	r3, [pc, #348]	; (80029b4 <HAL_RCC_OscConfig+0x4ac>)
 8002856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002858:	4a56      	ldr	r2, [pc, #344]	; (80029b4 <HAL_RCC_OscConfig+0x4ac>)
 800285a:	f023 0304 	bic.w	r3, r3, #4
 800285e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d015      	beq.n	8002894 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002868:	f7ff f824 	bl	80018b4 <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800286e:	e00a      	b.n	8002886 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002870:	f7ff f820 	bl	80018b4 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	f241 3288 	movw	r2, #5000	; 0x1388
 800287e:	4293      	cmp	r3, r2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e0d7      	b.n	8002a36 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002886:	4b4b      	ldr	r3, [pc, #300]	; (80029b4 <HAL_RCC_OscConfig+0x4ac>)
 8002888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d0ee      	beq.n	8002870 <HAL_RCC_OscConfig+0x368>
 8002892:	e014      	b.n	80028be <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002894:	f7ff f80e 	bl	80018b4 <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800289a:	e00a      	b.n	80028b2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800289c:	f7ff f80a 	bl	80018b4 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e0c1      	b.n	8002a36 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028b2:	4b40      	ldr	r3, [pc, #256]	; (80029b4 <HAL_RCC_OscConfig+0x4ac>)
 80028b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1ee      	bne.n	800289c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028be:	7dfb      	ldrb	r3, [r7, #23]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d105      	bne.n	80028d0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028c4:	4b3b      	ldr	r3, [pc, #236]	; (80029b4 <HAL_RCC_OscConfig+0x4ac>)
 80028c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c8:	4a3a      	ldr	r2, [pc, #232]	; (80029b4 <HAL_RCC_OscConfig+0x4ac>)
 80028ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 80ad 	beq.w	8002a34 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028da:	4b36      	ldr	r3, [pc, #216]	; (80029b4 <HAL_RCC_OscConfig+0x4ac>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 030c 	and.w	r3, r3, #12
 80028e2:	2b08      	cmp	r3, #8
 80028e4:	d060      	beq.n	80029a8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d145      	bne.n	800297a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ee:	4b33      	ldr	r3, [pc, #204]	; (80029bc <HAL_RCC_OscConfig+0x4b4>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f4:	f7fe ffde 	bl	80018b4 <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028fc:	f7fe ffda 	bl	80018b4 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e093      	b.n	8002a36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800290e:	4b29      	ldr	r3, [pc, #164]	; (80029b4 <HAL_RCC_OscConfig+0x4ac>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1f0      	bne.n	80028fc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	69da      	ldr	r2, [r3, #28]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	431a      	orrs	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002928:	019b      	lsls	r3, r3, #6
 800292a:	431a      	orrs	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002930:	085b      	lsrs	r3, r3, #1
 8002932:	3b01      	subs	r3, #1
 8002934:	041b      	lsls	r3, r3, #16
 8002936:	431a      	orrs	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293c:	061b      	lsls	r3, r3, #24
 800293e:	431a      	orrs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002944:	071b      	lsls	r3, r3, #28
 8002946:	491b      	ldr	r1, [pc, #108]	; (80029b4 <HAL_RCC_OscConfig+0x4ac>)
 8002948:	4313      	orrs	r3, r2
 800294a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800294c:	4b1b      	ldr	r3, [pc, #108]	; (80029bc <HAL_RCC_OscConfig+0x4b4>)
 800294e:	2201      	movs	r2, #1
 8002950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002952:	f7fe ffaf 	bl	80018b4 <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002958:	e008      	b.n	800296c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800295a:	f7fe ffab 	bl	80018b4 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e064      	b.n	8002a36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800296c:	4b11      	ldr	r3, [pc, #68]	; (80029b4 <HAL_RCC_OscConfig+0x4ac>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d0f0      	beq.n	800295a <HAL_RCC_OscConfig+0x452>
 8002978:	e05c      	b.n	8002a34 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800297a:	4b10      	ldr	r3, [pc, #64]	; (80029bc <HAL_RCC_OscConfig+0x4b4>)
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002980:	f7fe ff98 	bl	80018b4 <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002988:	f7fe ff94 	bl	80018b4 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e04d      	b.n	8002a36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800299a:	4b06      	ldr	r3, [pc, #24]	; (80029b4 <HAL_RCC_OscConfig+0x4ac>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1f0      	bne.n	8002988 <HAL_RCC_OscConfig+0x480>
 80029a6:	e045      	b.n	8002a34 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d107      	bne.n	80029c0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e040      	b.n	8002a36 <HAL_RCC_OscConfig+0x52e>
 80029b4:	40023800 	.word	0x40023800
 80029b8:	40007000 	.word	0x40007000
 80029bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029c0:	4b1f      	ldr	r3, [pc, #124]	; (8002a40 <HAL_RCC_OscConfig+0x538>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d030      	beq.n	8002a30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029d8:	429a      	cmp	r2, r3
 80029da:	d129      	bne.n	8002a30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d122      	bne.n	8002a30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029f0:	4013      	ands	r3, r2
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d119      	bne.n	8002a30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a06:	085b      	lsrs	r3, r3, #1
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d10f      	bne.n	8002a30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d107      	bne.n	8002a30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d001      	beq.n	8002a34 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e000      	b.n	8002a36 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3718      	adds	r7, #24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	40023800 	.word	0x40023800

08002a44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e041      	b.n	8002ada <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d106      	bne.n	8002a70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f7fe fd26 	bl	80014bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2202      	movs	r2, #2
 8002a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	3304      	adds	r3, #4
 8002a80:	4619      	mov	r1, r3
 8002a82:	4610      	mov	r0, r2
 8002a84:	f000 f896 	bl	8002bb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
	...

08002ae4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d001      	beq.n	8002afc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e046      	b.n	8002b8a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2202      	movs	r2, #2
 8002b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a23      	ldr	r2, [pc, #140]	; (8002b98 <HAL_TIM_Base_Start+0xb4>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d022      	beq.n	8002b54 <HAL_TIM_Base_Start+0x70>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b16:	d01d      	beq.n	8002b54 <HAL_TIM_Base_Start+0x70>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a1f      	ldr	r2, [pc, #124]	; (8002b9c <HAL_TIM_Base_Start+0xb8>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d018      	beq.n	8002b54 <HAL_TIM_Base_Start+0x70>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a1e      	ldr	r2, [pc, #120]	; (8002ba0 <HAL_TIM_Base_Start+0xbc>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d013      	beq.n	8002b54 <HAL_TIM_Base_Start+0x70>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a1c      	ldr	r2, [pc, #112]	; (8002ba4 <HAL_TIM_Base_Start+0xc0>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d00e      	beq.n	8002b54 <HAL_TIM_Base_Start+0x70>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a1b      	ldr	r2, [pc, #108]	; (8002ba8 <HAL_TIM_Base_Start+0xc4>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d009      	beq.n	8002b54 <HAL_TIM_Base_Start+0x70>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a19      	ldr	r2, [pc, #100]	; (8002bac <HAL_TIM_Base_Start+0xc8>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d004      	beq.n	8002b54 <HAL_TIM_Base_Start+0x70>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a18      	ldr	r2, [pc, #96]	; (8002bb0 <HAL_TIM_Base_Start+0xcc>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d111      	bne.n	8002b78 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 0307 	and.w	r3, r3, #7
 8002b5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2b06      	cmp	r3, #6
 8002b64:	d010      	beq.n	8002b88 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f042 0201 	orr.w	r2, r2, #1
 8002b74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b76:	e007      	b.n	8002b88 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f042 0201 	orr.w	r2, r2, #1
 8002b86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3714      	adds	r7, #20
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	40010000 	.word	0x40010000
 8002b9c:	40000400 	.word	0x40000400
 8002ba0:	40000800 	.word	0x40000800
 8002ba4:	40000c00 	.word	0x40000c00
 8002ba8:	40010400 	.word	0x40010400
 8002bac:	40014000 	.word	0x40014000
 8002bb0:	40001800 	.word	0x40001800

08002bb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a40      	ldr	r2, [pc, #256]	; (8002cc8 <TIM_Base_SetConfig+0x114>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d013      	beq.n	8002bf4 <TIM_Base_SetConfig+0x40>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bd2:	d00f      	beq.n	8002bf4 <TIM_Base_SetConfig+0x40>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a3d      	ldr	r2, [pc, #244]	; (8002ccc <TIM_Base_SetConfig+0x118>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d00b      	beq.n	8002bf4 <TIM_Base_SetConfig+0x40>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a3c      	ldr	r2, [pc, #240]	; (8002cd0 <TIM_Base_SetConfig+0x11c>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d007      	beq.n	8002bf4 <TIM_Base_SetConfig+0x40>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a3b      	ldr	r2, [pc, #236]	; (8002cd4 <TIM_Base_SetConfig+0x120>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d003      	beq.n	8002bf4 <TIM_Base_SetConfig+0x40>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a3a      	ldr	r2, [pc, #232]	; (8002cd8 <TIM_Base_SetConfig+0x124>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d108      	bne.n	8002c06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a2f      	ldr	r2, [pc, #188]	; (8002cc8 <TIM_Base_SetConfig+0x114>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d02b      	beq.n	8002c66 <TIM_Base_SetConfig+0xb2>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c14:	d027      	beq.n	8002c66 <TIM_Base_SetConfig+0xb2>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a2c      	ldr	r2, [pc, #176]	; (8002ccc <TIM_Base_SetConfig+0x118>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d023      	beq.n	8002c66 <TIM_Base_SetConfig+0xb2>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a2b      	ldr	r2, [pc, #172]	; (8002cd0 <TIM_Base_SetConfig+0x11c>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d01f      	beq.n	8002c66 <TIM_Base_SetConfig+0xb2>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a2a      	ldr	r2, [pc, #168]	; (8002cd4 <TIM_Base_SetConfig+0x120>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d01b      	beq.n	8002c66 <TIM_Base_SetConfig+0xb2>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a29      	ldr	r2, [pc, #164]	; (8002cd8 <TIM_Base_SetConfig+0x124>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d017      	beq.n	8002c66 <TIM_Base_SetConfig+0xb2>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a28      	ldr	r2, [pc, #160]	; (8002cdc <TIM_Base_SetConfig+0x128>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d013      	beq.n	8002c66 <TIM_Base_SetConfig+0xb2>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a27      	ldr	r2, [pc, #156]	; (8002ce0 <TIM_Base_SetConfig+0x12c>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d00f      	beq.n	8002c66 <TIM_Base_SetConfig+0xb2>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a26      	ldr	r2, [pc, #152]	; (8002ce4 <TIM_Base_SetConfig+0x130>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d00b      	beq.n	8002c66 <TIM_Base_SetConfig+0xb2>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a25      	ldr	r2, [pc, #148]	; (8002ce8 <TIM_Base_SetConfig+0x134>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d007      	beq.n	8002c66 <TIM_Base_SetConfig+0xb2>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a24      	ldr	r2, [pc, #144]	; (8002cec <TIM_Base_SetConfig+0x138>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d003      	beq.n	8002c66 <TIM_Base_SetConfig+0xb2>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a23      	ldr	r2, [pc, #140]	; (8002cf0 <TIM_Base_SetConfig+0x13c>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d108      	bne.n	8002c78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a0a      	ldr	r2, [pc, #40]	; (8002cc8 <TIM_Base_SetConfig+0x114>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d003      	beq.n	8002cac <TIM_Base_SetConfig+0xf8>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a0c      	ldr	r2, [pc, #48]	; (8002cd8 <TIM_Base_SetConfig+0x124>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d103      	bne.n	8002cb4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	691a      	ldr	r2, [r3, #16]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	615a      	str	r2, [r3, #20]
}
 8002cba:	bf00      	nop
 8002cbc:	3714      	adds	r7, #20
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	40010000 	.word	0x40010000
 8002ccc:	40000400 	.word	0x40000400
 8002cd0:	40000800 	.word	0x40000800
 8002cd4:	40000c00 	.word	0x40000c00
 8002cd8:	40010400 	.word	0x40010400
 8002cdc:	40014000 	.word	0x40014000
 8002ce0:	40014400 	.word	0x40014400
 8002ce4:	40014800 	.word	0x40014800
 8002ce8:	40001800 	.word	0x40001800
 8002cec:	40001c00 	.word	0x40001c00
 8002cf0:	40002000 	.word	0x40002000

08002cf4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e03f      	b.n	8002d86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d106      	bne.n	8002d20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f7fe fbf0 	bl	8001500 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2224      	movs	r2, #36	; 0x24
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68da      	ldr	r2, [r3, #12]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 f929 	bl	8002f90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	691a      	ldr	r2, [r3, #16]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	695a      	ldr	r2, [r3, #20]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68da      	ldr	r2, [r3, #12]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2220      	movs	r2, #32
 8002d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3708      	adds	r7, #8
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b08a      	sub	sp, #40	; 0x28
 8002d92:	af02      	add	r7, sp, #8
 8002d94:	60f8      	str	r0, [r7, #12]
 8002d96:	60b9      	str	r1, [r7, #8]
 8002d98:	603b      	str	r3, [r7, #0]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b20      	cmp	r3, #32
 8002dac:	d17c      	bne.n	8002ea8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d002      	beq.n	8002dba <HAL_UART_Transmit+0x2c>
 8002db4:	88fb      	ldrh	r3, [r7, #6]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e075      	b.n	8002eaa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d101      	bne.n	8002dcc <HAL_UART_Transmit+0x3e>
 8002dc8:	2302      	movs	r3, #2
 8002dca:	e06e      	b.n	8002eaa <HAL_UART_Transmit+0x11c>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2221      	movs	r2, #33	; 0x21
 8002dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002de2:	f7fe fd67 	bl	80018b4 <HAL_GetTick>
 8002de6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	88fa      	ldrh	r2, [r7, #6]
 8002dec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	88fa      	ldrh	r2, [r7, #6]
 8002df2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dfc:	d108      	bne.n	8002e10 <HAL_UART_Transmit+0x82>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d104      	bne.n	8002e10 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002e06:	2300      	movs	r3, #0
 8002e08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	61bb      	str	r3, [r7, #24]
 8002e0e:	e003      	b.n	8002e18 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e14:	2300      	movs	r3, #0
 8002e16:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002e20:	e02a      	b.n	8002e78 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	9300      	str	r3, [sp, #0]
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	2180      	movs	r1, #128	; 0x80
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f000 f840 	bl	8002eb2 <UART_WaitOnFlagUntilTimeout>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e036      	b.n	8002eaa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10b      	bne.n	8002e5a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	881b      	ldrh	r3, [r3, #0]
 8002e46:	461a      	mov	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	3302      	adds	r3, #2
 8002e56:	61bb      	str	r3, [r7, #24]
 8002e58:	e007      	b.n	8002e6a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	781a      	ldrb	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	3301      	adds	r3, #1
 8002e68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	3b01      	subs	r3, #1
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1cf      	bne.n	8002e22 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	9300      	str	r3, [sp, #0]
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	2140      	movs	r1, #64	; 0x40
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f000 f810 	bl	8002eb2 <UART_WaitOnFlagUntilTimeout>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e006      	b.n	8002eaa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	e000      	b.n	8002eaa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002ea8:	2302      	movs	r3, #2
  }
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3720      	adds	r7, #32
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b090      	sub	sp, #64	; 0x40
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	60f8      	str	r0, [r7, #12]
 8002eba:	60b9      	str	r1, [r7, #8]
 8002ebc:	603b      	str	r3, [r7, #0]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ec2:	e050      	b.n	8002f66 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ec4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eca:	d04c      	beq.n	8002f66 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ecc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d007      	beq.n	8002ee2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ed2:	f7fe fcef 	bl	80018b4 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d241      	bcs.n	8002f66 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	330c      	adds	r3, #12
 8002ee8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eec:	e853 3f00 	ldrex	r3, [r3]
 8002ef0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	330c      	adds	r3, #12
 8002f00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f02:	637a      	str	r2, [r7, #52]	; 0x34
 8002f04:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f0a:	e841 2300 	strex	r3, r2, [r1]
 8002f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1e5      	bne.n	8002ee2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	3314      	adds	r3, #20
 8002f1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	e853 3f00 	ldrex	r3, [r3]
 8002f24:	613b      	str	r3, [r7, #16]
   return(result);
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	f023 0301 	bic.w	r3, r3, #1
 8002f2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	3314      	adds	r3, #20
 8002f34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f36:	623a      	str	r2, [r7, #32]
 8002f38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f3a:	69f9      	ldr	r1, [r7, #28]
 8002f3c:	6a3a      	ldr	r2, [r7, #32]
 8002f3e:	e841 2300 	strex	r3, r2, [r1]
 8002f42:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1e5      	bne.n	8002f16 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2220      	movs	r2, #32
 8002f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2220      	movs	r2, #32
 8002f56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e00f      	b.n	8002f86 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	68ba      	ldr	r2, [r7, #8]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	bf0c      	ite	eq
 8002f76:	2301      	moveq	r3, #1
 8002f78:	2300      	movne	r3, #0
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	79fb      	ldrb	r3, [r7, #7]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d09f      	beq.n	8002ec4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3740      	adds	r7, #64	; 0x40
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
	...

08002f90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f94:	b0c0      	sub	sp, #256	; 0x100
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fac:	68d9      	ldr	r1, [r3, #12]
 8002fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	ea40 0301 	orr.w	r3, r0, r1
 8002fb8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fd4:	69db      	ldr	r3, [r3, #28]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002fe8:	f021 010c 	bic.w	r1, r1, #12
 8002fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002ff6:	430b      	orrs	r3, r1
 8002ff8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800300a:	6999      	ldr	r1, [r3, #24]
 800300c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	ea40 0301 	orr.w	r3, r0, r1
 8003016:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	4b8f      	ldr	r3, [pc, #572]	; (800325c <UART_SetConfig+0x2cc>)
 8003020:	429a      	cmp	r2, r3
 8003022:	d005      	beq.n	8003030 <UART_SetConfig+0xa0>
 8003024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	4b8d      	ldr	r3, [pc, #564]	; (8003260 <UART_SetConfig+0x2d0>)
 800302c:	429a      	cmp	r2, r3
 800302e:	d104      	bne.n	800303a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003030:	f7ff f826 	bl	8002080 <HAL_RCC_GetPCLK2Freq>
 8003034:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003038:	e003      	b.n	8003042 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800303a:	f7ff f80d 	bl	8002058 <HAL_RCC_GetPCLK1Freq>
 800303e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003046:	69db      	ldr	r3, [r3, #28]
 8003048:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800304c:	f040 810c 	bne.w	8003268 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003050:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003054:	2200      	movs	r2, #0
 8003056:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800305a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800305e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003062:	4622      	mov	r2, r4
 8003064:	462b      	mov	r3, r5
 8003066:	1891      	adds	r1, r2, r2
 8003068:	65b9      	str	r1, [r7, #88]	; 0x58
 800306a:	415b      	adcs	r3, r3
 800306c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800306e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003072:	4621      	mov	r1, r4
 8003074:	eb12 0801 	adds.w	r8, r2, r1
 8003078:	4629      	mov	r1, r5
 800307a:	eb43 0901 	adc.w	r9, r3, r1
 800307e:	f04f 0200 	mov.w	r2, #0
 8003082:	f04f 0300 	mov.w	r3, #0
 8003086:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800308a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800308e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003092:	4690      	mov	r8, r2
 8003094:	4699      	mov	r9, r3
 8003096:	4623      	mov	r3, r4
 8003098:	eb18 0303 	adds.w	r3, r8, r3
 800309c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80030a0:	462b      	mov	r3, r5
 80030a2:	eb49 0303 	adc.w	r3, r9, r3
 80030a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80030aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80030b6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80030ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80030be:	460b      	mov	r3, r1
 80030c0:	18db      	adds	r3, r3, r3
 80030c2:	653b      	str	r3, [r7, #80]	; 0x50
 80030c4:	4613      	mov	r3, r2
 80030c6:	eb42 0303 	adc.w	r3, r2, r3
 80030ca:	657b      	str	r3, [r7, #84]	; 0x54
 80030cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80030d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80030d4:	f7fd fd88 	bl	8000be8 <__aeabi_uldivmod>
 80030d8:	4602      	mov	r2, r0
 80030da:	460b      	mov	r3, r1
 80030dc:	4b61      	ldr	r3, [pc, #388]	; (8003264 <UART_SetConfig+0x2d4>)
 80030de:	fba3 2302 	umull	r2, r3, r3, r2
 80030e2:	095b      	lsrs	r3, r3, #5
 80030e4:	011c      	lsls	r4, r3, #4
 80030e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030ea:	2200      	movs	r2, #0
 80030ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80030f0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80030f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80030f8:	4642      	mov	r2, r8
 80030fa:	464b      	mov	r3, r9
 80030fc:	1891      	adds	r1, r2, r2
 80030fe:	64b9      	str	r1, [r7, #72]	; 0x48
 8003100:	415b      	adcs	r3, r3
 8003102:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003104:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003108:	4641      	mov	r1, r8
 800310a:	eb12 0a01 	adds.w	sl, r2, r1
 800310e:	4649      	mov	r1, r9
 8003110:	eb43 0b01 	adc.w	fp, r3, r1
 8003114:	f04f 0200 	mov.w	r2, #0
 8003118:	f04f 0300 	mov.w	r3, #0
 800311c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003120:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003124:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003128:	4692      	mov	sl, r2
 800312a:	469b      	mov	fp, r3
 800312c:	4643      	mov	r3, r8
 800312e:	eb1a 0303 	adds.w	r3, sl, r3
 8003132:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003136:	464b      	mov	r3, r9
 8003138:	eb4b 0303 	adc.w	r3, fp, r3
 800313c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800314c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003150:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003154:	460b      	mov	r3, r1
 8003156:	18db      	adds	r3, r3, r3
 8003158:	643b      	str	r3, [r7, #64]	; 0x40
 800315a:	4613      	mov	r3, r2
 800315c:	eb42 0303 	adc.w	r3, r2, r3
 8003160:	647b      	str	r3, [r7, #68]	; 0x44
 8003162:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003166:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800316a:	f7fd fd3d 	bl	8000be8 <__aeabi_uldivmod>
 800316e:	4602      	mov	r2, r0
 8003170:	460b      	mov	r3, r1
 8003172:	4611      	mov	r1, r2
 8003174:	4b3b      	ldr	r3, [pc, #236]	; (8003264 <UART_SetConfig+0x2d4>)
 8003176:	fba3 2301 	umull	r2, r3, r3, r1
 800317a:	095b      	lsrs	r3, r3, #5
 800317c:	2264      	movs	r2, #100	; 0x64
 800317e:	fb02 f303 	mul.w	r3, r2, r3
 8003182:	1acb      	subs	r3, r1, r3
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800318a:	4b36      	ldr	r3, [pc, #216]	; (8003264 <UART_SetConfig+0x2d4>)
 800318c:	fba3 2302 	umull	r2, r3, r3, r2
 8003190:	095b      	lsrs	r3, r3, #5
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003198:	441c      	add	r4, r3
 800319a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800319e:	2200      	movs	r2, #0
 80031a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80031a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80031a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80031ac:	4642      	mov	r2, r8
 80031ae:	464b      	mov	r3, r9
 80031b0:	1891      	adds	r1, r2, r2
 80031b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80031b4:	415b      	adcs	r3, r3
 80031b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80031bc:	4641      	mov	r1, r8
 80031be:	1851      	adds	r1, r2, r1
 80031c0:	6339      	str	r1, [r7, #48]	; 0x30
 80031c2:	4649      	mov	r1, r9
 80031c4:	414b      	adcs	r3, r1
 80031c6:	637b      	str	r3, [r7, #52]	; 0x34
 80031c8:	f04f 0200 	mov.w	r2, #0
 80031cc:	f04f 0300 	mov.w	r3, #0
 80031d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80031d4:	4659      	mov	r1, fp
 80031d6:	00cb      	lsls	r3, r1, #3
 80031d8:	4651      	mov	r1, sl
 80031da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031de:	4651      	mov	r1, sl
 80031e0:	00ca      	lsls	r2, r1, #3
 80031e2:	4610      	mov	r0, r2
 80031e4:	4619      	mov	r1, r3
 80031e6:	4603      	mov	r3, r0
 80031e8:	4642      	mov	r2, r8
 80031ea:	189b      	adds	r3, r3, r2
 80031ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80031f0:	464b      	mov	r3, r9
 80031f2:	460a      	mov	r2, r1
 80031f4:	eb42 0303 	adc.w	r3, r2, r3
 80031f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003208:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800320c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003210:	460b      	mov	r3, r1
 8003212:	18db      	adds	r3, r3, r3
 8003214:	62bb      	str	r3, [r7, #40]	; 0x28
 8003216:	4613      	mov	r3, r2
 8003218:	eb42 0303 	adc.w	r3, r2, r3
 800321c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800321e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003222:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003226:	f7fd fcdf 	bl	8000be8 <__aeabi_uldivmod>
 800322a:	4602      	mov	r2, r0
 800322c:	460b      	mov	r3, r1
 800322e:	4b0d      	ldr	r3, [pc, #52]	; (8003264 <UART_SetConfig+0x2d4>)
 8003230:	fba3 1302 	umull	r1, r3, r3, r2
 8003234:	095b      	lsrs	r3, r3, #5
 8003236:	2164      	movs	r1, #100	; 0x64
 8003238:	fb01 f303 	mul.w	r3, r1, r3
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	3332      	adds	r3, #50	; 0x32
 8003242:	4a08      	ldr	r2, [pc, #32]	; (8003264 <UART_SetConfig+0x2d4>)
 8003244:	fba2 2303 	umull	r2, r3, r2, r3
 8003248:	095b      	lsrs	r3, r3, #5
 800324a:	f003 0207 	and.w	r2, r3, #7
 800324e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4422      	add	r2, r4
 8003256:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003258:	e105      	b.n	8003466 <UART_SetConfig+0x4d6>
 800325a:	bf00      	nop
 800325c:	40011000 	.word	0x40011000
 8003260:	40011400 	.word	0x40011400
 8003264:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003268:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800326c:	2200      	movs	r2, #0
 800326e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003272:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003276:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800327a:	4642      	mov	r2, r8
 800327c:	464b      	mov	r3, r9
 800327e:	1891      	adds	r1, r2, r2
 8003280:	6239      	str	r1, [r7, #32]
 8003282:	415b      	adcs	r3, r3
 8003284:	627b      	str	r3, [r7, #36]	; 0x24
 8003286:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800328a:	4641      	mov	r1, r8
 800328c:	1854      	adds	r4, r2, r1
 800328e:	4649      	mov	r1, r9
 8003290:	eb43 0501 	adc.w	r5, r3, r1
 8003294:	f04f 0200 	mov.w	r2, #0
 8003298:	f04f 0300 	mov.w	r3, #0
 800329c:	00eb      	lsls	r3, r5, #3
 800329e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032a2:	00e2      	lsls	r2, r4, #3
 80032a4:	4614      	mov	r4, r2
 80032a6:	461d      	mov	r5, r3
 80032a8:	4643      	mov	r3, r8
 80032aa:	18e3      	adds	r3, r4, r3
 80032ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80032b0:	464b      	mov	r3, r9
 80032b2:	eb45 0303 	adc.w	r3, r5, r3
 80032b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80032ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80032c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80032ca:	f04f 0200 	mov.w	r2, #0
 80032ce:	f04f 0300 	mov.w	r3, #0
 80032d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80032d6:	4629      	mov	r1, r5
 80032d8:	008b      	lsls	r3, r1, #2
 80032da:	4621      	mov	r1, r4
 80032dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032e0:	4621      	mov	r1, r4
 80032e2:	008a      	lsls	r2, r1, #2
 80032e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80032e8:	f7fd fc7e 	bl	8000be8 <__aeabi_uldivmod>
 80032ec:	4602      	mov	r2, r0
 80032ee:	460b      	mov	r3, r1
 80032f0:	4b60      	ldr	r3, [pc, #384]	; (8003474 <UART_SetConfig+0x4e4>)
 80032f2:	fba3 2302 	umull	r2, r3, r3, r2
 80032f6:	095b      	lsrs	r3, r3, #5
 80032f8:	011c      	lsls	r4, r3, #4
 80032fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032fe:	2200      	movs	r2, #0
 8003300:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003304:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003308:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800330c:	4642      	mov	r2, r8
 800330e:	464b      	mov	r3, r9
 8003310:	1891      	adds	r1, r2, r2
 8003312:	61b9      	str	r1, [r7, #24]
 8003314:	415b      	adcs	r3, r3
 8003316:	61fb      	str	r3, [r7, #28]
 8003318:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800331c:	4641      	mov	r1, r8
 800331e:	1851      	adds	r1, r2, r1
 8003320:	6139      	str	r1, [r7, #16]
 8003322:	4649      	mov	r1, r9
 8003324:	414b      	adcs	r3, r1
 8003326:	617b      	str	r3, [r7, #20]
 8003328:	f04f 0200 	mov.w	r2, #0
 800332c:	f04f 0300 	mov.w	r3, #0
 8003330:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003334:	4659      	mov	r1, fp
 8003336:	00cb      	lsls	r3, r1, #3
 8003338:	4651      	mov	r1, sl
 800333a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800333e:	4651      	mov	r1, sl
 8003340:	00ca      	lsls	r2, r1, #3
 8003342:	4610      	mov	r0, r2
 8003344:	4619      	mov	r1, r3
 8003346:	4603      	mov	r3, r0
 8003348:	4642      	mov	r2, r8
 800334a:	189b      	adds	r3, r3, r2
 800334c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003350:	464b      	mov	r3, r9
 8003352:	460a      	mov	r2, r1
 8003354:	eb42 0303 	adc.w	r3, r2, r3
 8003358:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800335c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	67bb      	str	r3, [r7, #120]	; 0x78
 8003366:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003368:	f04f 0200 	mov.w	r2, #0
 800336c:	f04f 0300 	mov.w	r3, #0
 8003370:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003374:	4649      	mov	r1, r9
 8003376:	008b      	lsls	r3, r1, #2
 8003378:	4641      	mov	r1, r8
 800337a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800337e:	4641      	mov	r1, r8
 8003380:	008a      	lsls	r2, r1, #2
 8003382:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003386:	f7fd fc2f 	bl	8000be8 <__aeabi_uldivmod>
 800338a:	4602      	mov	r2, r0
 800338c:	460b      	mov	r3, r1
 800338e:	4b39      	ldr	r3, [pc, #228]	; (8003474 <UART_SetConfig+0x4e4>)
 8003390:	fba3 1302 	umull	r1, r3, r3, r2
 8003394:	095b      	lsrs	r3, r3, #5
 8003396:	2164      	movs	r1, #100	; 0x64
 8003398:	fb01 f303 	mul.w	r3, r1, r3
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	011b      	lsls	r3, r3, #4
 80033a0:	3332      	adds	r3, #50	; 0x32
 80033a2:	4a34      	ldr	r2, [pc, #208]	; (8003474 <UART_SetConfig+0x4e4>)
 80033a4:	fba2 2303 	umull	r2, r3, r2, r3
 80033a8:	095b      	lsrs	r3, r3, #5
 80033aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033ae:	441c      	add	r4, r3
 80033b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033b4:	2200      	movs	r2, #0
 80033b6:	673b      	str	r3, [r7, #112]	; 0x70
 80033b8:	677a      	str	r2, [r7, #116]	; 0x74
 80033ba:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80033be:	4642      	mov	r2, r8
 80033c0:	464b      	mov	r3, r9
 80033c2:	1891      	adds	r1, r2, r2
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	415b      	adcs	r3, r3
 80033c8:	60fb      	str	r3, [r7, #12]
 80033ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033ce:	4641      	mov	r1, r8
 80033d0:	1851      	adds	r1, r2, r1
 80033d2:	6039      	str	r1, [r7, #0]
 80033d4:	4649      	mov	r1, r9
 80033d6:	414b      	adcs	r3, r1
 80033d8:	607b      	str	r3, [r7, #4]
 80033da:	f04f 0200 	mov.w	r2, #0
 80033de:	f04f 0300 	mov.w	r3, #0
 80033e2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80033e6:	4659      	mov	r1, fp
 80033e8:	00cb      	lsls	r3, r1, #3
 80033ea:	4651      	mov	r1, sl
 80033ec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033f0:	4651      	mov	r1, sl
 80033f2:	00ca      	lsls	r2, r1, #3
 80033f4:	4610      	mov	r0, r2
 80033f6:	4619      	mov	r1, r3
 80033f8:	4603      	mov	r3, r0
 80033fa:	4642      	mov	r2, r8
 80033fc:	189b      	adds	r3, r3, r2
 80033fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8003400:	464b      	mov	r3, r9
 8003402:	460a      	mov	r2, r1
 8003404:	eb42 0303 	adc.w	r3, r2, r3
 8003408:	66fb      	str	r3, [r7, #108]	; 0x6c
 800340a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	663b      	str	r3, [r7, #96]	; 0x60
 8003414:	667a      	str	r2, [r7, #100]	; 0x64
 8003416:	f04f 0200 	mov.w	r2, #0
 800341a:	f04f 0300 	mov.w	r3, #0
 800341e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003422:	4649      	mov	r1, r9
 8003424:	008b      	lsls	r3, r1, #2
 8003426:	4641      	mov	r1, r8
 8003428:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800342c:	4641      	mov	r1, r8
 800342e:	008a      	lsls	r2, r1, #2
 8003430:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003434:	f7fd fbd8 	bl	8000be8 <__aeabi_uldivmod>
 8003438:	4602      	mov	r2, r0
 800343a:	460b      	mov	r3, r1
 800343c:	4b0d      	ldr	r3, [pc, #52]	; (8003474 <UART_SetConfig+0x4e4>)
 800343e:	fba3 1302 	umull	r1, r3, r3, r2
 8003442:	095b      	lsrs	r3, r3, #5
 8003444:	2164      	movs	r1, #100	; 0x64
 8003446:	fb01 f303 	mul.w	r3, r1, r3
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	011b      	lsls	r3, r3, #4
 800344e:	3332      	adds	r3, #50	; 0x32
 8003450:	4a08      	ldr	r2, [pc, #32]	; (8003474 <UART_SetConfig+0x4e4>)
 8003452:	fba2 2303 	umull	r2, r3, r2, r3
 8003456:	095b      	lsrs	r3, r3, #5
 8003458:	f003 020f 	and.w	r2, r3, #15
 800345c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4422      	add	r2, r4
 8003464:	609a      	str	r2, [r3, #8]
}
 8003466:	bf00      	nop
 8003468:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800346c:	46bd      	mov	sp, r7
 800346e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003472:	bf00      	nop
 8003474:	51eb851f 	.word	0x51eb851f

08003478 <sine_model_configure_activations>:


AI_DECLARE_STATIC
ai_bool sine_model_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	3303      	adds	r3, #3
 8003488:	f023 0303 	bic.w	r3, r3, #3
 800348c:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    serving_default_dense_input0_output_array.data = AI_PTR(NULL);
 800348e:	4b16      	ldr	r3, [pc, #88]	; (80034e8 <sine_model_configure_activations+0x70>)
 8003490:	2200      	movs	r2, #0
 8003492:	609a      	str	r2, [r3, #8]
    serving_default_dense_input0_output_array.data_start = AI_PTR(NULL);
 8003494:	4b14      	ldr	r3, [pc, #80]	; (80034e8 <sine_model_configure_activations+0x70>)
 8003496:	2200      	movs	r2, #0
 8003498:	60da      	str	r2, [r3, #12]
    dense_0_output_array.data = AI_PTR(activations + 0);
 800349a:	4a14      	ldr	r2, [pc, #80]	; (80034ec <sine_model_configure_activations+0x74>)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6093      	str	r3, [r2, #8]
    dense_0_output_array.data_start = AI_PTR(activations + 0);
 80034a0:	4a12      	ldr	r2, [pc, #72]	; (80034ec <sine_model_configure_activations+0x74>)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	60d3      	str	r3, [r2, #12]
    nl_0_output_array.data = AI_PTR(activations + 0);
 80034a6:	4a12      	ldr	r2, [pc, #72]	; (80034f0 <sine_model_configure_activations+0x78>)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6093      	str	r3, [r2, #8]
    nl_0_output_array.data_start = AI_PTR(activations + 0);
 80034ac:	4a10      	ldr	r2, [pc, #64]	; (80034f0 <sine_model_configure_activations+0x78>)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(activations + 64);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	3340      	adds	r3, #64	; 0x40
 80034b6:	4a0f      	ldr	r2, [pc, #60]	; (80034f4 <sine_model_configure_activations+0x7c>)
 80034b8:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(activations + 64);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	3340      	adds	r3, #64	; 0x40
 80034be:	4a0d      	ldr	r2, [pc, #52]	; (80034f4 <sine_model_configure_activations+0x7c>)
 80034c0:	60d3      	str	r3, [r2, #12]
    nl_1_output_array.data = AI_PTR(activations + 0);
 80034c2:	4a0d      	ldr	r2, [pc, #52]	; (80034f8 <sine_model_configure_activations+0x80>)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6093      	str	r3, [r2, #8]
    nl_1_output_array.data_start = AI_PTR(activations + 0);
 80034c8:	4a0b      	ldr	r2, [pc, #44]	; (80034f8 <sine_model_configure_activations+0x80>)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	60d3      	str	r3, [r2, #12]
    dense_2_output_array.data = AI_PTR(NULL);
 80034ce:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <sine_model_configure_activations+0x84>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	609a      	str	r2, [r3, #8]
    dense_2_output_array.data_start = AI_PTR(NULL);
 80034d4:	4b09      	ldr	r3, [pc, #36]	; (80034fc <sine_model_configure_activations+0x84>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 80034da:	2301      	movs	r3, #1
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3714      	adds	r7, #20
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr
 80034e8:	200000cc 	.word	0x200000cc
 80034ec:	200000dc 	.word	0x200000dc
 80034f0:	200000ec 	.word	0x200000ec
 80034f4:	200000fc 	.word	0x200000fc
 80034f8:	2000010c 	.word	0x2000010c
 80034fc:	2000011c 	.word	0x2000011c

08003500 <sine_model_configure_weights>:


AI_DECLARE_STATIC
ai_bool sine_model_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8003510:	4b2f      	ldr	r3, [pc, #188]	; (80035d0 <sine_model_configure_weights+0xd0>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003518:	4a2d      	ldr	r2, [pc, #180]	; (80035d0 <sine_model_configure_weights+0xd0>)
 800351a:	6013      	str	r3, [r2, #0]
    dense_2_bias_array.data = AI_PTR(weights + 1280);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003522:	4a2b      	ldr	r2, [pc, #172]	; (80035d0 <sine_model_configure_weights+0xd0>)
 8003524:	6093      	str	r3, [r2, #8]
    dense_2_bias_array.data_start = AI_PTR(weights + 1280);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800352c:	4a28      	ldr	r2, [pc, #160]	; (80035d0 <sine_model_configure_weights+0xd0>)
 800352e:	60d3      	str	r3, [r2, #12]
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8003530:	4b28      	ldr	r3, [pc, #160]	; (80035d4 <sine_model_configure_weights+0xd4>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003538:	4a26      	ldr	r2, [pc, #152]	; (80035d4 <sine_model_configure_weights+0xd4>)
 800353a:	6013      	str	r3, [r2, #0]
    dense_2_weights_array.data = AI_PTR(weights + 1216);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8003542:	4a24      	ldr	r2, [pc, #144]	; (80035d4 <sine_model_configure_weights+0xd4>)
 8003544:	6093      	str	r3, [r2, #8]
    dense_2_weights_array.data_start = AI_PTR(weights + 1216);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 800354c:	4a21      	ldr	r2, [pc, #132]	; (80035d4 <sine_model_configure_weights+0xd4>)
 800354e:	60d3      	str	r3, [r2, #12]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8003550:	4b21      	ldr	r3, [pc, #132]	; (80035d8 <sine_model_configure_weights+0xd8>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003558:	4a1f      	ldr	r2, [pc, #124]	; (80035d8 <sine_model_configure_weights+0xd8>)
 800355a:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights + 1152);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8003562:	4a1d      	ldr	r2, [pc, #116]	; (80035d8 <sine_model_configure_weights+0xd8>)
 8003564:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights + 1152);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800356c:	4a1a      	ldr	r2, [pc, #104]	; (80035d8 <sine_model_configure_weights+0xd8>)
 800356e:	60d3      	str	r3, [r2, #12]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8003570:	4b1a      	ldr	r3, [pc, #104]	; (80035dc <sine_model_configure_weights+0xdc>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003578:	4a18      	ldr	r2, [pc, #96]	; (80035dc <sine_model_configure_weights+0xdc>)
 800357a:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights + 128);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	3380      	adds	r3, #128	; 0x80
 8003580:	4a16      	ldr	r2, [pc, #88]	; (80035dc <sine_model_configure_weights+0xdc>)
 8003582:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights + 128);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	3380      	adds	r3, #128	; 0x80
 8003588:	4a14      	ldr	r2, [pc, #80]	; (80035dc <sine_model_configure_weights+0xdc>)
 800358a:	60d3      	str	r3, [r2, #12]
    dense_0_bias_array.format |= AI_FMT_FLAG_CONST;
 800358c:	4b14      	ldr	r3, [pc, #80]	; (80035e0 <sine_model_configure_weights+0xe0>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003594:	4a12      	ldr	r2, [pc, #72]	; (80035e0 <sine_model_configure_weights+0xe0>)
 8003596:	6013      	str	r3, [r2, #0]
    dense_0_bias_array.data = AI_PTR(weights + 64);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	3340      	adds	r3, #64	; 0x40
 800359c:	4a10      	ldr	r2, [pc, #64]	; (80035e0 <sine_model_configure_weights+0xe0>)
 800359e:	6093      	str	r3, [r2, #8]
    dense_0_bias_array.data_start = AI_PTR(weights + 64);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	3340      	adds	r3, #64	; 0x40
 80035a4:	4a0e      	ldr	r2, [pc, #56]	; (80035e0 <sine_model_configure_weights+0xe0>)
 80035a6:	60d3      	str	r3, [r2, #12]
    dense_0_weights_array.format |= AI_FMT_FLAG_CONST;
 80035a8:	4b0e      	ldr	r3, [pc, #56]	; (80035e4 <sine_model_configure_weights+0xe4>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80035b0:	4a0c      	ldr	r2, [pc, #48]	; (80035e4 <sine_model_configure_weights+0xe4>)
 80035b2:	6013      	str	r3, [r2, #0]
    dense_0_weights_array.data = AI_PTR(weights + 0);
 80035b4:	4a0b      	ldr	r2, [pc, #44]	; (80035e4 <sine_model_configure_weights+0xe4>)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6093      	str	r3, [r2, #8]
    dense_0_weights_array.data_start = AI_PTR(weights + 0);
 80035ba:	4a0a      	ldr	r2, [pc, #40]	; (80035e4 <sine_model_configure_weights+0xe4>)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	60d3      	str	r3, [r2, #12]
  }

  return true;
 80035c0:	2301      	movs	r3, #1
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3714      	adds	r7, #20
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	2000006c 	.word	0x2000006c
 80035d4:	2000007c 	.word	0x2000007c
 80035d8:	2000008c 	.word	0x2000008c
 80035dc:	2000009c 	.word	0x2000009c
 80035e0:	200000ac 	.word	0x200000ac
 80035e4:	200000bc 	.word	0x200000bc

080035e8 <ai_sine_model_create>:
}

AI_API_ENTRY
ai_error ai_sine_model_create(
  ai_handle* network, const ai_buffer* network_config)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af02      	add	r7, sp, #8
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 80035f2:	2300      	movs	r3, #0
 80035f4:	9301      	str	r3, [sp, #4]
 80035f6:	2303      	movs	r3, #3
 80035f8:	9300      	str	r3, [sp, #0]
 80035fa:	2301      	movs	r3, #1
 80035fc:	4a04      	ldr	r2, [pc, #16]	; (8003610 <ai_sine_model_create+0x28>)
 80035fe:	6839      	ldr	r1, [r7, #0]
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 f881 	bl	8003708 <ai_platform_network_create>
 8003606:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8003608:	4618      	mov	r0, r3
 800360a:	3708      	adds	r7, #8
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	2000000c 	.word	0x2000000c

08003614 <ai_sine_model_init>:
}

AI_API_ENTRY
ai_bool ai_sine_model_init(
  ai_handle network, const ai_network_params* params)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800361e:	6839      	ldr	r1, [r7, #0]
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 f8c9 	bl	80037b8 <ai_platform_network_init>
 8003626:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <ai_sine_model_init+0x1e>
 800362e:	2300      	movs	r3, #0
 8003630:	e02b      	b.n	800368a <ai_sine_model_init+0x76>

  ai_bool ok = true;
 8003632:	2301      	movs	r3, #1
 8003634:	72fb      	strb	r3, [r7, #11]
  ok &= sine_model_configure_weights(net_ctx, &params->params);
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	4619      	mov	r1, r3
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f7ff ff60 	bl	8003500 <sine_model_configure_weights>
 8003640:	4603      	mov	r3, r0
 8003642:	461a      	mov	r2, r3
 8003644:	7afb      	ldrb	r3, [r7, #11]
 8003646:	4013      	ands	r3, r2
 8003648:	2b00      	cmp	r3, #0
 800364a:	bf14      	ite	ne
 800364c:	2301      	movne	r3, #1
 800364e:	2300      	moveq	r3, #0
 8003650:	72fb      	strb	r3, [r7, #11]
  ok &= sine_model_configure_activations(net_ctx, &params->activations);
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	3318      	adds	r3, #24
 8003656:	4619      	mov	r1, r3
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f7ff ff0d 	bl	8003478 <sine_model_configure_activations>
 800365e:	4603      	mov	r3, r0
 8003660:	461a      	mov	r2, r3
 8003662:	7afb      	ldrb	r3, [r7, #11]
 8003664:	4013      	ands	r3, r2
 8003666:	2b00      	cmp	r3, #0
 8003668:	bf14      	ite	ne
 800366a:	2301      	movne	r3, #1
 800366c:	2300      	moveq	r3, #0
 800366e:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 f91f 	bl	80038b4 <ai_platform_network_post_init>
 8003676:	4603      	mov	r3, r0
 8003678:	461a      	mov	r2, r3
 800367a:	7afb      	ldrb	r3, [r7, #11]
 800367c:	4013      	ands	r3, r2
 800367e:	2b00      	cmp	r3, #0
 8003680:	bf14      	ite	ne
 8003682:	2301      	movne	r3, #1
 8003684:	2300      	moveq	r3, #0
 8003686:	72fb      	strb	r3, [r7, #11]

  return ok;
 8003688:	7afb      	ldrb	r3, [r7, #11]
}
 800368a:	4618      	mov	r0, r3
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <ai_sine_model_run>:


AI_API_ENTRY
ai_i32 ai_sine_model_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b084      	sub	sp, #16
 8003696:	af00      	add	r7, sp, #0
 8003698:	60f8      	str	r0, [r7, #12]
 800369a:	60b9      	str	r1, [r7, #8]
 800369c:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	68b9      	ldr	r1, [r7, #8]
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f000 f94e 	bl	8003944 <ai_platform_network_process>
 80036a8:	4603      	mov	r3, r0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
	...

080036b4 <ai_sine_model_data_weights_get>:
#include "sine_model_data.h"

ai_handle ai_sine_model_data_weights_get(void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0
    0x33, 0xb2, 0x3e, 0x94, 0x75, 0x08, 0x3e, 0x97, 0x4b,
    0xdb, 0x3f, 0x22, 0x9a, 0xce, 0x3f, 0x0b, 0xb3, 0xdd,
    0xbd, 0xa7, 0xd2, 0xa4, 0x3f, 0x19, 0x1f, 0x5f, 0xbe
  };

  return AI_HANDLE_PTR(s_sine_model_weights);
 80036b8:	4b02      	ldr	r3, [pc, #8]	; (80036c4 <ai_sine_model_data_weights_get+0x10>)

}
 80036ba:	4618      	mov	r0, r3
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr
 80036c4:	080077e0 	.word	0x080077e0

080036c8 <_platform_network_state_setup.isra.1>:
 80036c8:	b430      	push	{r4, r5}
 80036ca:	68dd      	ldr	r5, [r3, #12]
 80036cc:	695c      	ldr	r4, [r3, #20]
 80036ce:	68ed      	ldr	r5, [r5, #12]
 80036d0:	68e4      	ldr	r4, [r4, #12]
 80036d2:	fb04 f405 	mul.w	r4, r4, r5
 80036d6:	6084      	str	r4, [r0, #8]
 80036d8:	8809      	ldrh	r1, [r1, #0]
 80036da:	fb04 f401 	mul.w	r4, r4, r1
 80036de:	60c4      	str	r4, [r0, #12]
 80036e0:	6811      	ldr	r1, [r2, #0]
 80036e2:	6041      	str	r1, [r0, #4]
 80036e4:	6812      	ldr	r2, [r2, #0]
 80036e6:	4414      	add	r4, r2
 80036e8:	6004      	str	r4, [r0, #0]
 80036ea:	699a      	ldr	r2, [r3, #24]
 80036ec:	6814      	ldr	r4, [r2, #0]
 80036ee:	00a4      	lsls	r4, r4, #2
 80036f0:	d407      	bmi.n	8003702 <_platform_network_state_setup.isra.1+0x3a>
 80036f2:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
 80036f6:	1b64      	subs	r4, r4, r5
 80036f8:	4421      	add	r1, r4
 80036fa:	6091      	str	r1, [r2, #8]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	6842      	ldr	r2, [r0, #4]
 8003700:	60da      	str	r2, [r3, #12]
 8003702:	bc30      	pop	{r4, r5}
 8003704:	4770      	bx	lr
	...

08003708 <ai_platform_network_create>:
 8003708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800370c:	4e23      	ldr	r6, [pc, #140]	; (800379c <ai_platform_network_create+0x94>)
 800370e:	4924      	ldr	r1, [pc, #144]	; (80037a0 <ai_platform_network_create+0x98>)
 8003710:	6835      	ldr	r5, [r6, #0]
 8003712:	b082      	sub	sp, #8
 8003714:	f025 0501 	bic.w	r5, r5, #1
 8003718:	f89d 7020 	ldrb.w	r7, [sp, #32]
 800371c:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8003720:	6035      	str	r5, [r6, #0]
 8003722:	2501      	movs	r5, #1
 8003724:	600d      	str	r5, [r1, #0]
 8003726:	680d      	ldr	r5, [r1, #0]
 8003728:	2d00      	cmp	r5, #0
 800372a:	d1fc      	bne.n	8003726 <ai_platform_network_create+0x1e>
 800372c:	491d      	ldr	r1, [pc, #116]	; (80037a4 <ai_platform_network_create+0x9c>)
 800372e:	4e1e      	ldr	r6, [pc, #120]	; (80037a8 <ai_platform_network_create+0xa0>)
 8003730:	600e      	str	r6, [r1, #0]
 8003732:	680e      	ldr	r6, [r1, #0]
 8003734:	491d      	ldr	r1, [pc, #116]	; (80037ac <ai_platform_network_create+0xa4>)
 8003736:	428e      	cmp	r6, r1
 8003738:	d000      	beq.n	800373c <ai_platform_network_create+0x34>
 800373a:	e7fe      	b.n	800373a <ai_platform_network_create+0x32>
 800373c:	b1d0      	cbz	r0, 8003774 <ai_platform_network_create+0x6c>
 800373e:	4698      	mov	r8, r3
 8003740:	4613      	mov	r3, r2
 8003742:	4a1b      	ldr	r2, [pc, #108]	; (80037b0 <ai_platform_network_create+0xa8>)
 8003744:	601a      	str	r2, [r3, #0]
 8003746:	6003      	str	r3, [r0, #0]
 8003748:	4606      	mov	r6, r0
 800374a:	f000 fb05 	bl	8003d58 <core_init>
 800374e:	b1b0      	cbz	r0, 800377e <ai_platform_network_create+0x76>
 8003750:	0223      	lsls	r3, r4, #8
 8003752:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8003756:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 800375a:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 800375e:	d910      	bls.n	8003782 <ai_platform_network_create+0x7a>
 8003760:	2201      	movs	r2, #1
 8003762:	2300      	movs	r3, #0
 8003764:	6033      	str	r3, [r6, #0]
 8003766:	2310      	movs	r3, #16
 8003768:	2000      	movs	r0, #0
 800376a:	f362 0007 	bfi	r0, r2, #0, #8
 800376e:	f363 201f 	bfi	r0, r3, #8, #24
 8003772:	e001      	b.n	8003778 <ai_platform_network_create+0x70>
 8003774:	f241 0010 	movw	r0, #4112	; 0x1010
 8003778:	b002      	add	sp, #8
 800377a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800377e:	2230      	movs	r2, #48	; 0x30
 8003780:	e7ef      	b.n	8003762 <ai_platform_network_create+0x5a>
 8003782:	a802      	add	r0, sp, #8
 8003784:	4b0b      	ldr	r3, [pc, #44]	; (80037b4 <ai_platform_network_create+0xac>)
 8003786:	f840 3d04 	str.w	r3, [r0, #-4]!
 800378a:	f000 ffb3 	bl	80046f4 <ai_check_custom_types>
 800378e:	b110      	cbz	r0, 8003796 <ai_platform_network_create+0x8e>
 8003790:	462b      	mov	r3, r5
 8003792:	462a      	mov	r2, r5
 8003794:	e7e8      	b.n	8003768 <ai_platform_network_create+0x60>
 8003796:	2202      	movs	r2, #2
 8003798:	e7e3      	b.n	8003762 <ai_platform_network_create+0x5a>
 800379a:	bf00      	nop
 800379c:	e0002000 	.word	0xe0002000
 80037a0:	40023008 	.word	0x40023008
 80037a4:	40023000 	.word	0x40023000
 80037a8:	f407a5c2 	.word	0xf407a5c2
 80037ac:	b5e8b5cd 	.word	0xb5e8b5cd
 80037b0:	a1c00100 	.word	0xa1c00100
 80037b4:	84048403 	.word	0x84048403

080037b8 <ai_platform_network_init>:
 80037b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ba:	460c      	mov	r4, r1
 80037bc:	4605      	mov	r5, r0
 80037be:	b120      	cbz	r0, 80037ca <ai_platform_network_init+0x12>
 80037c0:	4b36      	ldr	r3, [pc, #216]	; (800389c <ai_platform_network_init+0xe4>)
 80037c2:	6802      	ldr	r2, [r0, #0]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	bf18      	it	ne
 80037c8:	2500      	movne	r5, #0
 80037ca:	4935      	ldr	r1, [pc, #212]	; (80038a0 <ai_platform_network_init+0xe8>)
 80037cc:	4a35      	ldr	r2, [pc, #212]	; (80038a4 <ai_platform_network_init+0xec>)
 80037ce:	680b      	ldr	r3, [r1, #0]
 80037d0:	2001      	movs	r0, #1
 80037d2:	f023 0301 	bic.w	r3, r3, #1
 80037d6:	600b      	str	r3, [r1, #0]
 80037d8:	4613      	mov	r3, r2
 80037da:	6010      	str	r0, [r2, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	2a00      	cmp	r2, #0
 80037e0:	d1fc      	bne.n	80037dc <ai_platform_network_init+0x24>
 80037e2:	4b31      	ldr	r3, [pc, #196]	; (80038a8 <ai_platform_network_init+0xf0>)
 80037e4:	4a31      	ldr	r2, [pc, #196]	; (80038ac <ai_platform_network_init+0xf4>)
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	4b31      	ldr	r3, [pc, #196]	; (80038b0 <ai_platform_network_init+0xf8>)
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d000      	beq.n	80037f2 <ai_platform_network_init+0x3a>
 80037f0:	e7fe      	b.n	80037f0 <ai_platform_network_init+0x38>
 80037f2:	b33d      	cbz	r5, 8003844 <ai_platform_network_init+0x8c>
 80037f4:	b344      	cbz	r4, 8003848 <ai_platform_network_init+0x90>
 80037f6:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80037f8:	6926      	ldr	r6, [r4, #16]
 80037fa:	2f00      	cmp	r7, #0
 80037fc:	d03d      	beq.n	800387a <ai_platform_network_init+0xc2>
 80037fe:	b35e      	cbz	r6, 8003858 <ai_platform_network_init+0xa0>
 8003800:	4627      	mov	r7, r4
 8003802:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003804:	f105 0618 	add.w	r6, r5, #24
 8003808:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800380a:	e897 0003 	ldmia.w	r7, {r0, r1}
 800380e:	e886 0003 	stmia.w	r6, {r0, r1}
 8003812:	3418      	adds	r4, #24
 8003814:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003816:	f105 0630 	add.w	r6, r5, #48	; 0x30
 800381a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800381c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003820:	e886 0003 	stmia.w	r6, {r0, r1}
 8003824:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8003826:	2303      	movs	r3, #3
 8003828:	60eb      	str	r3, [r5, #12]
 800382a:	b15a      	cbz	r2, 8003844 <ai_platform_network_init+0x8c>
 800382c:	68d3      	ldr	r3, [r2, #12]
 800382e:	6095      	str	r5, [r2, #8]
 8003830:	429a      	cmp	r2, r3
 8003832:	d007      	beq.n	8003844 <ai_platform_network_init+0x8c>
 8003834:	b133      	cbz	r3, 8003844 <ai_platform_network_init+0x8c>
 8003836:	68da      	ldr	r2, [r3, #12]
 8003838:	609d      	str	r5, [r3, #8]
 800383a:	429a      	cmp	r2, r3
 800383c:	d002      	beq.n	8003844 <ai_platform_network_init+0x8c>
 800383e:	4613      	mov	r3, r2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1f8      	bne.n	8003836 <ai_platform_network_init+0x7e>
 8003844:	4628      	mov	r0, r5
 8003846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003848:	f105 0010 	add.w	r0, r5, #16
 800384c:	2211      	movs	r2, #17
 800384e:	2110      	movs	r1, #16
 8003850:	f000 fa84 	bl	8003d5c <core_set_error>
 8003854:	4625      	mov	r5, r4
 8003856:	e7f5      	b.n	8003844 <ai_platform_network_init+0x8c>
 8003858:	8921      	ldrh	r1, [r4, #8]
 800385a:	88e2      	ldrh	r2, [r4, #6]
 800385c:	68e3      	ldr	r3, [r4, #12]
 800385e:	fb02 f201 	mul.w	r2, r2, r1
 8003862:	fb03 f302 	mul.w	r3, r3, r2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0ca      	beq.n	8003800 <ai_platform_network_init+0x48>
 800386a:	f105 0010 	add.w	r0, r5, #16
 800386e:	2212      	movs	r2, #18
 8003870:	2110      	movs	r1, #16
 8003872:	f000 fa73 	bl	8003d5c <core_set_error>
 8003876:	4635      	mov	r5, r6
 8003878:	e7e4      	b.n	8003844 <ai_platform_network_init+0x8c>
 800387a:	8c21      	ldrh	r1, [r4, #32]
 800387c:	8be2      	ldrh	r2, [r4, #30]
 800387e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003880:	fb02 f201 	mul.w	r2, r2, r1
 8003884:	fb03 f302 	mul.w	r3, r3, r2
 8003888:	2b00      	cmp	r3, #0
 800388a:	d0b8      	beq.n	80037fe <ai_platform_network_init+0x46>
 800388c:	f105 0010 	add.w	r0, r5, #16
 8003890:	2213      	movs	r2, #19
 8003892:	2110      	movs	r1, #16
 8003894:	f000 fa62 	bl	8003d5c <core_set_error>
 8003898:	463d      	mov	r5, r7
 800389a:	e7d3      	b.n	8003844 <ai_platform_network_init+0x8c>
 800389c:	a1c00100 	.word	0xa1c00100
 80038a0:	e0002000 	.word	0xe0002000
 80038a4:	40023008 	.word	0x40023008
 80038a8:	40023000 	.word	0x40023000
 80038ac:	f407a5c2 	.word	0xf407a5c2
 80038b0:	b5e8b5cd 	.word	0xb5e8b5cd

080038b4 <ai_platform_network_post_init>:
 80038b4:	b538      	push	{r3, r4, r5, lr}
 80038b6:	4604      	mov	r4, r0
 80038b8:	b120      	cbz	r0, 80038c4 <ai_platform_network_post_init+0x10>
 80038ba:	4b1c      	ldr	r3, [pc, #112]	; (800392c <ai_platform_network_post_init+0x78>)
 80038bc:	6802      	ldr	r2, [r0, #0]
 80038be:	429a      	cmp	r2, r3
 80038c0:	bf18      	it	ne
 80038c2:	2400      	movne	r4, #0
 80038c4:	491a      	ldr	r1, [pc, #104]	; (8003930 <ai_platform_network_post_init+0x7c>)
 80038c6:	4a1b      	ldr	r2, [pc, #108]	; (8003934 <ai_platform_network_post_init+0x80>)
 80038c8:	680b      	ldr	r3, [r1, #0]
 80038ca:	2001      	movs	r0, #1
 80038cc:	f023 0301 	bic.w	r3, r3, #1
 80038d0:	600b      	str	r3, [r1, #0]
 80038d2:	4613      	mov	r3, r2
 80038d4:	6010      	str	r0, [r2, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	2a00      	cmp	r2, #0
 80038da:	d1fc      	bne.n	80038d6 <ai_platform_network_post_init+0x22>
 80038dc:	4b16      	ldr	r3, [pc, #88]	; (8003938 <ai_platform_network_post_init+0x84>)
 80038de:	4a17      	ldr	r2, [pc, #92]	; (800393c <ai_platform_network_post_init+0x88>)
 80038e0:	601a      	str	r2, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	4b16      	ldr	r3, [pc, #88]	; (8003940 <ai_platform_network_post_init+0x8c>)
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d000      	beq.n	80038ec <ai_platform_network_post_init+0x38>
 80038ea:	e7fe      	b.n	80038ea <ai_platform_network_post_init+0x36>
 80038ec:	b1a4      	cbz	r4, 8003918 <ai_platform_network_post_init+0x64>
 80038ee:	68e3      	ldr	r3, [r4, #12]
 80038f0:	f013 0502 	ands.w	r5, r3, #2
 80038f4:	d012      	beq.n	800391c <ai_platform_network_post_init+0x68>
 80038f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80038f8:	b163      	cbz	r3, 8003914 <ai_platform_network_post_init+0x60>
 80038fa:	6d25      	ldr	r5, [r4, #80]	; 0x50
 80038fc:	b91d      	cbnz	r5, 8003906 <ai_platform_network_post_init+0x52>
 80038fe:	e009      	b.n	8003914 <ai_platform_network_post_init+0x60>
 8003900:	461d      	mov	r5, r3
 8003902:	b13b      	cbz	r3, 8003914 <ai_platform_network_post_init+0x60>
 8003904:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003906:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003908:	4629      	mov	r1, r5
 800390a:	2000      	movs	r0, #0
 800390c:	4798      	blx	r3
 800390e:	68eb      	ldr	r3, [r5, #12]
 8003910:	42ab      	cmp	r3, r5
 8003912:	d1f5      	bne.n	8003900 <ai_platform_network_post_init+0x4c>
 8003914:	2001      	movs	r0, #1
 8003916:	bd38      	pop	{r3, r4, r5, pc}
 8003918:	4620      	mov	r0, r4
 800391a:	bd38      	pop	{r3, r4, r5, pc}
 800391c:	f104 0010 	add.w	r0, r4, #16
 8003920:	2210      	movs	r2, #16
 8003922:	2111      	movs	r1, #17
 8003924:	f000 fa1a 	bl	8003d5c <core_set_error>
 8003928:	4628      	mov	r0, r5
 800392a:	bd38      	pop	{r3, r4, r5, pc}
 800392c:	a1c00100 	.word	0xa1c00100
 8003930:	e0002000 	.word	0xe0002000
 8003934:	40023008 	.word	0x40023008
 8003938:	40023000 	.word	0x40023000
 800393c:	f407a5c2 	.word	0xf407a5c2
 8003940:	b5e8b5cd 	.word	0xb5e8b5cd

08003944 <ai_platform_network_process>:
 8003944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003948:	b083      	sub	sp, #12
 800394a:	4604      	mov	r4, r0
 800394c:	9201      	str	r2, [sp, #4]
 800394e:	b120      	cbz	r0, 800395a <ai_platform_network_process+0x16>
 8003950:	4ba5      	ldr	r3, [pc, #660]	; (8003be8 <ai_platform_network_process+0x2a4>)
 8003952:	6802      	ldr	r2, [r0, #0]
 8003954:	429a      	cmp	r2, r3
 8003956:	bf18      	it	ne
 8003958:	2400      	movne	r4, #0
 800395a:	48a4      	ldr	r0, [pc, #656]	; (8003bec <ai_platform_network_process+0x2a8>)
 800395c:	4ba4      	ldr	r3, [pc, #656]	; (8003bf0 <ai_platform_network_process+0x2ac>)
 800395e:	6802      	ldr	r2, [r0, #0]
 8003960:	f022 0201 	bic.w	r2, r2, #1
 8003964:	6002      	str	r2, [r0, #0]
 8003966:	2201      	movs	r2, #1
 8003968:	601a      	str	r2, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	2a00      	cmp	r2, #0
 800396e:	d1fc      	bne.n	800396a <ai_platform_network_process+0x26>
 8003970:	4ba0      	ldr	r3, [pc, #640]	; (8003bf4 <ai_platform_network_process+0x2b0>)
 8003972:	4aa1      	ldr	r2, [pc, #644]	; (8003bf8 <ai_platform_network_process+0x2b4>)
 8003974:	601a      	str	r2, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	4ba0      	ldr	r3, [pc, #640]	; (8003bfc <ai_platform_network_process+0x2b8>)
 800397a:	429a      	cmp	r2, r3
 800397c:	d000      	beq.n	8003980 <ai_platform_network_process+0x3c>
 800397e:	e7fe      	b.n	800397e <ai_platform_network_process+0x3a>
 8003980:	2c00      	cmp	r4, #0
 8003982:	d066      	beq.n	8003a52 <ai_platform_network_process+0x10e>
 8003984:	f8b4 7048 	ldrh.w	r7, [r4, #72]	; 0x48
 8003988:	b107      	cbz	r7, 800398c <ai_platform_network_process+0x48>
 800398a:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 800398c:	68e3      	ldr	r3, [r4, #12]
 800398e:	f003 0303 	and.w	r3, r3, #3
 8003992:	2600      	movs	r6, #0
 8003994:	2b03      	cmp	r3, #3
 8003996:	6166      	str	r6, [r4, #20]
 8003998:	f040 80fe 	bne.w	8003b98 <ai_platform_network_process+0x254>
 800399c:	2900      	cmp	r1, #0
 800399e:	d07f      	beq.n	8003aa0 <ai_platform_network_process+0x15c>
 80039a0:	2f00      	cmp	r7, #0
 80039a2:	d07d      	beq.n	8003aa0 <ai_platform_network_process+0x15c>
 80039a4:	883b      	ldrh	r3, [r7, #0]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d07a      	beq.n	8003aa0 <ai_platform_network_process+0x15c>
 80039aa:	460d      	mov	r5, r1
 80039ac:	46a0      	mov	r8, r4
 80039ae:	f835 9f04 	ldrh.w	r9, [r5, #4]!
 80039b2:	429e      	cmp	r6, r3
 80039b4:	d27d      	bcs.n	8003ab2 <ai_platform_network_process+0x16e>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d07a      	beq.n	8003ab2 <ai_platform_network_process+0x16e>
 80039bc:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 80039c0:	2c00      	cmp	r4, #0
 80039c2:	d076      	beq.n	8003ab2 <ai_platform_network_process+0x16e>
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	eb13 1a06 	adds.w	sl, r3, r6, lsl #4
 80039cc:	d067      	beq.n	8003a9e <ai_platform_network_process+0x15a>
 80039ce:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 80039d2:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 80039d6:	69a0      	ldr	r0, [r4, #24]
 80039d8:	f8d5 c008 	ldr.w	ip, [r5, #8]
 80039dc:	6841      	ldr	r1, [r0, #4]
 80039de:	fb0b f30e 	mul.w	r3, fp, lr
 80039e2:	fb0c f303 	mul.w	r3, ip, r3
 80039e6:	4299      	cmp	r1, r3
 80039e8:	d350      	bcc.n	8003a8c <ai_platform_network_process+0x148>
 80039ea:	68e3      	ldr	r3, [r4, #12]
 80039ec:	68da      	ldr	r2, [r3, #12]
 80039ee:	455a      	cmp	r2, fp
 80039f0:	d14c      	bne.n	8003a8c <ai_platform_network_process+0x148>
 80039f2:	689a      	ldr	r2, [r3, #8]
 80039f4:	4572      	cmp	r2, lr
 80039f6:	d149      	bne.n	8003a8c <ai_platform_network_process+0x148>
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	459c      	cmp	ip, r3
 80039fc:	d146      	bne.n	8003a8c <ai_platform_network_process+0x148>
 80039fe:	6800      	ldr	r0, [r0, #0]
 8003a00:	f000 ff28 	bl	8004854 <ai_array_get_byte_size>
 8003a04:	68e2      	ldr	r2, [r4, #12]
 8003a06:	6963      	ldr	r3, [r4, #20]
 8003a08:	68d2      	ldr	r2, [r2, #12]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	fb03 f302 	mul.w	r3, r3, r2
 8003a10:	4298      	cmp	r0, r3
 8003a12:	d33b      	bcc.n	8003a8c <ai_platform_network_process+0x148>
 8003a14:	69a3      	ldr	r3, [r4, #24]
 8003a16:	6818      	ldr	r0, [r3, #0]
 8003a18:	f000 fed0 	bl	80047bc <ai_array_to_buffer_fmt>
 8003a1c:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8003a20:	4043      	eors	r3, r0
 8003a22:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8003a26:	d128      	bne.n	8003a7a <ai_platform_network_process+0x136>
 8003a28:	68eb      	ldr	r3, [r5, #12]
 8003a2a:	b1f3      	cbz	r3, 8003a6a <ai_platform_network_process+0x126>
 8003a2c:	f8b5 b000 	ldrh.w	fp, [r5]
 8003a30:	f1bb 0f00 	cmp.w	fp, #0
 8003a34:	d012      	beq.n	8003a5c <ai_platform_network_process+0x118>
 8003a36:	4623      	mov	r3, r4
 8003a38:	f105 020c 	add.w	r2, r5, #12
 8003a3c:	4629      	mov	r1, r5
 8003a3e:	4650      	mov	r0, sl
 8003a40:	f7ff fe42 	bl	80036c8 <_platform_network_state_setup.isra.1>
 8003a44:	45d9      	cmp	r9, fp
 8003a46:	883b      	ldrh	r3, [r7, #0]
 8003a48:	bf38      	it	cc
 8003a4a:	46d9      	movcc	r9, fp
 8003a4c:	3601      	adds	r6, #1
 8003a4e:	3518      	adds	r5, #24
 8003a50:	e7af      	b.n	80039b2 <ai_platform_network_process+0x6e>
 8003a52:	46a3      	mov	fp, r4
 8003a54:	4658      	mov	r0, fp
 8003a56:	b003      	add	sp, #12
 8003a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a5c:	f108 0010 	add.w	r0, r8, #16
 8003a60:	2221      	movs	r2, #33	; 0x21
 8003a62:	2112      	movs	r1, #18
 8003a64:	f000 f97a 	bl	8003d5c <core_set_error>
 8003a68:	e7f4      	b.n	8003a54 <ai_platform_network_process+0x110>
 8003a6a:	f108 0010 	add.w	r0, r8, #16
 8003a6e:	2217      	movs	r2, #23
 8003a70:	2112      	movs	r1, #18
 8003a72:	469b      	mov	fp, r3
 8003a74:	f000 f972 	bl	8003d5c <core_set_error>
 8003a78:	e7ec      	b.n	8003a54 <ai_platform_network_process+0x110>
 8003a7a:	f108 0010 	add.w	r0, r8, #16
 8003a7e:	2219      	movs	r2, #25
 8003a80:	2112      	movs	r1, #18
 8003a82:	f000 f96b 	bl	8003d5c <core_set_error>
 8003a86:	f04f 0b00 	mov.w	fp, #0
 8003a8a:	e7e3      	b.n	8003a54 <ai_platform_network_process+0x110>
 8003a8c:	f108 0010 	add.w	r0, r8, #16
 8003a90:	2218      	movs	r2, #24
 8003a92:	2112      	movs	r1, #18
 8003a94:	f000 f962 	bl	8003d5c <core_set_error>
 8003a98:	f04f 0b00 	mov.w	fp, #0
 8003a9c:	e7da      	b.n	8003a54 <ai_platform_network_process+0x110>
 8003a9e:	4644      	mov	r4, r8
 8003aa0:	f104 0010 	add.w	r0, r4, #16
 8003aa4:	2217      	movs	r2, #23
 8003aa6:	2112      	movs	r1, #18
 8003aa8:	f000 f958 	bl	8003d5c <core_set_error>
 8003aac:	f04f 0b00 	mov.w	fp, #0
 8003ab0:	e7d0      	b.n	8003a54 <ai_platform_network_process+0x110>
 8003ab2:	9a01      	ldr	r2, [sp, #4]
 8003ab4:	f8b8 3048 	ldrh.w	r3, [r8, #72]	; 0x48
 8003ab8:	4644      	mov	r4, r8
 8003aba:	2a00      	cmp	r2, #0
 8003abc:	f000 80a4 	beq.w	8003c08 <ai_platform_network_process+0x2c4>
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	f240 8140 	bls.w	8003d46 <ai_platform_network_process+0x402>
 8003ac6:	f8d8 804c 	ldr.w	r8, [r8, #76]	; 0x4c
 8003aca:	f118 0f0c 	cmn.w	r8, #12
 8003ace:	f000 813a 	beq.w	8003d46 <ai_platform_network_process+0x402>
 8003ad2:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f000 8135 	beq.w	8003d46 <ai_platform_network_process+0x402>
 8003adc:	3204      	adds	r2, #4
 8003ade:	4615      	mov	r5, r2
 8003ae0:	2700      	movs	r7, #0
 8003ae2:	429f      	cmp	r7, r3
 8003ae4:	f080 808c 	bcs.w	8003c00 <ai_platform_network_process+0x2bc>
 8003ae8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	f000 8087 	beq.w	8003c00 <ai_platform_network_process+0x2bc>
 8003af2:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 8003af6:	2e00      	cmp	r6, #0
 8003af8:	f000 8082 	beq.w	8003c00 <ai_platform_network_process+0x2bc>
 8003afc:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	eb13 1a07 	adds.w	sl, r3, r7, lsl #4
 8003b06:	d067      	beq.n	8003bd8 <ai_platform_network_process+0x294>
 8003b08:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8003b0c:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 8003b10:	69b0      	ldr	r0, [r6, #24]
 8003b12:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8003b16:	6841      	ldr	r1, [r0, #4]
 8003b18:	fb0b f30e 	mul.w	r3, fp, lr
 8003b1c:	fb0c f303 	mul.w	r3, ip, r3
 8003b20:	4299      	cmp	r1, r3
 8003b22:	f0c0 8110 	bcc.w	8003d46 <ai_platform_network_process+0x402>
 8003b26:	68f3      	ldr	r3, [r6, #12]
 8003b28:	68da      	ldr	r2, [r3, #12]
 8003b2a:	455a      	cmp	r2, fp
 8003b2c:	f040 810b 	bne.w	8003d46 <ai_platform_network_process+0x402>
 8003b30:	689a      	ldr	r2, [r3, #8]
 8003b32:	4572      	cmp	r2, lr
 8003b34:	f040 8107 	bne.w	8003d46 <ai_platform_network_process+0x402>
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	459c      	cmp	ip, r3
 8003b3c:	f040 8103 	bne.w	8003d46 <ai_platform_network_process+0x402>
 8003b40:	6800      	ldr	r0, [r0, #0]
 8003b42:	f000 fe87 	bl	8004854 <ai_array_get_byte_size>
 8003b46:	68f2      	ldr	r2, [r6, #12]
 8003b48:	6973      	ldr	r3, [r6, #20]
 8003b4a:	68d2      	ldr	r2, [r2, #12]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	fb03 f302 	mul.w	r3, r3, r2
 8003b52:	4298      	cmp	r0, r3
 8003b54:	f0c0 80f7 	bcc.w	8003d46 <ai_platform_network_process+0x402>
 8003b58:	69b3      	ldr	r3, [r6, #24]
 8003b5a:	6818      	ldr	r0, [r3, #0]
 8003b5c:	f000 fe2e 	bl	80047bc <ai_array_to_buffer_fmt>
 8003b60:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8003b64:	4043      	eors	r3, r0
 8003b66:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8003b6a:	d12c      	bne.n	8003bc6 <ai_platform_network_process+0x282>
 8003b6c:	68eb      	ldr	r3, [r5, #12]
 8003b6e:	b313      	cbz	r3, 8003bb6 <ai_platform_network_process+0x272>
 8003b70:	f8b5 b000 	ldrh.w	fp, [r5]
 8003b74:	f1bb 0f00 	cmp.w	fp, #0
 8003b78:	d016      	beq.n	8003ba8 <ai_platform_network_process+0x264>
 8003b7a:	4633      	mov	r3, r6
 8003b7c:	f105 020c 	add.w	r2, r5, #12
 8003b80:	4629      	mov	r1, r5
 8003b82:	4650      	mov	r0, sl
 8003b84:	f7ff fda0 	bl	80036c8 <_platform_network_state_setup.isra.1>
 8003b88:	45d9      	cmp	r9, fp
 8003b8a:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8003b8e:	bf38      	it	cc
 8003b90:	46d9      	movcc	r9, fp
 8003b92:	3701      	adds	r7, #1
 8003b94:	3518      	adds	r5, #24
 8003b96:	e7a4      	b.n	8003ae2 <ai_platform_network_process+0x19e>
 8003b98:	f104 0010 	add.w	r0, r4, #16
 8003b9c:	2230      	movs	r2, #48	; 0x30
 8003b9e:	2111      	movs	r1, #17
 8003ba0:	f000 f8dc 	bl	8003d5c <core_set_error>
 8003ba4:	46b3      	mov	fp, r6
 8003ba6:	e755      	b.n	8003a54 <ai_platform_network_process+0x110>
 8003ba8:	f104 0010 	add.w	r0, r4, #16
 8003bac:	2221      	movs	r2, #33	; 0x21
 8003bae:	2113      	movs	r1, #19
 8003bb0:	f000 f8d4 	bl	8003d5c <core_set_error>
 8003bb4:	e74e      	b.n	8003a54 <ai_platform_network_process+0x110>
 8003bb6:	f104 0010 	add.w	r0, r4, #16
 8003bba:	2217      	movs	r2, #23
 8003bbc:	2113      	movs	r1, #19
 8003bbe:	469b      	mov	fp, r3
 8003bc0:	f000 f8cc 	bl	8003d5c <core_set_error>
 8003bc4:	e746      	b.n	8003a54 <ai_platform_network_process+0x110>
 8003bc6:	f104 0010 	add.w	r0, r4, #16
 8003bca:	2219      	movs	r2, #25
 8003bcc:	2113      	movs	r1, #19
 8003bce:	f000 f8c5 	bl	8003d5c <core_set_error>
 8003bd2:	f04f 0b00 	mov.w	fp, #0
 8003bd6:	e73d      	b.n	8003a54 <ai_platform_network_process+0x110>
 8003bd8:	f104 0010 	add.w	r0, r4, #16
 8003bdc:	2217      	movs	r2, #23
 8003bde:	2113      	movs	r1, #19
 8003be0:	f000 f8bc 	bl	8003d5c <core_set_error>
 8003be4:	46d3      	mov	fp, sl
 8003be6:	e735      	b.n	8003a54 <ai_platform_network_process+0x110>
 8003be8:	a1c00100 	.word	0xa1c00100
 8003bec:	e0002000 	.word	0xe0002000
 8003bf0:	40023008 	.word	0x40023008
 8003bf4:	40023000 	.word	0x40023000
 8003bf8:	f407a5c2 	.word	0xf407a5c2
 8003bfc:	b5e8b5cd 	.word	0xb5e8b5cd
 8003c00:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8003c04:	f8a4 9014 	strh.w	r9, [r4, #20]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f000 8099 	beq.w	8003d40 <ai_platform_network_process+0x3fc>
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8003c12:	f240 8093 	bls.w	8003d3c <ai_platform_network_process+0x3f8>
 8003c16:	f105 070c 	add.w	r7, r5, #12
 8003c1a:	8ae0      	ldrh	r0, [r4, #22]
 8003c1c:	8aa3      	ldrh	r3, [r4, #20]
 8003c1e:	4283      	cmp	r3, r0
 8003c20:	d977      	bls.n	8003d12 <ai_platform_network_process+0x3ce>
 8003c22:	46a3      	mov	fp, r4
 8003c24:	2d00      	cmp	r5, #0
 8003c26:	d032      	beq.n	8003c8e <ai_platform_network_process+0x34a>
 8003c28:	882b      	ldrh	r3, [r5, #0]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d02f      	beq.n	8003c8e <ai_platform_network_process+0x34a>
 8003c2e:	686b      	ldr	r3, [r5, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d02c      	beq.n	8003c8e <ai_platform_network_process+0x34a>
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f04f 0800 	mov.w	r8, #0
 8003c3a:	b343      	cbz	r3, 8003c8e <ai_platform_network_process+0x34a>
 8003c3c:	68a9      	ldr	r1, [r5, #8]
 8003c3e:	699a      	ldr	r2, [r3, #24]
 8003c40:	f8d1 a000 	ldr.w	sl, [r1]
 8003c44:	6814      	ldr	r4, [r2, #0]
 8003c46:	6890      	ldr	r0, [r2, #8]
 8003c48:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8003c4c:	eb0a 0609 	add.w	r6, sl, r9
 8003c50:	00a4      	lsls	r4, r4, #2
 8003c52:	6871      	ldr	r1, [r6, #4]
 8003c54:	d45f      	bmi.n	8003d16 <ai_platform_network_process+0x3d2>
 8003c56:	68d4      	ldr	r4, [r2, #12]
 8003c58:	1b00      	subs	r0, r0, r4
 8003c5a:	4401      	add	r1, r0
 8003c5c:	6091      	str	r1, [r2, #8]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	6872      	ldr	r2, [r6, #4]
 8003c62:	60da      	str	r2, [r3, #12]
 8003c64:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8003c68:	f85a 2009 	ldr.w	r2, [sl, r9]
 8003c6c:	440b      	add	r3, r1
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	bf24      	itt	cs
 8003c72:	68f3      	ldrcs	r3, [r6, #12]
 8003c74:	1ad3      	subcs	r3, r2, r3
 8003c76:	6073      	str	r3, [r6, #4]
 8003c78:	882b      	ldrh	r3, [r5, #0]
 8003c7a:	f108 0801 	add.w	r8, r8, #1
 8003c7e:	4598      	cmp	r8, r3
 8003c80:	d205      	bcs.n	8003c8e <ai_platform_network_process+0x34a>
 8003c82:	686b      	ldr	r3, [r5, #4]
 8003c84:	b11b      	cbz	r3, 8003c8e <ai_platform_network_process+0x34a>
 8003c86:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1d6      	bne.n	8003c3c <ai_platform_network_process+0x2f8>
 8003c8e:	4658      	mov	r0, fp
 8003c90:	f000 fd5a 	bl	8004748 <ai_layers_forward_all>
 8003c94:	2f00      	cmp	r7, #0
 8003c96:	d032      	beq.n	8003cfe <ai_platform_network_process+0x3ba>
 8003c98:	883b      	ldrh	r3, [r7, #0]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d02f      	beq.n	8003cfe <ai_platform_network_process+0x3ba>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	b36b      	cbz	r3, 8003cfe <ai_platform_network_process+0x3ba>
 8003ca2:	6818      	ldr	r0, [r3, #0]
 8003ca4:	b358      	cbz	r0, 8003cfe <ai_platform_network_process+0x3ba>
 8003ca6:	f04f 0800 	mov.w	r8, #0
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	6981      	ldr	r1, [r0, #24]
 8003cae:	f8d3 a000 	ldr.w	sl, [r3]
 8003cb2:	680c      	ldr	r4, [r1, #0]
 8003cb4:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8003cb8:	eb0a 0609 	add.w	r6, sl, r9
 8003cbc:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 8003cc0:	00a4      	lsls	r4, r4, #2
 8003cc2:	eb0c 0302 	add.w	r3, ip, r2
 8003cc6:	d42a      	bmi.n	8003d1e <ai_platform_network_process+0x3da>
 8003cc8:	f85a 2009 	ldr.w	r2, [sl, r9]
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	bf24      	itt	cs
 8003cd0:	68f3      	ldrcs	r3, [r6, #12]
 8003cd2:	1ad3      	subcs	r3, r2, r3
 8003cd4:	6073      	str	r3, [r6, #4]
 8003cd6:	6981      	ldr	r1, [r0, #24]
 8003cd8:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 8003cdc:	1b12      	subs	r2, r2, r4
 8003cde:	4413      	add	r3, r2
 8003ce0:	608b      	str	r3, [r1, #8]
 8003ce2:	6983      	ldr	r3, [r0, #24]
 8003ce4:	6872      	ldr	r2, [r6, #4]
 8003ce6:	60da      	str	r2, [r3, #12]
 8003ce8:	883b      	ldrh	r3, [r7, #0]
 8003cea:	f108 0801 	add.w	r8, r8, #1
 8003cee:	4598      	cmp	r8, r3
 8003cf0:	d205      	bcs.n	8003cfe <ai_platform_network_process+0x3ba>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	b11b      	cbz	r3, 8003cfe <ai_platform_network_process+0x3ba>
 8003cf6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8003cfa:	2800      	cmp	r0, #0
 8003cfc:	d1d5      	bne.n	8003caa <ai_platform_network_process+0x366>
 8003cfe:	f8bb 0016 	ldrh.w	r0, [fp, #22]
 8003d02:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8003d06:	3001      	adds	r0, #1
 8003d08:	b280      	uxth	r0, r0
 8003d0a:	4283      	cmp	r3, r0
 8003d0c:	f8ab 0016 	strh.w	r0, [fp, #22]
 8003d10:	d888      	bhi.n	8003c24 <ai_platform_network_process+0x2e0>
 8003d12:	4683      	mov	fp, r0
 8003d14:	e69e      	b.n	8003a54 <ai_platform_network_process+0x110>
 8003d16:	68b2      	ldr	r2, [r6, #8]
 8003d18:	f000 fdf0 	bl	80048fc <memcpy>
 8003d1c:	e7a2      	b.n	8003c64 <ai_platform_network_process+0x320>
 8003d1e:	6889      	ldr	r1, [r1, #8]
 8003d20:	4660      	mov	r0, ip
 8003d22:	f000 fdeb 	bl	80048fc <memcpy>
 8003d26:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8003d2a:	f85a 2009 	ldr.w	r2, [sl, r9]
 8003d2e:	440b      	add	r3, r1
 8003d30:	4293      	cmp	r3, r2
 8003d32:	bf24      	itt	cs
 8003d34:	68f3      	ldrcs	r3, [r6, #12]
 8003d36:	1ad3      	subcs	r3, r2, r3
 8003d38:	6073      	str	r3, [r6, #4]
 8003d3a:	e7d5      	b.n	8003ce8 <ai_platform_network_process+0x3a4>
 8003d3c:	2700      	movs	r7, #0
 8003d3e:	e76c      	b.n	8003c1a <ai_platform_network_process+0x2d6>
 8003d40:	461d      	mov	r5, r3
 8003d42:	461f      	mov	r7, r3
 8003d44:	e769      	b.n	8003c1a <ai_platform_network_process+0x2d6>
 8003d46:	f104 0010 	add.w	r0, r4, #16
 8003d4a:	2218      	movs	r2, #24
 8003d4c:	2113      	movs	r1, #19
 8003d4e:	f000 f805 	bl	8003d5c <core_set_error>
 8003d52:	f04f 0b00 	mov.w	fp, #0
 8003d56:	e67d      	b.n	8003a54 <ai_platform_network_process+0x110>

08003d58 <core_init>:
 8003d58:	2001      	movs	r0, #1
 8003d5a:	4770      	bx	lr

08003d5c <core_set_error>:
 8003d5c:	7803      	ldrb	r3, [r0, #0]
 8003d5e:	b933      	cbnz	r3, 8003d6e <core_set_error+0x12>
 8003d60:	7001      	strb	r1, [r0, #0]
 8003d62:	6803      	ldr	r3, [r0, #0]
 8003d64:	f362 231f 	bfi	r3, r2, #8, #24
 8003d68:	6003      	str	r3, [r0, #0]
 8003d6a:	2001      	movs	r0, #1
 8003d6c:	4770      	bx	lr
 8003d6e:	2000      	movs	r0, #0
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop

08003d74 <ai_dict8_dot_array_f32>:
 8003d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d78:	f8dd c020 	ldr.w	ip, [sp, #32]
 8003d7c:	ea5f 08dc 	movs.w	r8, ip, lsr #3
 8003d80:	f000 80c0 	beq.w	8003f04 <ai_dict8_dot_array_f32+0x190>
 8003d84:	f101 0408 	add.w	r4, r1, #8
 8003d88:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8003d8c:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8003f0c <ai_dict8_dot_array_f32+0x198>
 8003d90:	eb04 0e09 	add.w	lr, r4, r9
 8003d94:	f103 0520 	add.w	r5, r3, #32
 8003d98:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 8003d9c:	f814 ac08 	ldrb.w	sl, [r4, #-8]
 8003da0:	ed15 3a07 	vldr	s6, [r5, #-28]	; 0xffffffe4
 8003da4:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 8003da8:	f814 7c06 	ldrb.w	r7, [r4, #-6]
 8003dac:	ed15 4a06 	vldr	s8, [r5, #-24]	; 0xffffffe8
 8003db0:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 8003db4:	ed55 3a04 	vldr	s7, [r5, #-16]
 8003db8:	ed55 4a03 	vldr	s9, [r5, #-12]
 8003dbc:	ed55 5a02 	vldr	s11, [r5, #-8]
 8003dc0:	ed55 6a01 	vldr	s13, [r5, #-4]
 8003dc4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8003dc8:	edd6 7a00 	vldr	s15, [r6]
 8003dcc:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 8003dd0:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8003dd4:	ee67 7a83 	vmul.f32	s15, s15, s6
 8003dd8:	ed9a 3a00 	vldr	s6, [sl]
 8003ddc:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 8003de0:	eee3 7a05 	vfma.f32	s15, s6, s10
 8003de4:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8003de8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8003dec:	ed97 3a00 	vldr	s6, [r7]
 8003df0:	ed96 5a00 	vldr	s10, [r6]
 8003df4:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 8003df8:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 8003dfc:	eee3 7a04 	vfma.f32	s15, s6, s8
 8003e00:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8003e04:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8003e08:	ed9a 3a00 	vldr	s6, [sl]
 8003e0c:	ed96 4a00 	vldr	s8, [r6]
 8003e10:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 8003e14:	eee5 7a06 	vfma.f32	s15, s10, s12
 8003e18:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8003e1c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8003e20:	ed97 5a00 	vldr	s10, [r7]
 8003e24:	ed96 6a00 	vldr	s12, [r6]
 8003e28:	eee3 7a23 	vfma.f32	s15, s6, s7
 8003e2c:	3408      	adds	r4, #8
 8003e2e:	45a6      	cmp	lr, r4
 8003e30:	f105 0520 	add.w	r5, r5, #32
 8003e34:	eee4 7a24 	vfma.f32	s15, s8, s9
 8003e38:	eee5 7a25 	vfma.f32	s15, s10, s11
 8003e3c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8003e40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e44:	d1a8      	bne.n	8003d98 <ai_dict8_dot_array_f32+0x24>
 8003e46:	4449      	add	r1, r9
 8003e48:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8003e4c:	f01c 0c07 	ands.w	ip, ip, #7
 8003e50:	d050      	beq.n	8003ef4 <ai_dict8_dot_array_f32+0x180>
 8003e52:	780c      	ldrb	r4, [r1, #0]
 8003e54:	edd3 6a00 	vldr	s13, [r3]
 8003e58:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8003e5c:	edd4 7a00 	vldr	s15, [r4]
 8003e60:	f1bc 0f01 	cmp.w	ip, #1
 8003e64:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8003e68:	d044      	beq.n	8003ef4 <ai_dict8_dot_array_f32+0x180>
 8003e6a:	784c      	ldrb	r4, [r1, #1]
 8003e6c:	edd3 6a01 	vldr	s13, [r3, #4]
 8003e70:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8003e74:	edd4 7a00 	vldr	s15, [r4]
 8003e78:	f1bc 0f02 	cmp.w	ip, #2
 8003e7c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8003e80:	d038      	beq.n	8003ef4 <ai_dict8_dot_array_f32+0x180>
 8003e82:	788c      	ldrb	r4, [r1, #2]
 8003e84:	edd3 6a02 	vldr	s13, [r3, #8]
 8003e88:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8003e8c:	edd4 7a00 	vldr	s15, [r4]
 8003e90:	f1bc 0f03 	cmp.w	ip, #3
 8003e94:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8003e98:	d02c      	beq.n	8003ef4 <ai_dict8_dot_array_f32+0x180>
 8003e9a:	78cc      	ldrb	r4, [r1, #3]
 8003e9c:	edd3 6a03 	vldr	s13, [r3, #12]
 8003ea0:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8003ea4:	edd4 7a00 	vldr	s15, [r4]
 8003ea8:	f1bc 0f04 	cmp.w	ip, #4
 8003eac:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8003eb0:	d020      	beq.n	8003ef4 <ai_dict8_dot_array_f32+0x180>
 8003eb2:	790c      	ldrb	r4, [r1, #4]
 8003eb4:	edd3 6a04 	vldr	s13, [r3, #16]
 8003eb8:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8003ebc:	edd4 7a00 	vldr	s15, [r4]
 8003ec0:	f1bc 0f05 	cmp.w	ip, #5
 8003ec4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8003ec8:	d014      	beq.n	8003ef4 <ai_dict8_dot_array_f32+0x180>
 8003eca:	794c      	ldrb	r4, [r1, #5]
 8003ecc:	edd3 6a05 	vldr	s13, [r3, #20]
 8003ed0:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8003ed4:	edd4 7a00 	vldr	s15, [r4]
 8003ed8:	f1bc 0f06 	cmp.w	ip, #6
 8003edc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8003ee0:	d008      	beq.n	8003ef4 <ai_dict8_dot_array_f32+0x180>
 8003ee2:	7989      	ldrb	r1, [r1, #6]
 8003ee4:	edd3 7a06 	vldr	s15, [r3, #24]
 8003ee8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8003eec:	edd2 6a00 	vldr	s13, [r2]
 8003ef0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8003ef4:	edd0 7a00 	vldr	s15, [r0]
 8003ef8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003efc:	ed80 7a00 	vstr	s14, [r0]
 8003f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f04:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8003f0c <ai_dict8_dot_array_f32+0x198>
 8003f08:	e7a0      	b.n	8003e4c <ai_dict8_dot_array_f32+0xd8>
 8003f0a:	bf00      	nop
 8003f0c:	00000000 	.word	0x00000000

08003f10 <ai_dict4_dot_array_f32>:
 8003f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f14:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003f16:	f027 0c01 	bic.w	ip, r7, #1
 8003f1a:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 8003f1e:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8003f22:	f000 80ae 	beq.w	8004082 <ai_dict4_dot_array_f32+0x172>
 8003f26:	1d0d      	adds	r5, r1, #4
 8003f28:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8003f2c:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8004088 <ai_dict4_dot_array_f32+0x178>
 8003f30:	eb05 0e09 	add.w	lr, r5, r9
 8003f34:	f103 0420 	add.w	r4, r3, #32
 8003f38:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 8003f3c:	ed14 3a07 	vldr	s6, [r4, #-28]	; 0xffffffe4
 8003f40:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 8003f44:	ed54 3a08 	vldr	s7, [r4, #-32]	; 0xffffffe0
 8003f48:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 8003f4c:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
 8003f50:	ed14 5a04 	vldr	s10, [r4, #-16]
 8003f54:	ed54 5a03 	vldr	s11, [r4, #-12]
 8003f58:	ed14 6a02 	vldr	s12, [r4, #-8]
 8003f5c:	ed54 6a01 	vldr	s13, [r4, #-4]
 8003f60:	f006 0a0f 	and.w	sl, r6, #15
 8003f64:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8003f68:	edda 7a00 	vldr	s15, [sl]
 8003f6c:	f815 ac02 	ldrb.w	sl, [r5, #-2]
 8003f70:	0936      	lsrs	r6, r6, #4
 8003f72:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8003f76:	ee67 7a83 	vmul.f32	s15, s15, s6
 8003f7a:	ed96 3a00 	vldr	s6, [r6]
 8003f7e:	ea4f 161b 	mov.w	r6, fp, lsr #4
 8003f82:	eee3 7a23 	vfma.f32	s15, s6, s7
 8003f86:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8003f8a:	f00b 0b0f 	and.w	fp, fp, #15
 8003f8e:	edd6 3a00 	vldr	s7, [r6]
 8003f92:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 8003f96:	eee3 7a84 	vfma.f32	s15, s7, s8
 8003f9a:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8003f9e:	3504      	adds	r5, #4
 8003fa0:	ed9b 4a00 	vldr	s8, [fp]
 8003fa4:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 8003fa8:	eee4 7a24 	vfma.f32	s15, s8, s9
 8003fac:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8003fb0:	f00a 0a0f 	and.w	sl, sl, #15
 8003fb4:	eddb 4a00 	vldr	s9, [fp]
 8003fb8:	eee4 7a85 	vfma.f32	s15, s9, s10
 8003fbc:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8003fc0:	45ae      	cmp	lr, r5
 8003fc2:	ed9a 5a00 	vldr	s10, [sl]
 8003fc6:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 8003fca:	eee5 7a25 	vfma.f32	s15, s10, s11
 8003fce:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8003fd2:	f006 060f 	and.w	r6, r6, #15
 8003fd6:	edda 5a00 	vldr	s11, [sl]
 8003fda:	eee5 7a86 	vfma.f32	s15, s11, s12
 8003fde:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8003fe2:	f104 0420 	add.w	r4, r4, #32
 8003fe6:	ed96 6a00 	vldr	s12, [r6]
 8003fea:	eee6 7a26 	vfma.f32	s15, s12, s13
 8003fee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ff2:	d1a1      	bne.n	8003f38 <ai_dict4_dot_array_f32+0x28>
 8003ff4:	4449      	add	r1, r9
 8003ff6:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8003ffa:	459c      	cmp	ip, r3
 8003ffc:	d92d      	bls.n	800405a <ai_dict4_dot_array_f32+0x14a>
 8003ffe:	f10c 0c07 	add.w	ip, ip, #7
 8004002:	f103 0508 	add.w	r5, r3, #8
 8004006:	ebac 0c05 	sub.w	ip, ip, r5
 800400a:	f02c 0407 	bic.w	r4, ip, #7
 800400e:	f103 0810 	add.w	r8, r3, #16
 8004012:	44a0      	add	r8, r4
 8004014:	f101 3eff 	add.w	lr, r1, #4294967295
 8004018:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 800401c:	ed15 6a01 	vldr	s12, [r5, #-4]
 8004020:	ed55 6a02 	vldr	s13, [r5, #-8]
 8004024:	f004 060f 	and.w	r6, r4, #15
 8004028:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800402c:	0924      	lsrs	r4, r4, #4
 800402e:	edd6 7a00 	vldr	s15, [r6]
 8004032:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8004036:	ee67 7a86 	vmul.f32	s15, s15, s12
 800403a:	ed94 6a00 	vldr	s12, [r4]
 800403e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004042:	3508      	adds	r5, #8
 8004044:	45a8      	cmp	r8, r5
 8004046:	ee37 7a27 	vadd.f32	s14, s14, s15
 800404a:	d1e5      	bne.n	8004018 <ai_dict4_dot_array_f32+0x108>
 800404c:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8004050:	f10c 0c01 	add.w	ip, ip, #1
 8004054:	4461      	add	r1, ip
 8004056:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 800405a:	07fc      	lsls	r4, r7, #31
 800405c:	d509      	bpl.n	8004072 <ai_dict4_dot_array_f32+0x162>
 800405e:	7809      	ldrb	r1, [r1, #0]
 8004060:	edd3 7a00 	vldr	s15, [r3]
 8004064:	090b      	lsrs	r3, r1, #4
 8004066:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800406a:	edd2 6a00 	vldr	s13, [r2]
 800406e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004072:	edd0 7a00 	vldr	s15, [r0]
 8004076:	ee37 7a87 	vadd.f32	s14, s15, s14
 800407a:	ed80 7a00 	vstr	s14, [r0]
 800407e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004082:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8004088 <ai_dict4_dot_array_f32+0x178>
 8004086:	e7b8      	b.n	8003ffa <ai_dict4_dot_array_f32+0xea>
 8004088:	00000000 	.word	0x00000000

0800408c <forward_dense>:
 800408c:	6942      	ldr	r2, [r0, #20]
 800408e:	8813      	ldrh	r3, [r2, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	f000 81ca 	beq.w	800442a <forward_dense+0x39e>
 8004096:	6852      	ldr	r2, [r2, #4]
 8004098:	6850      	ldr	r0, [r2, #4]
 800409a:	b100      	cbz	r0, 800409e <forward_dense+0x12>
 800409c:	6800      	ldr	r0, [r0, #0]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	f240 81c0 	bls.w	8004424 <forward_dense+0x398>
 80040a4:	6911      	ldr	r1, [r2, #16]
 80040a6:	b101      	cbz	r1, 80040aa <forward_dense+0x1e>
 80040a8:	6809      	ldr	r1, [r1, #0]
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	f000 81bf 	beq.w	800442e <forward_dense+0x3a2>
 80040b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040b4:	ed2d 8b10 	vpush	{d8-d15}
 80040b8:	69d3      	ldr	r3, [r2, #28]
 80040ba:	b091      	sub	sp, #68	; 0x44
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f000 820b 	beq.w	80044d8 <forward_dense+0x44c>
 80040c2:	681c      	ldr	r4, [r3, #0]
 80040c4:	9408      	str	r4, [sp, #32]
 80040c6:	f112 0418 	adds.w	r4, r2, #24
 80040ca:	f000 81df 	beq.w	800448c <forward_dense+0x400>
 80040ce:	8b12      	ldrh	r2, [r2, #24]
 80040d0:	2a01      	cmp	r2, #1
 80040d2:	f240 81fe 	bls.w	80044d2 <forward_dense+0x446>
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	f000 81da 	beq.w	8004490 <forward_dense+0x404>
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	9306      	str	r3, [sp, #24]
 80040e0:	9b08      	ldr	r3, [sp, #32]
 80040e2:	68cc      	ldr	r4, [r1, #12]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	68c5      	ldr	r5, [r0, #12]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	f8d5 8004 	ldr.w	r8, [r5, #4]
 80040ee:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80040f2:	f3c2 1cc6 	ubfx	ip, r2, #7, #7
 80040f6:	f3c2 5541 	ubfx	r5, r2, #21, #2
 80040fa:	fa4c f505 	asr.w	r5, ip, r5
 80040fe:	f3c2 4243 	ubfx	r2, r2, #17, #4
 8004102:	950b      	str	r5, [sp, #44]	; 0x2c
 8004104:	2a04      	cmp	r2, #4
 8004106:	fb07 f506 	mul.w	r5, r7, r6
 800410a:	6864      	ldr	r4, [r4, #4]
 800410c:	9507      	str	r5, [sp, #28]
 800410e:	f000 81dd 	beq.w	80044cc <forward_dense+0x440>
 8004112:	2a08      	cmp	r2, #8
 8004114:	f000 81da 	beq.w	80044cc <forward_dense+0x440>
 8004118:	f04f 0a00 	mov.w	sl, #0
 800411c:	698a      	ldr	r2, [r1, #24]
 800411e:	6981      	ldr	r1, [r0, #24]
 8004120:	6890      	ldr	r0, [r2, #8]
 8004122:	9a08      	ldr	r2, [sp, #32]
 8004124:	9004      	str	r0, [sp, #16]
 8004126:	6952      	ldr	r2, [r2, #20]
 8004128:	688f      	ldr	r7, [r1, #8]
 800412a:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800412e:	00a2      	lsls	r2, r4, #2
 8004130:	9209      	str	r2, [sp, #36]	; 0x24
 8004132:	1886      	adds	r6, r0, r2
 8004134:	9a07      	ldr	r2, [sp, #28]
 8004136:	2a00      	cmp	r2, #0
 8004138:	f000 81c3 	beq.w	80044c2 <forward_dense+0x436>
 800413c:	f1a8 0210 	sub.w	r2, r8, #16
 8004140:	0912      	lsrs	r2, r2, #4
 8004142:	3201      	adds	r2, #1
 8004144:	0192      	lsls	r2, r2, #6
 8004146:	920c      	str	r2, [sp, #48]	; 0x30
 8004148:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800414c:	920a      	str	r2, [sp, #40]	; 0x28
 800414e:	689d      	ldr	r5, [r3, #8]
 8004150:	9b06      	ldr	r3, [sp, #24]
 8004152:	eddf aad0 	vldr	s21, [pc, #832]	; 8004494 <forward_dense+0x408>
 8004156:	2200      	movs	r2, #0
 8004158:	9205      	str	r2, [sp, #20]
 800415a:	f008 020f 	and.w	r2, r8, #15
 800415e:	920d      	str	r2, [sp, #52]	; 0x34
 8004160:	2b00      	cmp	r3, #0
 8004162:	d043      	beq.n	80041ec <forward_dense+0x160>
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	689c      	ldr	r4, [r3, #8]
 8004168:	9b04      	ldr	r3, [sp, #16]
 800416a:	f1ba 0f00 	cmp.w	sl, #0
 800416e:	d042      	beq.n	80041f6 <forward_dense+0x16a>
 8004170:	42b3      	cmp	r3, r6
 8004172:	d22a      	bcs.n	80041ca <forward_dense+0x13e>
 8004174:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004176:	469b      	mov	fp, r3
 8004178:	ab0f      	add	r3, sp, #60	; 0x3c
 800417a:	9303      	str	r3, [sp, #12]
 800417c:	2a04      	cmp	r2, #4
 800417e:	4633      	mov	r3, r6
 8004180:	4646      	mov	r6, r8
 8004182:	4698      	mov	r8, r3
 8004184:	f000 8156 	beq.w	8004434 <forward_dense+0x3a8>
 8004188:	2c00      	cmp	r4, #0
 800418a:	f000 8185 	beq.w	8004498 <forward_dense+0x40c>
 800418e:	f8d4 c000 	ldr.w	ip, [r4]
 8004192:	9803      	ldr	r0, [sp, #12]
 8004194:	9600      	str	r6, [sp, #0]
 8004196:	463b      	mov	r3, r7
 8004198:	4629      	mov	r1, r5
 800419a:	4652      	mov	r2, sl
 800419c:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 80041a0:	f7ff fde8 	bl	8003d74 <ai_dict8_dot_array_f32>
 80041a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80041a6:	f84b 3b04 	str.w	r3, [fp], #4
 80041aa:	45c3      	cmp	fp, r8
 80041ac:	f104 0404 	add.w	r4, r4, #4
 80041b0:	444d      	add	r5, r9
 80041b2:	d3e9      	bcc.n	8004188 <forward_dense+0xfc>
 80041b4:	4643      	mov	r3, r8
 80041b6:	46b0      	mov	r8, r6
 80041b8:	461e      	mov	r6, r3
 80041ba:	9a04      	ldr	r2, [sp, #16]
 80041bc:	43d3      	mvns	r3, r2
 80041be:	4433      	add	r3, r6
 80041c0:	f023 0303 	bic.w	r3, r3, #3
 80041c4:	3304      	adds	r3, #4
 80041c6:	18d3      	adds	r3, r2, r3
 80041c8:	9304      	str	r3, [sp, #16]
 80041ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80041cc:	9b05      	ldr	r3, [sp, #20]
 80041ce:	4417      	add	r7, r2
 80041d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041d2:	4416      	add	r6, r2
 80041d4:	9a07      	ldr	r2, [sp, #28]
 80041d6:	3301      	adds	r3, #1
 80041d8:	4293      	cmp	r3, r2
 80041da:	9305      	str	r3, [sp, #20]
 80041dc:	f000 8171 	beq.w	80044c2 <forward_dense+0x436>
 80041e0:	9b08      	ldr	r3, [sp, #32]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	689d      	ldr	r5, [r3, #8]
 80041e6:	9b06      	ldr	r3, [sp, #24]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1bb      	bne.n	8004164 <forward_dense+0xd8>
 80041ec:	461c      	mov	r4, r3
 80041ee:	9b04      	ldr	r3, [sp, #16]
 80041f0:	f1ba 0f00 	cmp.w	sl, #0
 80041f4:	d1bc      	bne.n	8004170 <forward_dense+0xe4>
 80041f6:	42b3      	cmp	r3, r6
 80041f8:	d2e7      	bcs.n	80041ca <forward_dense+0x13e>
 80041fa:	4618      	mov	r0, r3
 80041fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80041fe:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8004202:	eb07 0c03 	add.w	ip, r7, r3
 8004206:	469e      	mov	lr, r3
 8004208:	2c00      	cmp	r4, #0
 800420a:	f000 80ff 	beq.w	800440c <forward_dense+0x380>
 800420e:	f1b8 0f0f 	cmp.w	r8, #15
 8004212:	edd4 fa00 	vldr	s31, [r4]
 8004216:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8004494 <forward_dense+0x408>
 800421a:	f104 0404 	add.w	r4, r4, #4
 800421e:	f240 80fd 	bls.w	800441c <forward_dense+0x390>
 8004222:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004226:	f105 0340 	add.w	r3, r5, #64	; 0x40
 800422a:	4641      	mov	r1, r8
 800422c:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
 8004230:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8004234:	ed53 ea10 	vldr	s29, [r3, #-64]	; 0xffffffc0
 8004238:	ed12 ea10 	vldr	s28, [r2, #-64]	; 0xffffffc0
 800423c:	ed52 da0e 	vldr	s27, [r2, #-56]	; 0xffffffc8
 8004240:	ed12 da0d 	vldr	s26, [r2, #-52]	; 0xffffffcc
 8004244:	ed53 ca0d 	vldr	s25, [r3, #-52]	; 0xffffffcc
 8004248:	ed12 ca0c 	vldr	s24, [r2, #-48]	; 0xffffffd0
 800424c:	ed53 ba0c 	vldr	s23, [r3, #-48]	; 0xffffffd0
 8004250:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 8004254:	ed12 aa0b 	vldr	s20, [r2, #-44]	; 0xffffffd4
 8004258:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 800425c:	ed13 9a0a 	vldr	s18, [r3, #-40]	; 0xffffffd8
 8004260:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 8004264:	ed13 8a09 	vldr	s16, [r3, #-36]	; 0xffffffdc
 8004268:	ed13 0a08 	vldr	s0, [r3, #-32]	; 0xffffffe0
 800426c:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 8004270:	ed13 1a07 	vldr	s2, [r3, #-28]	; 0xffffffe4
 8004274:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 8004278:	ed13 2a06 	vldr	s4, [r3, #-24]	; 0xffffffe8
 800427c:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 8004280:	ed12 3a05 	vldr	s6, [r2, #-20]	; 0xffffffec
 8004284:	ed53 3a05 	vldr	s7, [r3, #-20]	; 0xffffffec
 8004288:	ed13 4a04 	vldr	s8, [r3, #-16]
 800428c:	ed52 4a04 	vldr	s9, [r2, #-16]
 8004290:	ed12 5a03 	vldr	s10, [r2, #-12]
 8004294:	ed53 5a03 	vldr	s11, [r3, #-12]
 8004298:	ed12 6a02 	vldr	s12, [r2, #-8]
 800429c:	ed13 7a02 	vldr	s14, [r3, #-8]
 80042a0:	ee67 7a8f 	vmul.f32	s15, s15, s30
 80042a4:	ed13 fa0e 	vldr	s30, [r3, #-56]	; 0xffffffc8
 80042a8:	eeee 7a8e 	vfma.f32	s15, s29, s28
 80042ac:	3910      	subs	r1, #16
 80042ae:	290f      	cmp	r1, #15
 80042b0:	ed53 ea01 	vldr	s29, [r3, #-4]
 80042b4:	ed12 ea01 	vldr	s28, [r2, #-4]
 80042b8:	eeed 7a8f 	vfma.f32	s15, s27, s30
 80042bc:	f103 0340 	add.w	r3, r3, #64	; 0x40
 80042c0:	f102 0240 	add.w	r2, r2, #64	; 0x40
 80042c4:	eeed 7a2c 	vfma.f32	s15, s26, s25
 80042c8:	eeec 7a2b 	vfma.f32	s15, s24, s23
 80042cc:	eeeb 7a0a 	vfma.f32	s15, s22, s20
 80042d0:	eee9 7a89 	vfma.f32	s15, s19, s18
 80042d4:	eee8 7a88 	vfma.f32	s15, s17, s16
 80042d8:	eee0 7a20 	vfma.f32	s15, s0, s1
 80042dc:	eee1 7a21 	vfma.f32	s15, s2, s3
 80042e0:	eee2 7a22 	vfma.f32	s15, s4, s5
 80042e4:	eee3 7a23 	vfma.f32	s15, s6, s7
 80042e8:	eee4 7a24 	vfma.f32	s15, s8, s9
 80042ec:	eee5 7a25 	vfma.f32	s15, s10, s11
 80042f0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80042f4:	eeee 7a8e 	vfma.f32	s15, s29, s28
 80042f8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80042fc:	d896      	bhi.n	800422c <forward_dense+0x1a0>
 80042fe:	eb05 010e 	add.w	r1, r5, lr
 8004302:	465b      	mov	r3, fp
 8004304:	4662      	mov	r2, ip
 8004306:	2b00      	cmp	r3, #0
 8004308:	d075      	beq.n	80043f6 <forward_dense+0x36a>
 800430a:	ed91 7a00 	vldr	s14, [r1]
 800430e:	edd2 7a00 	vldr	s15, [r2]
 8004312:	2b01      	cmp	r3, #1
 8004314:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004318:	d06d      	beq.n	80043f6 <forward_dense+0x36a>
 800431a:	ed91 7a01 	vldr	s14, [r1, #4]
 800431e:	edd2 7a01 	vldr	s15, [r2, #4]
 8004322:	2b02      	cmp	r3, #2
 8004324:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004328:	d065      	beq.n	80043f6 <forward_dense+0x36a>
 800432a:	ed91 7a02 	vldr	s14, [r1, #8]
 800432e:	edd2 7a02 	vldr	s15, [r2, #8]
 8004332:	2b03      	cmp	r3, #3
 8004334:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004338:	d05d      	beq.n	80043f6 <forward_dense+0x36a>
 800433a:	ed91 7a03 	vldr	s14, [r1, #12]
 800433e:	edd2 7a03 	vldr	s15, [r2, #12]
 8004342:	2b04      	cmp	r3, #4
 8004344:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004348:	d055      	beq.n	80043f6 <forward_dense+0x36a>
 800434a:	ed91 7a04 	vldr	s14, [r1, #16]
 800434e:	edd2 7a04 	vldr	s15, [r2, #16]
 8004352:	2b05      	cmp	r3, #5
 8004354:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004358:	d04d      	beq.n	80043f6 <forward_dense+0x36a>
 800435a:	ed91 7a05 	vldr	s14, [r1, #20]
 800435e:	edd2 7a05 	vldr	s15, [r2, #20]
 8004362:	2b06      	cmp	r3, #6
 8004364:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004368:	d045      	beq.n	80043f6 <forward_dense+0x36a>
 800436a:	ed91 7a06 	vldr	s14, [r1, #24]
 800436e:	edd2 7a06 	vldr	s15, [r2, #24]
 8004372:	2b07      	cmp	r3, #7
 8004374:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004378:	d03d      	beq.n	80043f6 <forward_dense+0x36a>
 800437a:	ed91 7a07 	vldr	s14, [r1, #28]
 800437e:	edd2 7a07 	vldr	s15, [r2, #28]
 8004382:	2b08      	cmp	r3, #8
 8004384:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004388:	d035      	beq.n	80043f6 <forward_dense+0x36a>
 800438a:	ed91 7a08 	vldr	s14, [r1, #32]
 800438e:	edd2 7a08 	vldr	s15, [r2, #32]
 8004392:	2b09      	cmp	r3, #9
 8004394:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004398:	d02d      	beq.n	80043f6 <forward_dense+0x36a>
 800439a:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 800439e:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 80043a2:	2b0a      	cmp	r3, #10
 80043a4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80043a8:	d025      	beq.n	80043f6 <forward_dense+0x36a>
 80043aa:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 80043ae:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 80043b2:	2b0b      	cmp	r3, #11
 80043b4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80043b8:	d01d      	beq.n	80043f6 <forward_dense+0x36a>
 80043ba:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 80043be:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 80043c2:	2b0c      	cmp	r3, #12
 80043c4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80043c8:	d015      	beq.n	80043f6 <forward_dense+0x36a>
 80043ca:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 80043ce:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 80043d2:	2b0d      	cmp	r3, #13
 80043d4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80043d8:	d00d      	beq.n	80043f6 <forward_dense+0x36a>
 80043da:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 80043de:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80043e2:	2b0e      	cmp	r3, #14
 80043e4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80043e8:	d005      	beq.n	80043f6 <forward_dense+0x36a>
 80043ea:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 80043ee:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 80043f2:	eee7 6a27 	vfma.f32	s13, s14, s15
 80043f6:	444d      	add	r5, r9
 80043f8:	ee7f 6aa6 	vadd.f32	s13, s31, s13
 80043fc:	ece0 6a01 	vstmia	r0!, {s13}
 8004400:	42b0      	cmp	r0, r6
 8004402:	f4bf aeda 	bcs.w	80041ba <forward_dense+0x12e>
 8004406:	2c00      	cmp	r4, #0
 8004408:	f47f af01 	bne.w	800420e <forward_dense+0x182>
 800440c:	f1b8 0f0f 	cmp.w	r8, #15
 8004410:	eef0 fa6a 	vmov.f32	s31, s21
 8004414:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8004494 <forward_dense+0x408>
 8004418:	f63f af03 	bhi.w	8004222 <forward_dense+0x196>
 800441c:	4643      	mov	r3, r8
 800441e:	4629      	mov	r1, r5
 8004420:	463a      	mov	r2, r7
 8004422:	e770      	b.n	8004306 <forward_dense+0x27a>
 8004424:	2300      	movs	r3, #0
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	deff      	udf	#255	; 0xff
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	deff      	udf	#255	; 0xff
 800442e:	2300      	movs	r3, #0
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	deff      	udf	#255	; 0xff
 8004434:	b1ac      	cbz	r4, 8004462 <forward_dense+0x3d6>
 8004436:	f8d4 c000 	ldr.w	ip, [r4]
 800443a:	9803      	ldr	r0, [sp, #12]
 800443c:	9600      	str	r6, [sp, #0]
 800443e:	463b      	mov	r3, r7
 8004440:	4629      	mov	r1, r5
 8004442:	4652      	mov	r2, sl
 8004444:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8004448:	f7ff fd62 	bl	8003f10 <ai_dict4_dot_array_f32>
 800444c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800444e:	f84b 3b04 	str.w	r3, [fp], #4
 8004452:	45c3      	cmp	fp, r8
 8004454:	f104 0404 	add.w	r4, r4, #4
 8004458:	444d      	add	r5, r9
 800445a:	f4bf aeab 	bcs.w	80041b4 <forward_dense+0x128>
 800445e:	2c00      	cmp	r4, #0
 8004460:	d1e9      	bne.n	8004436 <forward_dense+0x3aa>
 8004462:	4634      	mov	r4, r6
 8004464:	4646      	mov	r6, r8
 8004466:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800446a:	9400      	str	r4, [sp, #0]
 800446c:	463b      	mov	r3, r7
 800446e:	4629      	mov	r1, r5
 8004470:	4652      	mov	r2, sl
 8004472:	4640      	mov	r0, r8
 8004474:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8004478:	f7ff fd4a 	bl	8003f10 <ai_dict4_dot_array_f32>
 800447c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800447e:	f84b 3b04 	str.w	r3, [fp], #4
 8004482:	45b3      	cmp	fp, r6
 8004484:	444d      	add	r5, r9
 8004486:	d3f0      	bcc.n	800446a <forward_dense+0x3de>
 8004488:	46a0      	mov	r8, r4
 800448a:	e696      	b.n	80041ba <forward_dense+0x12e>
 800448c:	9406      	str	r4, [sp, #24]
 800448e:	e627      	b.n	80040e0 <forward_dense+0x54>
 8004490:	9306      	str	r3, [sp, #24]
 8004492:	e625      	b.n	80040e0 <forward_dense+0x54>
 8004494:	00000000 	.word	0x00000000
 8004498:	4634      	mov	r4, r6
 800449a:	4646      	mov	r6, r8
 800449c:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80044a0:	9400      	str	r4, [sp, #0]
 80044a2:	463b      	mov	r3, r7
 80044a4:	4629      	mov	r1, r5
 80044a6:	4652      	mov	r2, sl
 80044a8:	4640      	mov	r0, r8
 80044aa:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 80044ae:	f7ff fc61 	bl	8003d74 <ai_dict8_dot_array_f32>
 80044b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80044b4:	f84b 3b04 	str.w	r3, [fp], #4
 80044b8:	45b3      	cmp	fp, r6
 80044ba:	444d      	add	r5, r9
 80044bc:	d3f0      	bcc.n	80044a0 <forward_dense+0x414>
 80044be:	46a0      	mov	r8, r4
 80044c0:	e67b      	b.n	80041ba <forward_dense+0x12e>
 80044c2:	b011      	add	sp, #68	; 0x44
 80044c4:	ecbd 8b10 	vpop	{d8-d15}
 80044c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044cc:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 80044d0:	e624      	b.n	800411c <forward_dense+0x90>
 80044d2:	2300      	movs	r3, #0
 80044d4:	9306      	str	r3, [sp, #24]
 80044d6:	e603      	b.n	80040e0 <forward_dense+0x54>
 80044d8:	9308      	str	r3, [sp, #32]
 80044da:	e5f4      	b.n	80040c6 <forward_dense+0x3a>

080044dc <nl_func_relu_generic_array_f32>:
 80044dc:	b430      	push	{r4, r5}
 80044de:	edd3 6a02 	vldr	s13, [r3, #8]
 80044e2:	6880      	ldr	r0, [r0, #8]
 80044e4:	688c      	ldr	r4, [r1, #8]
 80044e6:	ed93 7a00 	vldr	s14, [r3]
 80044ea:	ed93 6a01 	vldr	s12, [r3, #4]
 80044ee:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80044f2:	3a01      	subs	r2, #1
 80044f4:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80044f8:	0092      	lsls	r2, r2, #2
 80044fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044fe:	4410      	add	r0, r2
 8004500:	4422      	add	r2, r4
 8004502:	d421      	bmi.n	8004548 <nl_func_relu_generic_array_f32+0x6c>
 8004504:	42a2      	cmp	r2, r4
 8004506:	d33d      	bcc.n	8004584 <nl_func_relu_generic_array_f32+0xa8>
 8004508:	1d13      	adds	r3, r2, #4
 800450a:	1d02      	adds	r2, r0, #4
 800450c:	e010      	b.n	8004530 <nl_func_relu_generic_array_f32+0x54>
 800450e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004516:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800451a:	dd01      	ble.n	8004520 <nl_func_relu_generic_array_f32+0x44>
 800451c:	ee65 7a86 	vmul.f32	s15, s11, s12
 8004520:	ed62 7a01 	vstmdb	r2!, {s15}
 8004524:	6888      	ldr	r0, [r1, #8]
 8004526:	f1a3 0408 	sub.w	r4, r3, #8
 800452a:	4284      	cmp	r4, r0
 800452c:	462b      	mov	r3, r5
 800452e:	d329      	bcc.n	8004584 <nl_func_relu_generic_array_f32+0xa8>
 8004530:	ed53 7a01 	vldr	s15, [r3, #-4]
 8004534:	eef4 6ae7 	vcmpe.f32	s13, s15
 8004538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800453c:	f1a3 0504 	sub.w	r5, r3, #4
 8004540:	dce5      	bgt.n	800450e <nl_func_relu_generic_array_f32+0x32>
 8004542:	eef0 7a66 	vmov.f32	s15, s13
 8004546:	e7eb      	b.n	8004520 <nl_func_relu_generic_array_f32+0x44>
 8004548:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800454c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004550:	d01a      	beq.n	8004588 <nl_func_relu_generic_array_f32+0xac>
 8004552:	42a2      	cmp	r2, r4
 8004554:	d316      	bcc.n	8004584 <nl_func_relu_generic_array_f32+0xa8>
 8004556:	1d13      	adds	r3, r2, #4
 8004558:	1d02      	adds	r2, r0, #4
 800455a:	ed53 7a01 	vldr	s15, [r3, #-4]
 800455e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8004562:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004566:	f1a3 0408 	sub.w	r4, r3, #8
 800456a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800456e:	f1a3 0004 	sub.w	r0, r3, #4
 8004572:	ee66 6a86 	vmul.f32	s13, s13, s12
 8004576:	4623      	mov	r3, r4
 8004578:	d51e      	bpl.n	80045b8 <nl_func_relu_generic_array_f32+0xdc>
 800457a:	ed62 6a01 	vstmdb	r2!, {s13}
 800457e:	688b      	ldr	r3, [r1, #8]
 8004580:	42a3      	cmp	r3, r4
 8004582:	d91e      	bls.n	80045c2 <nl_func_relu_generic_array_f32+0xe6>
 8004584:	bc30      	pop	{r4, r5}
 8004586:	4770      	bx	lr
 8004588:	42a2      	cmp	r2, r4
 800458a:	d3fb      	bcc.n	8004584 <nl_func_relu_generic_array_f32+0xa8>
 800458c:	1d13      	adds	r3, r2, #4
 800458e:	2500      	movs	r5, #0
 8004590:	1d02      	adds	r2, r0, #4
 8004592:	ed53 7a01 	vldr	s15, [r3, #-4]
 8004596:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800459a:	f1a3 0408 	sub.w	r4, r3, #8
 800459e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045a2:	f1a3 0004 	sub.w	r0, r3, #4
 80045a6:	4623      	mov	r3, r4
 80045a8:	d80d      	bhi.n	80045c6 <nl_func_relu_generic_array_f32+0xea>
 80045aa:	ed62 7a01 	vstmdb	r2!, {s15}
 80045ae:	688b      	ldr	r3, [r1, #8]
 80045b0:	42a3      	cmp	r3, r4
 80045b2:	d8e7      	bhi.n	8004584 <nl_func_relu_generic_array_f32+0xa8>
 80045b4:	4603      	mov	r3, r0
 80045b6:	e7ec      	b.n	8004592 <nl_func_relu_generic_array_f32+0xb6>
 80045b8:	ed62 7a01 	vstmdb	r2!, {s15}
 80045bc:	688c      	ldr	r4, [r1, #8]
 80045be:	429c      	cmp	r4, r3
 80045c0:	d8e0      	bhi.n	8004584 <nl_func_relu_generic_array_f32+0xa8>
 80045c2:	4603      	mov	r3, r0
 80045c4:	e7c9      	b.n	800455a <nl_func_relu_generic_array_f32+0x7e>
 80045c6:	f842 5d04 	str.w	r5, [r2, #-4]!
 80045ca:	688c      	ldr	r4, [r1, #8]
 80045cc:	429c      	cmp	r4, r3
 80045ce:	d8d9      	bhi.n	8004584 <nl_func_relu_generic_array_f32+0xa8>
 80045d0:	4603      	mov	r3, r0
 80045d2:	e7de      	b.n	8004592 <nl_func_relu_generic_array_f32+0xb6>

080045d4 <forward_relu>:
 80045d4:	6942      	ldr	r2, [r0, #20]
 80045d6:	8813      	ldrh	r3, [r2, #0]
 80045d8:	b33b      	cbz	r3, 800462a <forward_relu+0x56>
 80045da:	b470      	push	{r4, r5, r6}
 80045dc:	6852      	ldr	r2, [r2, #4]
 80045de:	6856      	ldr	r6, [r2, #4]
 80045e0:	b106      	cbz	r6, 80045e4 <forward_relu+0x10>
 80045e2:	6836      	ldr	r6, [r6, #0]
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d91d      	bls.n	8004624 <forward_relu+0x50>
 80045e8:	6913      	ldr	r3, [r2, #16]
 80045ea:	b103      	cbz	r3, 80045ee <forward_relu+0x1a>
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	6982      	ldr	r2, [r0, #24]
 80045f0:	68b4      	ldr	r4, [r6, #8]
 80045f2:	6998      	ldr	r0, [r3, #24]
 80045f4:	69b1      	ldr	r1, [r6, #24]
 80045f6:	f3c4 2417 	ubfx	r4, r4, #8, #24
 80045fa:	2a00      	cmp	r2, #0
 80045fc:	d041      	beq.n	8004682 <forward_relu+0xae>
 80045fe:	e9d2 5301 	ldrd	r5, r3, [r2, #4]
 8004602:	2d01      	cmp	r5, #1
 8004604:	d013      	beq.n	800462e <forward_relu+0x5a>
 8004606:	2c00      	cmp	r4, #0
 8004608:	d06f      	beq.n	80046ea <forward_relu+0x116>
 800460a:	68f6      	ldr	r6, [r6, #12]
 800460c:	2201      	movs	r2, #1
 800460e:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8004612:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004616:	42a6      	cmp	r6, r4
 8004618:	fb05 f202 	mul.w	r2, r5, r2
 800461c:	d1f9      	bne.n	8004612 <forward_relu+0x3e>
 800461e:	bc70      	pop	{r4, r5, r6}
 8004620:	f7ff bf5c 	b.w	80044dc <nl_func_relu_generic_array_f32>
 8004624:	2300      	movs	r3, #0
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	deff      	udf	#255	; 0xff
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	deff      	udf	#255	; 0xff
 800462e:	6880      	ldr	r0, [r0, #8]
 8004630:	688a      	ldr	r2, [r1, #8]
 8004632:	ed93 7a00 	vldr	s14, [r3]
 8004636:	b184      	cbz	r4, 800465a <forward_relu+0x86>
 8004638:	68f6      	ldr	r6, [r6, #12]
 800463a:	462b      	mov	r3, r5
 800463c:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8004640:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004644:	42a6      	cmp	r6, r4
 8004646:	fb05 f303 	mul.w	r3, r5, r3
 800464a:	d1f9      	bne.n	8004640 <forward_relu+0x6c>
 800464c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004650:	3b01      	subs	r3, #1
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	18d2      	adds	r2, r2, r3
 8004656:	4418      	add	r0, r3
 8004658:	d23d      	bcs.n	80046d6 <forward_relu+0x102>
 800465a:	1d13      	adds	r3, r2, #4
 800465c:	2500      	movs	r5, #0
 800465e:	1d02      	adds	r2, r0, #4
 8004660:	ed53 7a01 	vldr	s15, [r3, #-4]
 8004664:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800466c:	f1a3 0004 	sub.w	r0, r3, #4
 8004670:	d833      	bhi.n	80046da <forward_relu+0x106>
 8004672:	ed62 7a01 	vstmdb	r2!, {s15}
 8004676:	688c      	ldr	r4, [r1, #8]
 8004678:	3b08      	subs	r3, #8
 800467a:	429c      	cmp	r4, r3
 800467c:	d82b      	bhi.n	80046d6 <forward_relu+0x102>
 800467e:	4603      	mov	r3, r0
 8004680:	e7ee      	b.n	8004660 <forward_relu+0x8c>
 8004682:	6880      	ldr	r0, [r0, #8]
 8004684:	688b      	ldr	r3, [r1, #8]
 8004686:	b184      	cbz	r4, 80046aa <forward_relu+0xd6>
 8004688:	68f6      	ldr	r6, [r6, #12]
 800468a:	2201      	movs	r2, #1
 800468c:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8004690:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004694:	42a6      	cmp	r6, r4
 8004696:	fb05 f202 	mul.w	r2, r5, r2
 800469a:	d1f9      	bne.n	8004690 <forward_relu+0xbc>
 800469c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80046a0:	3a01      	subs	r2, #1
 80046a2:	0092      	lsls	r2, r2, #2
 80046a4:	189b      	adds	r3, r3, r2
 80046a6:	4410      	add	r0, r2
 80046a8:	d215      	bcs.n	80046d6 <forward_relu+0x102>
 80046aa:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80046f0 <forward_relu+0x11c>
 80046ae:	3304      	adds	r3, #4
 80046b0:	3004      	adds	r0, #4
 80046b2:	ed53 7a01 	vldr	s15, [r3, #-4]
 80046b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80046ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046be:	bfb8      	it	lt
 80046c0:	eef0 7a47 	vmovlt.f32	s15, s14
 80046c4:	ed60 7a01 	vstmdb	r0!, {s15}
 80046c8:	688c      	ldr	r4, [r1, #8]
 80046ca:	f1a3 0208 	sub.w	r2, r3, #8
 80046ce:	4294      	cmp	r4, r2
 80046d0:	f1a3 0304 	sub.w	r3, r3, #4
 80046d4:	d9ed      	bls.n	80046b2 <forward_relu+0xde>
 80046d6:	bc70      	pop	{r4, r5, r6}
 80046d8:	4770      	bx	lr
 80046da:	f842 5d04 	str.w	r5, [r2, #-4]!
 80046de:	688c      	ldr	r4, [r1, #8]
 80046e0:	3b08      	subs	r3, #8
 80046e2:	429c      	cmp	r4, r3
 80046e4:	d8f7      	bhi.n	80046d6 <forward_relu+0x102>
 80046e6:	4603      	mov	r3, r0
 80046e8:	e7ba      	b.n	8004660 <forward_relu+0x8c>
 80046ea:	2201      	movs	r2, #1
 80046ec:	e797      	b.n	800461e <forward_relu+0x4a>
 80046ee:	bf00      	nop
 80046f0:	00000000 	.word	0x00000000

080046f4 <ai_check_custom_types>:
 80046f4:	4b13      	ldr	r3, [pc, #76]	; (8004744 <ai_check_custom_types+0x50>)
 80046f6:	b082      	sub	sp, #8
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	9301      	str	r3, [sp, #4]
 80046fc:	b118      	cbz	r0, 8004706 <ai_check_custom_types+0x12>
 80046fe:	7803      	ldrb	r3, [r0, #0]
 8004700:	2b03      	cmp	r3, #3
 8004702:	d002      	beq.n	800470a <ai_check_custom_types+0x16>
 8004704:	2000      	movs	r0, #0
 8004706:	b002      	add	sp, #8
 8004708:	4770      	bx	lr
 800470a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800470e:	4293      	cmp	r3, r2
 8004710:	d004      	beq.n	800471c <ai_check_custom_types+0x28>
 8004712:	2001      	movs	r0, #1
 8004714:	f080 0001 	eor.w	r0, r0, #1
 8004718:	b002      	add	sp, #8
 800471a:	4770      	bx	lr
 800471c:	7842      	ldrb	r2, [r0, #1]
 800471e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8004722:	429a      	cmp	r2, r3
 8004724:	f100 0001 	add.w	r0, r0, #1
 8004728:	d1f3      	bne.n	8004712 <ai_check_custom_types+0x1e>
 800472a:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800472e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004732:	429a      	cmp	r2, r3
 8004734:	d1ed      	bne.n	8004712 <ai_check_custom_types+0x1e>
 8004736:	7842      	ldrb	r2, [r0, #1]
 8004738:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800473c:	429a      	cmp	r2, r3
 800473e:	d1e8      	bne.n	8004712 <ai_check_custom_types+0x1e>
 8004740:	2000      	movs	r0, #0
 8004742:	e7e7      	b.n	8004714 <ai_check_custom_types+0x20>
 8004744:	0800779c 	.word	0x0800779c

08004748 <ai_layers_forward_all>:
 8004748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800474a:	6d86      	ldr	r6, [r0, #88]	; 0x58
 800474c:	6d05      	ldr	r5, [r0, #80]	; 0x50
 800474e:	4604      	mov	r4, r0
 8004750:	b31e      	cbz	r6, 800479a <ai_layers_forward_all+0x52>
 8004752:	b1cd      	cbz	r5, 8004788 <ai_layers_forward_all+0x40>
 8004754:	6545      	str	r5, [r0, #84]	; 0x54
 8004756:	4629      	mov	r1, r5
 8004758:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800475a:	2001      	movs	r0, #1
 800475c:	47b0      	blx	r6
 800475e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8004760:	2700      	movs	r7, #0
 8004762:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004764:	2002      	movs	r0, #2
 8004766:	47b0      	blx	r6
 8004768:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800476a:	692b      	ldr	r3, [r5, #16]
 800476c:	4628      	mov	r0, r5
 800476e:	4798      	blx	r3
 8004770:	68eb      	ldr	r3, [r5, #12]
 8004772:	429d      	cmp	r5, r3
 8004774:	f04f 0003 	mov.w	r0, #3
 8004778:	4619      	mov	r1, r3
 800477a:	d006      	beq.n	800478a <ai_layers_forward_all+0x42>
 800477c:	6563      	str	r3, [r4, #84]	; 0x54
 800477e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004780:	47b0      	blx	r6
 8004782:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8004784:	2900      	cmp	r1, #0
 8004786:	d1ec      	bne.n	8004762 <ai_layers_forward_all+0x1a>
 8004788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800478a:	2100      	movs	r1, #0
 800478c:	6567      	str	r7, [r4, #84]	; 0x54
 800478e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004790:	47b0      	blx	r6
 8004792:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8004794:	2900      	cmp	r1, #0
 8004796:	d1e4      	bne.n	8004762 <ai_layers_forward_all+0x1a>
 8004798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800479a:	2d00      	cmp	r5, #0
 800479c:	d0f4      	beq.n	8004788 <ai_layers_forward_all+0x40>
 800479e:	6545      	str	r5, [r0, #84]	; 0x54
 80047a0:	692b      	ldr	r3, [r5, #16]
 80047a2:	4628      	mov	r0, r5
 80047a4:	4798      	blx	r3
 80047a6:	68eb      	ldr	r3, [r5, #12]
 80047a8:	42ab      	cmp	r3, r5
 80047aa:	d004      	beq.n	80047b6 <ai_layers_forward_all+0x6e>
 80047ac:	6563      	str	r3, [r4, #84]	; 0x54
 80047ae:	461d      	mov	r5, r3
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1f5      	bne.n	80047a0 <ai_layers_forward_all+0x58>
 80047b4:	e7e8      	b.n	8004788 <ai_layers_forward_all+0x40>
 80047b6:	2300      	movs	r3, #0
 80047b8:	6563      	str	r3, [r4, #84]	; 0x54
 80047ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080047bc <ai_array_to_buffer_fmt>:
 80047bc:	f3c0 4343 	ubfx	r3, r0, #17, #4
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d01f      	beq.n	8004804 <ai_array_to_buffer_fmt+0x48>
 80047c4:	4a1c      	ldr	r2, [pc, #112]	; (8004838 <ai_array_to_buffer_fmt+0x7c>)
 80047c6:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d00a      	beq.n	80047e4 <ai_array_to_buffer_fmt+0x28>
 80047ce:	dc0d      	bgt.n	80047ec <ai_array_to_buffer_fmt+0x30>
 80047d0:	4a1a      	ldr	r2, [pc, #104]	; (800483c <ai_array_to_buffer_fmt+0x80>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d006      	beq.n	80047e4 <ai_array_to_buffer_fmt+0x28>
 80047d6:	dd1d      	ble.n	8004814 <ai_array_to_buffer_fmt+0x58>
 80047d8:	4a19      	ldr	r2, [pc, #100]	; (8004840 <ai_array_to_buffer_fmt+0x84>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d002      	beq.n	80047e4 <ai_array_to_buffer_fmt+0x28>
 80047de:	320f      	adds	r2, #15
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d10d      	bne.n	8004800 <ai_array_to_buffer_fmt+0x44>
 80047e4:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80047e8:	4318      	orrs	r0, r3
 80047ea:	4770      	bx	lr
 80047ec:	4a15      	ldr	r2, [pc, #84]	; (8004844 <ai_array_to_buffer_fmt+0x88>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d0f8      	beq.n	80047e4 <ai_array_to_buffer_fmt+0x28>
 80047f2:	dd18      	ble.n	8004826 <ai_array_to_buffer_fmt+0x6a>
 80047f4:	4a14      	ldr	r2, [pc, #80]	; (8004848 <ai_array_to_buffer_fmt+0x8c>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d0f4      	beq.n	80047e4 <ai_array_to_buffer_fmt+0x28>
 80047fa:	4a14      	ldr	r2, [pc, #80]	; (800484c <ai_array_to_buffer_fmt+0x90>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d0f1      	beq.n	80047e4 <ai_array_to_buffer_fmt+0x28>
 8004800:	2340      	movs	r3, #64	; 0x40
 8004802:	e7ef      	b.n	80047e4 <ai_array_to_buffer_fmt+0x28>
 8004804:	4b12      	ldr	r3, [pc, #72]	; (8004850 <ai_array_to_buffer_fmt+0x94>)
 8004806:	4003      	ands	r3, r0
 8004808:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800480c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8004810:	4318      	orrs	r0, r3
 8004812:	4770      	bx	lr
 8004814:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 8004818:	4293      	cmp	r3, r2
 800481a:	d0e3      	beq.n	80047e4 <ai_array_to_buffer_fmt+0x28>
 800481c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004820:	4293      	cmp	r3, r2
 8004822:	d0df      	beq.n	80047e4 <ai_array_to_buffer_fmt+0x28>
 8004824:	e7ec      	b.n	8004800 <ai_array_to_buffer_fmt+0x44>
 8004826:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800482a:	4293      	cmp	r3, r2
 800482c:	d0da      	beq.n	80047e4 <ai_array_to_buffer_fmt+0x28>
 800482e:	3207      	adds	r2, #7
 8004830:	4293      	cmp	r3, r2
 8004832:	d0d7      	beq.n	80047e4 <ai_array_to_buffer_fmt+0x28>
 8004834:	e7e4      	b.n	8004800 <ai_array_to_buffer_fmt+0x44>
 8004836:	bf00      	nop
 8004838:	00840040 	.word	0x00840040
 800483c:	00040447 	.word	0x00040447
 8004840:	00040840 	.word	0x00040840
 8004844:	00840840 	.word	0x00840840
 8004848:	0084084f 	.word	0x0084084f
 800484c:	01821040 	.word	0x01821040
 8004850:	00803fff 	.word	0x00803fff

08004854 <ai_array_get_byte_size>:
 8004854:	b1c1      	cbz	r1, 8004888 <ai_array_get_byte_size+0x34>
 8004856:	f3c0 3282 	ubfx	r2, r0, #14, #3
 800485a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800485e:	4413      	add	r3, r2
 8004860:	fb01 f103 	mul.w	r1, r1, r3
 8004864:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8004868:	3107      	adds	r1, #7
 800486a:	f3c0 4043 	ubfx	r0, r0, #17, #4
 800486e:	f021 0107 	bic.w	r1, r1, #7
 8004872:	2804      	cmp	r0, #4
 8004874:	fa21 f102 	lsr.w	r1, r1, r2
 8004878:	d008      	beq.n	800488c <ai_array_get_byte_size+0x38>
 800487a:	2808      	cmp	r0, #8
 800487c:	d101      	bne.n	8004882 <ai_array_get_byte_size+0x2e>
 800487e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8004882:	3107      	adds	r1, #7
 8004884:	08c8      	lsrs	r0, r1, #3
 8004886:	4770      	bx	lr
 8004888:	4608      	mov	r0, r1
 800488a:	4770      	bx	lr
 800488c:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8004890:	3107      	adds	r1, #7
 8004892:	08c8      	lsrs	r0, r1, #3
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop

08004898 <__errno>:
 8004898:	4b01      	ldr	r3, [pc, #4]	; (80048a0 <__errno+0x8>)
 800489a:	6818      	ldr	r0, [r3, #0]
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	200005e4 	.word	0x200005e4

080048a4 <__libc_init_array>:
 80048a4:	b570      	push	{r4, r5, r6, lr}
 80048a6:	4d0d      	ldr	r5, [pc, #52]	; (80048dc <__libc_init_array+0x38>)
 80048a8:	4c0d      	ldr	r4, [pc, #52]	; (80048e0 <__libc_init_array+0x3c>)
 80048aa:	1b64      	subs	r4, r4, r5
 80048ac:	10a4      	asrs	r4, r4, #2
 80048ae:	2600      	movs	r6, #0
 80048b0:	42a6      	cmp	r6, r4
 80048b2:	d109      	bne.n	80048c8 <__libc_init_array+0x24>
 80048b4:	4d0b      	ldr	r5, [pc, #44]	; (80048e4 <__libc_init_array+0x40>)
 80048b6:	4c0c      	ldr	r4, [pc, #48]	; (80048e8 <__libc_init_array+0x44>)
 80048b8:	f002 ff02 	bl	80076c0 <_init>
 80048bc:	1b64      	subs	r4, r4, r5
 80048be:	10a4      	asrs	r4, r4, #2
 80048c0:	2600      	movs	r6, #0
 80048c2:	42a6      	cmp	r6, r4
 80048c4:	d105      	bne.n	80048d2 <__libc_init_array+0x2e>
 80048c6:	bd70      	pop	{r4, r5, r6, pc}
 80048c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80048cc:	4798      	blx	r3
 80048ce:	3601      	adds	r6, #1
 80048d0:	e7ee      	b.n	80048b0 <__libc_init_array+0xc>
 80048d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80048d6:	4798      	blx	r3
 80048d8:	3601      	adds	r6, #1
 80048da:	e7f2      	b.n	80048c2 <__libc_init_array+0x1e>
 80048dc:	080080c4 	.word	0x080080c4
 80048e0:	080080c4 	.word	0x080080c4
 80048e4:	080080c4 	.word	0x080080c4
 80048e8:	080080c8 	.word	0x080080c8

080048ec <malloc>:
 80048ec:	4b02      	ldr	r3, [pc, #8]	; (80048f8 <malloc+0xc>)
 80048ee:	4601      	mov	r1, r0
 80048f0:	6818      	ldr	r0, [r3, #0]
 80048f2:	f000 b885 	b.w	8004a00 <_malloc_r>
 80048f6:	bf00      	nop
 80048f8:	200005e4 	.word	0x200005e4

080048fc <memcpy>:
 80048fc:	440a      	add	r2, r1
 80048fe:	4291      	cmp	r1, r2
 8004900:	f100 33ff 	add.w	r3, r0, #4294967295
 8004904:	d100      	bne.n	8004908 <memcpy+0xc>
 8004906:	4770      	bx	lr
 8004908:	b510      	push	{r4, lr}
 800490a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800490e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004912:	4291      	cmp	r1, r2
 8004914:	d1f9      	bne.n	800490a <memcpy+0xe>
 8004916:	bd10      	pop	{r4, pc}

08004918 <memset>:
 8004918:	4402      	add	r2, r0
 800491a:	4603      	mov	r3, r0
 800491c:	4293      	cmp	r3, r2
 800491e:	d100      	bne.n	8004922 <memset+0xa>
 8004920:	4770      	bx	lr
 8004922:	f803 1b01 	strb.w	r1, [r3], #1
 8004926:	e7f9      	b.n	800491c <memset+0x4>

08004928 <_free_r>:
 8004928:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800492a:	2900      	cmp	r1, #0
 800492c:	d044      	beq.n	80049b8 <_free_r+0x90>
 800492e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004932:	9001      	str	r0, [sp, #4]
 8004934:	2b00      	cmp	r3, #0
 8004936:	f1a1 0404 	sub.w	r4, r1, #4
 800493a:	bfb8      	it	lt
 800493c:	18e4      	addlt	r4, r4, r3
 800493e:	f001 fbed 	bl	800611c <__malloc_lock>
 8004942:	4a1e      	ldr	r2, [pc, #120]	; (80049bc <_free_r+0x94>)
 8004944:	9801      	ldr	r0, [sp, #4]
 8004946:	6813      	ldr	r3, [r2, #0]
 8004948:	b933      	cbnz	r3, 8004958 <_free_r+0x30>
 800494a:	6063      	str	r3, [r4, #4]
 800494c:	6014      	str	r4, [r2, #0]
 800494e:	b003      	add	sp, #12
 8004950:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004954:	f001 bbe8 	b.w	8006128 <__malloc_unlock>
 8004958:	42a3      	cmp	r3, r4
 800495a:	d908      	bls.n	800496e <_free_r+0x46>
 800495c:	6825      	ldr	r5, [r4, #0]
 800495e:	1961      	adds	r1, r4, r5
 8004960:	428b      	cmp	r3, r1
 8004962:	bf01      	itttt	eq
 8004964:	6819      	ldreq	r1, [r3, #0]
 8004966:	685b      	ldreq	r3, [r3, #4]
 8004968:	1949      	addeq	r1, r1, r5
 800496a:	6021      	streq	r1, [r4, #0]
 800496c:	e7ed      	b.n	800494a <_free_r+0x22>
 800496e:	461a      	mov	r2, r3
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	b10b      	cbz	r3, 8004978 <_free_r+0x50>
 8004974:	42a3      	cmp	r3, r4
 8004976:	d9fa      	bls.n	800496e <_free_r+0x46>
 8004978:	6811      	ldr	r1, [r2, #0]
 800497a:	1855      	adds	r5, r2, r1
 800497c:	42a5      	cmp	r5, r4
 800497e:	d10b      	bne.n	8004998 <_free_r+0x70>
 8004980:	6824      	ldr	r4, [r4, #0]
 8004982:	4421      	add	r1, r4
 8004984:	1854      	adds	r4, r2, r1
 8004986:	42a3      	cmp	r3, r4
 8004988:	6011      	str	r1, [r2, #0]
 800498a:	d1e0      	bne.n	800494e <_free_r+0x26>
 800498c:	681c      	ldr	r4, [r3, #0]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	6053      	str	r3, [r2, #4]
 8004992:	4421      	add	r1, r4
 8004994:	6011      	str	r1, [r2, #0]
 8004996:	e7da      	b.n	800494e <_free_r+0x26>
 8004998:	d902      	bls.n	80049a0 <_free_r+0x78>
 800499a:	230c      	movs	r3, #12
 800499c:	6003      	str	r3, [r0, #0]
 800499e:	e7d6      	b.n	800494e <_free_r+0x26>
 80049a0:	6825      	ldr	r5, [r4, #0]
 80049a2:	1961      	adds	r1, r4, r5
 80049a4:	428b      	cmp	r3, r1
 80049a6:	bf04      	itt	eq
 80049a8:	6819      	ldreq	r1, [r3, #0]
 80049aa:	685b      	ldreq	r3, [r3, #4]
 80049ac:	6063      	str	r3, [r4, #4]
 80049ae:	bf04      	itt	eq
 80049b0:	1949      	addeq	r1, r1, r5
 80049b2:	6021      	streq	r1, [r4, #0]
 80049b4:	6054      	str	r4, [r2, #4]
 80049b6:	e7ca      	b.n	800494e <_free_r+0x26>
 80049b8:	b003      	add	sp, #12
 80049ba:	bd30      	pop	{r4, r5, pc}
 80049bc:	200008e8 	.word	0x200008e8

080049c0 <sbrk_aligned>:
 80049c0:	b570      	push	{r4, r5, r6, lr}
 80049c2:	4e0e      	ldr	r6, [pc, #56]	; (80049fc <sbrk_aligned+0x3c>)
 80049c4:	460c      	mov	r4, r1
 80049c6:	6831      	ldr	r1, [r6, #0]
 80049c8:	4605      	mov	r5, r0
 80049ca:	b911      	cbnz	r1, 80049d2 <sbrk_aligned+0x12>
 80049cc:	f000 fcf6 	bl	80053bc <_sbrk_r>
 80049d0:	6030      	str	r0, [r6, #0]
 80049d2:	4621      	mov	r1, r4
 80049d4:	4628      	mov	r0, r5
 80049d6:	f000 fcf1 	bl	80053bc <_sbrk_r>
 80049da:	1c43      	adds	r3, r0, #1
 80049dc:	d00a      	beq.n	80049f4 <sbrk_aligned+0x34>
 80049de:	1cc4      	adds	r4, r0, #3
 80049e0:	f024 0403 	bic.w	r4, r4, #3
 80049e4:	42a0      	cmp	r0, r4
 80049e6:	d007      	beq.n	80049f8 <sbrk_aligned+0x38>
 80049e8:	1a21      	subs	r1, r4, r0
 80049ea:	4628      	mov	r0, r5
 80049ec:	f000 fce6 	bl	80053bc <_sbrk_r>
 80049f0:	3001      	adds	r0, #1
 80049f2:	d101      	bne.n	80049f8 <sbrk_aligned+0x38>
 80049f4:	f04f 34ff 	mov.w	r4, #4294967295
 80049f8:	4620      	mov	r0, r4
 80049fa:	bd70      	pop	{r4, r5, r6, pc}
 80049fc:	200008ec 	.word	0x200008ec

08004a00 <_malloc_r>:
 8004a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a04:	1ccd      	adds	r5, r1, #3
 8004a06:	f025 0503 	bic.w	r5, r5, #3
 8004a0a:	3508      	adds	r5, #8
 8004a0c:	2d0c      	cmp	r5, #12
 8004a0e:	bf38      	it	cc
 8004a10:	250c      	movcc	r5, #12
 8004a12:	2d00      	cmp	r5, #0
 8004a14:	4607      	mov	r7, r0
 8004a16:	db01      	blt.n	8004a1c <_malloc_r+0x1c>
 8004a18:	42a9      	cmp	r1, r5
 8004a1a:	d905      	bls.n	8004a28 <_malloc_r+0x28>
 8004a1c:	230c      	movs	r3, #12
 8004a1e:	603b      	str	r3, [r7, #0]
 8004a20:	2600      	movs	r6, #0
 8004a22:	4630      	mov	r0, r6
 8004a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a28:	4e2e      	ldr	r6, [pc, #184]	; (8004ae4 <_malloc_r+0xe4>)
 8004a2a:	f001 fb77 	bl	800611c <__malloc_lock>
 8004a2e:	6833      	ldr	r3, [r6, #0]
 8004a30:	461c      	mov	r4, r3
 8004a32:	bb34      	cbnz	r4, 8004a82 <_malloc_r+0x82>
 8004a34:	4629      	mov	r1, r5
 8004a36:	4638      	mov	r0, r7
 8004a38:	f7ff ffc2 	bl	80049c0 <sbrk_aligned>
 8004a3c:	1c43      	adds	r3, r0, #1
 8004a3e:	4604      	mov	r4, r0
 8004a40:	d14d      	bne.n	8004ade <_malloc_r+0xde>
 8004a42:	6834      	ldr	r4, [r6, #0]
 8004a44:	4626      	mov	r6, r4
 8004a46:	2e00      	cmp	r6, #0
 8004a48:	d140      	bne.n	8004acc <_malloc_r+0xcc>
 8004a4a:	6823      	ldr	r3, [r4, #0]
 8004a4c:	4631      	mov	r1, r6
 8004a4e:	4638      	mov	r0, r7
 8004a50:	eb04 0803 	add.w	r8, r4, r3
 8004a54:	f000 fcb2 	bl	80053bc <_sbrk_r>
 8004a58:	4580      	cmp	r8, r0
 8004a5a:	d13a      	bne.n	8004ad2 <_malloc_r+0xd2>
 8004a5c:	6821      	ldr	r1, [r4, #0]
 8004a5e:	3503      	adds	r5, #3
 8004a60:	1a6d      	subs	r5, r5, r1
 8004a62:	f025 0503 	bic.w	r5, r5, #3
 8004a66:	3508      	adds	r5, #8
 8004a68:	2d0c      	cmp	r5, #12
 8004a6a:	bf38      	it	cc
 8004a6c:	250c      	movcc	r5, #12
 8004a6e:	4629      	mov	r1, r5
 8004a70:	4638      	mov	r0, r7
 8004a72:	f7ff ffa5 	bl	80049c0 <sbrk_aligned>
 8004a76:	3001      	adds	r0, #1
 8004a78:	d02b      	beq.n	8004ad2 <_malloc_r+0xd2>
 8004a7a:	6823      	ldr	r3, [r4, #0]
 8004a7c:	442b      	add	r3, r5
 8004a7e:	6023      	str	r3, [r4, #0]
 8004a80:	e00e      	b.n	8004aa0 <_malloc_r+0xa0>
 8004a82:	6822      	ldr	r2, [r4, #0]
 8004a84:	1b52      	subs	r2, r2, r5
 8004a86:	d41e      	bmi.n	8004ac6 <_malloc_r+0xc6>
 8004a88:	2a0b      	cmp	r2, #11
 8004a8a:	d916      	bls.n	8004aba <_malloc_r+0xba>
 8004a8c:	1961      	adds	r1, r4, r5
 8004a8e:	42a3      	cmp	r3, r4
 8004a90:	6025      	str	r5, [r4, #0]
 8004a92:	bf18      	it	ne
 8004a94:	6059      	strne	r1, [r3, #4]
 8004a96:	6863      	ldr	r3, [r4, #4]
 8004a98:	bf08      	it	eq
 8004a9a:	6031      	streq	r1, [r6, #0]
 8004a9c:	5162      	str	r2, [r4, r5]
 8004a9e:	604b      	str	r3, [r1, #4]
 8004aa0:	4638      	mov	r0, r7
 8004aa2:	f104 060b 	add.w	r6, r4, #11
 8004aa6:	f001 fb3f 	bl	8006128 <__malloc_unlock>
 8004aaa:	f026 0607 	bic.w	r6, r6, #7
 8004aae:	1d23      	adds	r3, r4, #4
 8004ab0:	1af2      	subs	r2, r6, r3
 8004ab2:	d0b6      	beq.n	8004a22 <_malloc_r+0x22>
 8004ab4:	1b9b      	subs	r3, r3, r6
 8004ab6:	50a3      	str	r3, [r4, r2]
 8004ab8:	e7b3      	b.n	8004a22 <_malloc_r+0x22>
 8004aba:	6862      	ldr	r2, [r4, #4]
 8004abc:	42a3      	cmp	r3, r4
 8004abe:	bf0c      	ite	eq
 8004ac0:	6032      	streq	r2, [r6, #0]
 8004ac2:	605a      	strne	r2, [r3, #4]
 8004ac4:	e7ec      	b.n	8004aa0 <_malloc_r+0xa0>
 8004ac6:	4623      	mov	r3, r4
 8004ac8:	6864      	ldr	r4, [r4, #4]
 8004aca:	e7b2      	b.n	8004a32 <_malloc_r+0x32>
 8004acc:	4634      	mov	r4, r6
 8004ace:	6876      	ldr	r6, [r6, #4]
 8004ad0:	e7b9      	b.n	8004a46 <_malloc_r+0x46>
 8004ad2:	230c      	movs	r3, #12
 8004ad4:	603b      	str	r3, [r7, #0]
 8004ad6:	4638      	mov	r0, r7
 8004ad8:	f001 fb26 	bl	8006128 <__malloc_unlock>
 8004adc:	e7a1      	b.n	8004a22 <_malloc_r+0x22>
 8004ade:	6025      	str	r5, [r4, #0]
 8004ae0:	e7de      	b.n	8004aa0 <_malloc_r+0xa0>
 8004ae2:	bf00      	nop
 8004ae4:	200008e8 	.word	0x200008e8

08004ae8 <__cvt>:
 8004ae8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004aec:	ec55 4b10 	vmov	r4, r5, d0
 8004af0:	2d00      	cmp	r5, #0
 8004af2:	460e      	mov	r6, r1
 8004af4:	4619      	mov	r1, r3
 8004af6:	462b      	mov	r3, r5
 8004af8:	bfbb      	ittet	lt
 8004afa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004afe:	461d      	movlt	r5, r3
 8004b00:	2300      	movge	r3, #0
 8004b02:	232d      	movlt	r3, #45	; 0x2d
 8004b04:	700b      	strb	r3, [r1, #0]
 8004b06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b08:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004b0c:	4691      	mov	r9, r2
 8004b0e:	f023 0820 	bic.w	r8, r3, #32
 8004b12:	bfbc      	itt	lt
 8004b14:	4622      	movlt	r2, r4
 8004b16:	4614      	movlt	r4, r2
 8004b18:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004b1c:	d005      	beq.n	8004b2a <__cvt+0x42>
 8004b1e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004b22:	d100      	bne.n	8004b26 <__cvt+0x3e>
 8004b24:	3601      	adds	r6, #1
 8004b26:	2102      	movs	r1, #2
 8004b28:	e000      	b.n	8004b2c <__cvt+0x44>
 8004b2a:	2103      	movs	r1, #3
 8004b2c:	ab03      	add	r3, sp, #12
 8004b2e:	9301      	str	r3, [sp, #4]
 8004b30:	ab02      	add	r3, sp, #8
 8004b32:	9300      	str	r3, [sp, #0]
 8004b34:	ec45 4b10 	vmov	d0, r4, r5
 8004b38:	4653      	mov	r3, sl
 8004b3a:	4632      	mov	r2, r6
 8004b3c:	f000 fcfc 	bl	8005538 <_dtoa_r>
 8004b40:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004b44:	4607      	mov	r7, r0
 8004b46:	d102      	bne.n	8004b4e <__cvt+0x66>
 8004b48:	f019 0f01 	tst.w	r9, #1
 8004b4c:	d022      	beq.n	8004b94 <__cvt+0xac>
 8004b4e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004b52:	eb07 0906 	add.w	r9, r7, r6
 8004b56:	d110      	bne.n	8004b7a <__cvt+0x92>
 8004b58:	783b      	ldrb	r3, [r7, #0]
 8004b5a:	2b30      	cmp	r3, #48	; 0x30
 8004b5c:	d10a      	bne.n	8004b74 <__cvt+0x8c>
 8004b5e:	2200      	movs	r2, #0
 8004b60:	2300      	movs	r3, #0
 8004b62:	4620      	mov	r0, r4
 8004b64:	4629      	mov	r1, r5
 8004b66:	f7fb ffcf 	bl	8000b08 <__aeabi_dcmpeq>
 8004b6a:	b918      	cbnz	r0, 8004b74 <__cvt+0x8c>
 8004b6c:	f1c6 0601 	rsb	r6, r6, #1
 8004b70:	f8ca 6000 	str.w	r6, [sl]
 8004b74:	f8da 3000 	ldr.w	r3, [sl]
 8004b78:	4499      	add	r9, r3
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	4620      	mov	r0, r4
 8004b80:	4629      	mov	r1, r5
 8004b82:	f7fb ffc1 	bl	8000b08 <__aeabi_dcmpeq>
 8004b86:	b108      	cbz	r0, 8004b8c <__cvt+0xa4>
 8004b88:	f8cd 900c 	str.w	r9, [sp, #12]
 8004b8c:	2230      	movs	r2, #48	; 0x30
 8004b8e:	9b03      	ldr	r3, [sp, #12]
 8004b90:	454b      	cmp	r3, r9
 8004b92:	d307      	bcc.n	8004ba4 <__cvt+0xbc>
 8004b94:	9b03      	ldr	r3, [sp, #12]
 8004b96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b98:	1bdb      	subs	r3, r3, r7
 8004b9a:	4638      	mov	r0, r7
 8004b9c:	6013      	str	r3, [r2, #0]
 8004b9e:	b004      	add	sp, #16
 8004ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ba4:	1c59      	adds	r1, r3, #1
 8004ba6:	9103      	str	r1, [sp, #12]
 8004ba8:	701a      	strb	r2, [r3, #0]
 8004baa:	e7f0      	b.n	8004b8e <__cvt+0xa6>

08004bac <__exponent>:
 8004bac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2900      	cmp	r1, #0
 8004bb2:	bfb8      	it	lt
 8004bb4:	4249      	neglt	r1, r1
 8004bb6:	f803 2b02 	strb.w	r2, [r3], #2
 8004bba:	bfb4      	ite	lt
 8004bbc:	222d      	movlt	r2, #45	; 0x2d
 8004bbe:	222b      	movge	r2, #43	; 0x2b
 8004bc0:	2909      	cmp	r1, #9
 8004bc2:	7042      	strb	r2, [r0, #1]
 8004bc4:	dd2a      	ble.n	8004c1c <__exponent+0x70>
 8004bc6:	f10d 0407 	add.w	r4, sp, #7
 8004bca:	46a4      	mov	ip, r4
 8004bcc:	270a      	movs	r7, #10
 8004bce:	46a6      	mov	lr, r4
 8004bd0:	460a      	mov	r2, r1
 8004bd2:	fb91 f6f7 	sdiv	r6, r1, r7
 8004bd6:	fb07 1516 	mls	r5, r7, r6, r1
 8004bda:	3530      	adds	r5, #48	; 0x30
 8004bdc:	2a63      	cmp	r2, #99	; 0x63
 8004bde:	f104 34ff 	add.w	r4, r4, #4294967295
 8004be2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004be6:	4631      	mov	r1, r6
 8004be8:	dcf1      	bgt.n	8004bce <__exponent+0x22>
 8004bea:	3130      	adds	r1, #48	; 0x30
 8004bec:	f1ae 0502 	sub.w	r5, lr, #2
 8004bf0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004bf4:	1c44      	adds	r4, r0, #1
 8004bf6:	4629      	mov	r1, r5
 8004bf8:	4561      	cmp	r1, ip
 8004bfa:	d30a      	bcc.n	8004c12 <__exponent+0x66>
 8004bfc:	f10d 0209 	add.w	r2, sp, #9
 8004c00:	eba2 020e 	sub.w	r2, r2, lr
 8004c04:	4565      	cmp	r5, ip
 8004c06:	bf88      	it	hi
 8004c08:	2200      	movhi	r2, #0
 8004c0a:	4413      	add	r3, r2
 8004c0c:	1a18      	subs	r0, r3, r0
 8004c0e:	b003      	add	sp, #12
 8004c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c16:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004c1a:	e7ed      	b.n	8004bf8 <__exponent+0x4c>
 8004c1c:	2330      	movs	r3, #48	; 0x30
 8004c1e:	3130      	adds	r1, #48	; 0x30
 8004c20:	7083      	strb	r3, [r0, #2]
 8004c22:	70c1      	strb	r1, [r0, #3]
 8004c24:	1d03      	adds	r3, r0, #4
 8004c26:	e7f1      	b.n	8004c0c <__exponent+0x60>

08004c28 <_printf_float>:
 8004c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c2c:	ed2d 8b02 	vpush	{d8}
 8004c30:	b08d      	sub	sp, #52	; 0x34
 8004c32:	460c      	mov	r4, r1
 8004c34:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004c38:	4616      	mov	r6, r2
 8004c3a:	461f      	mov	r7, r3
 8004c3c:	4605      	mov	r5, r0
 8004c3e:	f001 fa69 	bl	8006114 <_localeconv_r>
 8004c42:	f8d0 a000 	ldr.w	sl, [r0]
 8004c46:	4650      	mov	r0, sl
 8004c48:	f7fb fae2 	bl	8000210 <strlen>
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	930a      	str	r3, [sp, #40]	; 0x28
 8004c50:	6823      	ldr	r3, [r4, #0]
 8004c52:	9305      	str	r3, [sp, #20]
 8004c54:	f8d8 3000 	ldr.w	r3, [r8]
 8004c58:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004c5c:	3307      	adds	r3, #7
 8004c5e:	f023 0307 	bic.w	r3, r3, #7
 8004c62:	f103 0208 	add.w	r2, r3, #8
 8004c66:	f8c8 2000 	str.w	r2, [r8]
 8004c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004c72:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004c76:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004c7a:	9307      	str	r3, [sp, #28]
 8004c7c:	f8cd 8018 	str.w	r8, [sp, #24]
 8004c80:	ee08 0a10 	vmov	s16, r0
 8004c84:	4b9f      	ldr	r3, [pc, #636]	; (8004f04 <_printf_float+0x2dc>)
 8004c86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c8e:	f7fb ff6d 	bl	8000b6c <__aeabi_dcmpun>
 8004c92:	bb88      	cbnz	r0, 8004cf8 <_printf_float+0xd0>
 8004c94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c98:	4b9a      	ldr	r3, [pc, #616]	; (8004f04 <_printf_float+0x2dc>)
 8004c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c9e:	f7fb ff47 	bl	8000b30 <__aeabi_dcmple>
 8004ca2:	bb48      	cbnz	r0, 8004cf8 <_printf_float+0xd0>
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	4640      	mov	r0, r8
 8004caa:	4649      	mov	r1, r9
 8004cac:	f7fb ff36 	bl	8000b1c <__aeabi_dcmplt>
 8004cb0:	b110      	cbz	r0, 8004cb8 <_printf_float+0x90>
 8004cb2:	232d      	movs	r3, #45	; 0x2d
 8004cb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cb8:	4b93      	ldr	r3, [pc, #588]	; (8004f08 <_printf_float+0x2e0>)
 8004cba:	4894      	ldr	r0, [pc, #592]	; (8004f0c <_printf_float+0x2e4>)
 8004cbc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004cc0:	bf94      	ite	ls
 8004cc2:	4698      	movls	r8, r3
 8004cc4:	4680      	movhi	r8, r0
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	6123      	str	r3, [r4, #16]
 8004cca:	9b05      	ldr	r3, [sp, #20]
 8004ccc:	f023 0204 	bic.w	r2, r3, #4
 8004cd0:	6022      	str	r2, [r4, #0]
 8004cd2:	f04f 0900 	mov.w	r9, #0
 8004cd6:	9700      	str	r7, [sp, #0]
 8004cd8:	4633      	mov	r3, r6
 8004cda:	aa0b      	add	r2, sp, #44	; 0x2c
 8004cdc:	4621      	mov	r1, r4
 8004cde:	4628      	mov	r0, r5
 8004ce0:	f000 f9d8 	bl	8005094 <_printf_common>
 8004ce4:	3001      	adds	r0, #1
 8004ce6:	f040 8090 	bne.w	8004e0a <_printf_float+0x1e2>
 8004cea:	f04f 30ff 	mov.w	r0, #4294967295
 8004cee:	b00d      	add	sp, #52	; 0x34
 8004cf0:	ecbd 8b02 	vpop	{d8}
 8004cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cf8:	4642      	mov	r2, r8
 8004cfa:	464b      	mov	r3, r9
 8004cfc:	4640      	mov	r0, r8
 8004cfe:	4649      	mov	r1, r9
 8004d00:	f7fb ff34 	bl	8000b6c <__aeabi_dcmpun>
 8004d04:	b140      	cbz	r0, 8004d18 <_printf_float+0xf0>
 8004d06:	464b      	mov	r3, r9
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	bfbc      	itt	lt
 8004d0c:	232d      	movlt	r3, #45	; 0x2d
 8004d0e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004d12:	487f      	ldr	r0, [pc, #508]	; (8004f10 <_printf_float+0x2e8>)
 8004d14:	4b7f      	ldr	r3, [pc, #508]	; (8004f14 <_printf_float+0x2ec>)
 8004d16:	e7d1      	b.n	8004cbc <_printf_float+0x94>
 8004d18:	6863      	ldr	r3, [r4, #4]
 8004d1a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004d1e:	9206      	str	r2, [sp, #24]
 8004d20:	1c5a      	adds	r2, r3, #1
 8004d22:	d13f      	bne.n	8004da4 <_printf_float+0x17c>
 8004d24:	2306      	movs	r3, #6
 8004d26:	6063      	str	r3, [r4, #4]
 8004d28:	9b05      	ldr	r3, [sp, #20]
 8004d2a:	6861      	ldr	r1, [r4, #4]
 8004d2c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004d30:	2300      	movs	r3, #0
 8004d32:	9303      	str	r3, [sp, #12]
 8004d34:	ab0a      	add	r3, sp, #40	; 0x28
 8004d36:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004d3a:	ab09      	add	r3, sp, #36	; 0x24
 8004d3c:	ec49 8b10 	vmov	d0, r8, r9
 8004d40:	9300      	str	r3, [sp, #0]
 8004d42:	6022      	str	r2, [r4, #0]
 8004d44:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004d48:	4628      	mov	r0, r5
 8004d4a:	f7ff fecd 	bl	8004ae8 <__cvt>
 8004d4e:	9b06      	ldr	r3, [sp, #24]
 8004d50:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d52:	2b47      	cmp	r3, #71	; 0x47
 8004d54:	4680      	mov	r8, r0
 8004d56:	d108      	bne.n	8004d6a <_printf_float+0x142>
 8004d58:	1cc8      	adds	r0, r1, #3
 8004d5a:	db02      	blt.n	8004d62 <_printf_float+0x13a>
 8004d5c:	6863      	ldr	r3, [r4, #4]
 8004d5e:	4299      	cmp	r1, r3
 8004d60:	dd41      	ble.n	8004de6 <_printf_float+0x1be>
 8004d62:	f1ab 0b02 	sub.w	fp, fp, #2
 8004d66:	fa5f fb8b 	uxtb.w	fp, fp
 8004d6a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004d6e:	d820      	bhi.n	8004db2 <_printf_float+0x18a>
 8004d70:	3901      	subs	r1, #1
 8004d72:	465a      	mov	r2, fp
 8004d74:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004d78:	9109      	str	r1, [sp, #36]	; 0x24
 8004d7a:	f7ff ff17 	bl	8004bac <__exponent>
 8004d7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d80:	1813      	adds	r3, r2, r0
 8004d82:	2a01      	cmp	r2, #1
 8004d84:	4681      	mov	r9, r0
 8004d86:	6123      	str	r3, [r4, #16]
 8004d88:	dc02      	bgt.n	8004d90 <_printf_float+0x168>
 8004d8a:	6822      	ldr	r2, [r4, #0]
 8004d8c:	07d2      	lsls	r2, r2, #31
 8004d8e:	d501      	bpl.n	8004d94 <_printf_float+0x16c>
 8004d90:	3301      	adds	r3, #1
 8004d92:	6123      	str	r3, [r4, #16]
 8004d94:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d09c      	beq.n	8004cd6 <_printf_float+0xae>
 8004d9c:	232d      	movs	r3, #45	; 0x2d
 8004d9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004da2:	e798      	b.n	8004cd6 <_printf_float+0xae>
 8004da4:	9a06      	ldr	r2, [sp, #24]
 8004da6:	2a47      	cmp	r2, #71	; 0x47
 8004da8:	d1be      	bne.n	8004d28 <_printf_float+0x100>
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1bc      	bne.n	8004d28 <_printf_float+0x100>
 8004dae:	2301      	movs	r3, #1
 8004db0:	e7b9      	b.n	8004d26 <_printf_float+0xfe>
 8004db2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004db6:	d118      	bne.n	8004dea <_printf_float+0x1c2>
 8004db8:	2900      	cmp	r1, #0
 8004dba:	6863      	ldr	r3, [r4, #4]
 8004dbc:	dd0b      	ble.n	8004dd6 <_printf_float+0x1ae>
 8004dbe:	6121      	str	r1, [r4, #16]
 8004dc0:	b913      	cbnz	r3, 8004dc8 <_printf_float+0x1a0>
 8004dc2:	6822      	ldr	r2, [r4, #0]
 8004dc4:	07d0      	lsls	r0, r2, #31
 8004dc6:	d502      	bpl.n	8004dce <_printf_float+0x1a6>
 8004dc8:	3301      	adds	r3, #1
 8004dca:	440b      	add	r3, r1
 8004dcc:	6123      	str	r3, [r4, #16]
 8004dce:	65a1      	str	r1, [r4, #88]	; 0x58
 8004dd0:	f04f 0900 	mov.w	r9, #0
 8004dd4:	e7de      	b.n	8004d94 <_printf_float+0x16c>
 8004dd6:	b913      	cbnz	r3, 8004dde <_printf_float+0x1b6>
 8004dd8:	6822      	ldr	r2, [r4, #0]
 8004dda:	07d2      	lsls	r2, r2, #31
 8004ddc:	d501      	bpl.n	8004de2 <_printf_float+0x1ba>
 8004dde:	3302      	adds	r3, #2
 8004de0:	e7f4      	b.n	8004dcc <_printf_float+0x1a4>
 8004de2:	2301      	movs	r3, #1
 8004de4:	e7f2      	b.n	8004dcc <_printf_float+0x1a4>
 8004de6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004dea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004dec:	4299      	cmp	r1, r3
 8004dee:	db05      	blt.n	8004dfc <_printf_float+0x1d4>
 8004df0:	6823      	ldr	r3, [r4, #0]
 8004df2:	6121      	str	r1, [r4, #16]
 8004df4:	07d8      	lsls	r0, r3, #31
 8004df6:	d5ea      	bpl.n	8004dce <_printf_float+0x1a6>
 8004df8:	1c4b      	adds	r3, r1, #1
 8004dfa:	e7e7      	b.n	8004dcc <_printf_float+0x1a4>
 8004dfc:	2900      	cmp	r1, #0
 8004dfe:	bfd4      	ite	le
 8004e00:	f1c1 0202 	rsble	r2, r1, #2
 8004e04:	2201      	movgt	r2, #1
 8004e06:	4413      	add	r3, r2
 8004e08:	e7e0      	b.n	8004dcc <_printf_float+0x1a4>
 8004e0a:	6823      	ldr	r3, [r4, #0]
 8004e0c:	055a      	lsls	r2, r3, #21
 8004e0e:	d407      	bmi.n	8004e20 <_printf_float+0x1f8>
 8004e10:	6923      	ldr	r3, [r4, #16]
 8004e12:	4642      	mov	r2, r8
 8004e14:	4631      	mov	r1, r6
 8004e16:	4628      	mov	r0, r5
 8004e18:	47b8      	blx	r7
 8004e1a:	3001      	adds	r0, #1
 8004e1c:	d12c      	bne.n	8004e78 <_printf_float+0x250>
 8004e1e:	e764      	b.n	8004cea <_printf_float+0xc2>
 8004e20:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004e24:	f240 80e0 	bls.w	8004fe8 <_printf_float+0x3c0>
 8004e28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	2300      	movs	r3, #0
 8004e30:	f7fb fe6a 	bl	8000b08 <__aeabi_dcmpeq>
 8004e34:	2800      	cmp	r0, #0
 8004e36:	d034      	beq.n	8004ea2 <_printf_float+0x27a>
 8004e38:	4a37      	ldr	r2, [pc, #220]	; (8004f18 <_printf_float+0x2f0>)
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	4631      	mov	r1, r6
 8004e3e:	4628      	mov	r0, r5
 8004e40:	47b8      	blx	r7
 8004e42:	3001      	adds	r0, #1
 8004e44:	f43f af51 	beq.w	8004cea <_printf_float+0xc2>
 8004e48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	db02      	blt.n	8004e56 <_printf_float+0x22e>
 8004e50:	6823      	ldr	r3, [r4, #0]
 8004e52:	07d8      	lsls	r0, r3, #31
 8004e54:	d510      	bpl.n	8004e78 <_printf_float+0x250>
 8004e56:	ee18 3a10 	vmov	r3, s16
 8004e5a:	4652      	mov	r2, sl
 8004e5c:	4631      	mov	r1, r6
 8004e5e:	4628      	mov	r0, r5
 8004e60:	47b8      	blx	r7
 8004e62:	3001      	adds	r0, #1
 8004e64:	f43f af41 	beq.w	8004cea <_printf_float+0xc2>
 8004e68:	f04f 0800 	mov.w	r8, #0
 8004e6c:	f104 091a 	add.w	r9, r4, #26
 8004e70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e72:	3b01      	subs	r3, #1
 8004e74:	4543      	cmp	r3, r8
 8004e76:	dc09      	bgt.n	8004e8c <_printf_float+0x264>
 8004e78:	6823      	ldr	r3, [r4, #0]
 8004e7a:	079b      	lsls	r3, r3, #30
 8004e7c:	f100 8105 	bmi.w	800508a <_printf_float+0x462>
 8004e80:	68e0      	ldr	r0, [r4, #12]
 8004e82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e84:	4298      	cmp	r0, r3
 8004e86:	bfb8      	it	lt
 8004e88:	4618      	movlt	r0, r3
 8004e8a:	e730      	b.n	8004cee <_printf_float+0xc6>
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	464a      	mov	r2, r9
 8004e90:	4631      	mov	r1, r6
 8004e92:	4628      	mov	r0, r5
 8004e94:	47b8      	blx	r7
 8004e96:	3001      	adds	r0, #1
 8004e98:	f43f af27 	beq.w	8004cea <_printf_float+0xc2>
 8004e9c:	f108 0801 	add.w	r8, r8, #1
 8004ea0:	e7e6      	b.n	8004e70 <_printf_float+0x248>
 8004ea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	dc39      	bgt.n	8004f1c <_printf_float+0x2f4>
 8004ea8:	4a1b      	ldr	r2, [pc, #108]	; (8004f18 <_printf_float+0x2f0>)
 8004eaa:	2301      	movs	r3, #1
 8004eac:	4631      	mov	r1, r6
 8004eae:	4628      	mov	r0, r5
 8004eb0:	47b8      	blx	r7
 8004eb2:	3001      	adds	r0, #1
 8004eb4:	f43f af19 	beq.w	8004cea <_printf_float+0xc2>
 8004eb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	d102      	bne.n	8004ec6 <_printf_float+0x29e>
 8004ec0:	6823      	ldr	r3, [r4, #0]
 8004ec2:	07d9      	lsls	r1, r3, #31
 8004ec4:	d5d8      	bpl.n	8004e78 <_printf_float+0x250>
 8004ec6:	ee18 3a10 	vmov	r3, s16
 8004eca:	4652      	mov	r2, sl
 8004ecc:	4631      	mov	r1, r6
 8004ece:	4628      	mov	r0, r5
 8004ed0:	47b8      	blx	r7
 8004ed2:	3001      	adds	r0, #1
 8004ed4:	f43f af09 	beq.w	8004cea <_printf_float+0xc2>
 8004ed8:	f04f 0900 	mov.w	r9, #0
 8004edc:	f104 0a1a 	add.w	sl, r4, #26
 8004ee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ee2:	425b      	negs	r3, r3
 8004ee4:	454b      	cmp	r3, r9
 8004ee6:	dc01      	bgt.n	8004eec <_printf_float+0x2c4>
 8004ee8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004eea:	e792      	b.n	8004e12 <_printf_float+0x1ea>
 8004eec:	2301      	movs	r3, #1
 8004eee:	4652      	mov	r2, sl
 8004ef0:	4631      	mov	r1, r6
 8004ef2:	4628      	mov	r0, r5
 8004ef4:	47b8      	blx	r7
 8004ef6:	3001      	adds	r0, #1
 8004ef8:	f43f aef7 	beq.w	8004cea <_printf_float+0xc2>
 8004efc:	f109 0901 	add.w	r9, r9, #1
 8004f00:	e7ee      	b.n	8004ee0 <_printf_float+0x2b8>
 8004f02:	bf00      	nop
 8004f04:	7fefffff 	.word	0x7fefffff
 8004f08:	08007ce8 	.word	0x08007ce8
 8004f0c:	08007cec 	.word	0x08007cec
 8004f10:	08007cf4 	.word	0x08007cf4
 8004f14:	08007cf0 	.word	0x08007cf0
 8004f18:	08007cf8 	.word	0x08007cf8
 8004f1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f20:	429a      	cmp	r2, r3
 8004f22:	bfa8      	it	ge
 8004f24:	461a      	movge	r2, r3
 8004f26:	2a00      	cmp	r2, #0
 8004f28:	4691      	mov	r9, r2
 8004f2a:	dc37      	bgt.n	8004f9c <_printf_float+0x374>
 8004f2c:	f04f 0b00 	mov.w	fp, #0
 8004f30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f34:	f104 021a 	add.w	r2, r4, #26
 8004f38:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f3a:	9305      	str	r3, [sp, #20]
 8004f3c:	eba3 0309 	sub.w	r3, r3, r9
 8004f40:	455b      	cmp	r3, fp
 8004f42:	dc33      	bgt.n	8004fac <_printf_float+0x384>
 8004f44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	db3b      	blt.n	8004fc4 <_printf_float+0x39c>
 8004f4c:	6823      	ldr	r3, [r4, #0]
 8004f4e:	07da      	lsls	r2, r3, #31
 8004f50:	d438      	bmi.n	8004fc4 <_printf_float+0x39c>
 8004f52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f54:	9a05      	ldr	r2, [sp, #20]
 8004f56:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f58:	1a9a      	subs	r2, r3, r2
 8004f5a:	eba3 0901 	sub.w	r9, r3, r1
 8004f5e:	4591      	cmp	r9, r2
 8004f60:	bfa8      	it	ge
 8004f62:	4691      	movge	r9, r2
 8004f64:	f1b9 0f00 	cmp.w	r9, #0
 8004f68:	dc35      	bgt.n	8004fd6 <_printf_float+0x3ae>
 8004f6a:	f04f 0800 	mov.w	r8, #0
 8004f6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f72:	f104 0a1a 	add.w	sl, r4, #26
 8004f76:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f7a:	1a9b      	subs	r3, r3, r2
 8004f7c:	eba3 0309 	sub.w	r3, r3, r9
 8004f80:	4543      	cmp	r3, r8
 8004f82:	f77f af79 	ble.w	8004e78 <_printf_float+0x250>
 8004f86:	2301      	movs	r3, #1
 8004f88:	4652      	mov	r2, sl
 8004f8a:	4631      	mov	r1, r6
 8004f8c:	4628      	mov	r0, r5
 8004f8e:	47b8      	blx	r7
 8004f90:	3001      	adds	r0, #1
 8004f92:	f43f aeaa 	beq.w	8004cea <_printf_float+0xc2>
 8004f96:	f108 0801 	add.w	r8, r8, #1
 8004f9a:	e7ec      	b.n	8004f76 <_printf_float+0x34e>
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	4631      	mov	r1, r6
 8004fa0:	4642      	mov	r2, r8
 8004fa2:	4628      	mov	r0, r5
 8004fa4:	47b8      	blx	r7
 8004fa6:	3001      	adds	r0, #1
 8004fa8:	d1c0      	bne.n	8004f2c <_printf_float+0x304>
 8004faa:	e69e      	b.n	8004cea <_printf_float+0xc2>
 8004fac:	2301      	movs	r3, #1
 8004fae:	4631      	mov	r1, r6
 8004fb0:	4628      	mov	r0, r5
 8004fb2:	9205      	str	r2, [sp, #20]
 8004fb4:	47b8      	blx	r7
 8004fb6:	3001      	adds	r0, #1
 8004fb8:	f43f ae97 	beq.w	8004cea <_printf_float+0xc2>
 8004fbc:	9a05      	ldr	r2, [sp, #20]
 8004fbe:	f10b 0b01 	add.w	fp, fp, #1
 8004fc2:	e7b9      	b.n	8004f38 <_printf_float+0x310>
 8004fc4:	ee18 3a10 	vmov	r3, s16
 8004fc8:	4652      	mov	r2, sl
 8004fca:	4631      	mov	r1, r6
 8004fcc:	4628      	mov	r0, r5
 8004fce:	47b8      	blx	r7
 8004fd0:	3001      	adds	r0, #1
 8004fd2:	d1be      	bne.n	8004f52 <_printf_float+0x32a>
 8004fd4:	e689      	b.n	8004cea <_printf_float+0xc2>
 8004fd6:	9a05      	ldr	r2, [sp, #20]
 8004fd8:	464b      	mov	r3, r9
 8004fda:	4442      	add	r2, r8
 8004fdc:	4631      	mov	r1, r6
 8004fde:	4628      	mov	r0, r5
 8004fe0:	47b8      	blx	r7
 8004fe2:	3001      	adds	r0, #1
 8004fe4:	d1c1      	bne.n	8004f6a <_printf_float+0x342>
 8004fe6:	e680      	b.n	8004cea <_printf_float+0xc2>
 8004fe8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004fea:	2a01      	cmp	r2, #1
 8004fec:	dc01      	bgt.n	8004ff2 <_printf_float+0x3ca>
 8004fee:	07db      	lsls	r3, r3, #31
 8004ff0:	d538      	bpl.n	8005064 <_printf_float+0x43c>
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	4642      	mov	r2, r8
 8004ff6:	4631      	mov	r1, r6
 8004ff8:	4628      	mov	r0, r5
 8004ffa:	47b8      	blx	r7
 8004ffc:	3001      	adds	r0, #1
 8004ffe:	f43f ae74 	beq.w	8004cea <_printf_float+0xc2>
 8005002:	ee18 3a10 	vmov	r3, s16
 8005006:	4652      	mov	r2, sl
 8005008:	4631      	mov	r1, r6
 800500a:	4628      	mov	r0, r5
 800500c:	47b8      	blx	r7
 800500e:	3001      	adds	r0, #1
 8005010:	f43f ae6b 	beq.w	8004cea <_printf_float+0xc2>
 8005014:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005018:	2200      	movs	r2, #0
 800501a:	2300      	movs	r3, #0
 800501c:	f7fb fd74 	bl	8000b08 <__aeabi_dcmpeq>
 8005020:	b9d8      	cbnz	r0, 800505a <_printf_float+0x432>
 8005022:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005024:	f108 0201 	add.w	r2, r8, #1
 8005028:	3b01      	subs	r3, #1
 800502a:	4631      	mov	r1, r6
 800502c:	4628      	mov	r0, r5
 800502e:	47b8      	blx	r7
 8005030:	3001      	adds	r0, #1
 8005032:	d10e      	bne.n	8005052 <_printf_float+0x42a>
 8005034:	e659      	b.n	8004cea <_printf_float+0xc2>
 8005036:	2301      	movs	r3, #1
 8005038:	4652      	mov	r2, sl
 800503a:	4631      	mov	r1, r6
 800503c:	4628      	mov	r0, r5
 800503e:	47b8      	blx	r7
 8005040:	3001      	adds	r0, #1
 8005042:	f43f ae52 	beq.w	8004cea <_printf_float+0xc2>
 8005046:	f108 0801 	add.w	r8, r8, #1
 800504a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800504c:	3b01      	subs	r3, #1
 800504e:	4543      	cmp	r3, r8
 8005050:	dcf1      	bgt.n	8005036 <_printf_float+0x40e>
 8005052:	464b      	mov	r3, r9
 8005054:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005058:	e6dc      	b.n	8004e14 <_printf_float+0x1ec>
 800505a:	f04f 0800 	mov.w	r8, #0
 800505e:	f104 0a1a 	add.w	sl, r4, #26
 8005062:	e7f2      	b.n	800504a <_printf_float+0x422>
 8005064:	2301      	movs	r3, #1
 8005066:	4642      	mov	r2, r8
 8005068:	e7df      	b.n	800502a <_printf_float+0x402>
 800506a:	2301      	movs	r3, #1
 800506c:	464a      	mov	r2, r9
 800506e:	4631      	mov	r1, r6
 8005070:	4628      	mov	r0, r5
 8005072:	47b8      	blx	r7
 8005074:	3001      	adds	r0, #1
 8005076:	f43f ae38 	beq.w	8004cea <_printf_float+0xc2>
 800507a:	f108 0801 	add.w	r8, r8, #1
 800507e:	68e3      	ldr	r3, [r4, #12]
 8005080:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005082:	1a5b      	subs	r3, r3, r1
 8005084:	4543      	cmp	r3, r8
 8005086:	dcf0      	bgt.n	800506a <_printf_float+0x442>
 8005088:	e6fa      	b.n	8004e80 <_printf_float+0x258>
 800508a:	f04f 0800 	mov.w	r8, #0
 800508e:	f104 0919 	add.w	r9, r4, #25
 8005092:	e7f4      	b.n	800507e <_printf_float+0x456>

08005094 <_printf_common>:
 8005094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005098:	4616      	mov	r6, r2
 800509a:	4699      	mov	r9, r3
 800509c:	688a      	ldr	r2, [r1, #8]
 800509e:	690b      	ldr	r3, [r1, #16]
 80050a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050a4:	4293      	cmp	r3, r2
 80050a6:	bfb8      	it	lt
 80050a8:	4613      	movlt	r3, r2
 80050aa:	6033      	str	r3, [r6, #0]
 80050ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80050b0:	4607      	mov	r7, r0
 80050b2:	460c      	mov	r4, r1
 80050b4:	b10a      	cbz	r2, 80050ba <_printf_common+0x26>
 80050b6:	3301      	adds	r3, #1
 80050b8:	6033      	str	r3, [r6, #0]
 80050ba:	6823      	ldr	r3, [r4, #0]
 80050bc:	0699      	lsls	r1, r3, #26
 80050be:	bf42      	ittt	mi
 80050c0:	6833      	ldrmi	r3, [r6, #0]
 80050c2:	3302      	addmi	r3, #2
 80050c4:	6033      	strmi	r3, [r6, #0]
 80050c6:	6825      	ldr	r5, [r4, #0]
 80050c8:	f015 0506 	ands.w	r5, r5, #6
 80050cc:	d106      	bne.n	80050dc <_printf_common+0x48>
 80050ce:	f104 0a19 	add.w	sl, r4, #25
 80050d2:	68e3      	ldr	r3, [r4, #12]
 80050d4:	6832      	ldr	r2, [r6, #0]
 80050d6:	1a9b      	subs	r3, r3, r2
 80050d8:	42ab      	cmp	r3, r5
 80050da:	dc26      	bgt.n	800512a <_printf_common+0x96>
 80050dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80050e0:	1e13      	subs	r3, r2, #0
 80050e2:	6822      	ldr	r2, [r4, #0]
 80050e4:	bf18      	it	ne
 80050e6:	2301      	movne	r3, #1
 80050e8:	0692      	lsls	r2, r2, #26
 80050ea:	d42b      	bmi.n	8005144 <_printf_common+0xb0>
 80050ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050f0:	4649      	mov	r1, r9
 80050f2:	4638      	mov	r0, r7
 80050f4:	47c0      	blx	r8
 80050f6:	3001      	adds	r0, #1
 80050f8:	d01e      	beq.n	8005138 <_printf_common+0xa4>
 80050fa:	6823      	ldr	r3, [r4, #0]
 80050fc:	68e5      	ldr	r5, [r4, #12]
 80050fe:	6832      	ldr	r2, [r6, #0]
 8005100:	f003 0306 	and.w	r3, r3, #6
 8005104:	2b04      	cmp	r3, #4
 8005106:	bf08      	it	eq
 8005108:	1aad      	subeq	r5, r5, r2
 800510a:	68a3      	ldr	r3, [r4, #8]
 800510c:	6922      	ldr	r2, [r4, #16]
 800510e:	bf0c      	ite	eq
 8005110:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005114:	2500      	movne	r5, #0
 8005116:	4293      	cmp	r3, r2
 8005118:	bfc4      	itt	gt
 800511a:	1a9b      	subgt	r3, r3, r2
 800511c:	18ed      	addgt	r5, r5, r3
 800511e:	2600      	movs	r6, #0
 8005120:	341a      	adds	r4, #26
 8005122:	42b5      	cmp	r5, r6
 8005124:	d11a      	bne.n	800515c <_printf_common+0xc8>
 8005126:	2000      	movs	r0, #0
 8005128:	e008      	b.n	800513c <_printf_common+0xa8>
 800512a:	2301      	movs	r3, #1
 800512c:	4652      	mov	r2, sl
 800512e:	4649      	mov	r1, r9
 8005130:	4638      	mov	r0, r7
 8005132:	47c0      	blx	r8
 8005134:	3001      	adds	r0, #1
 8005136:	d103      	bne.n	8005140 <_printf_common+0xac>
 8005138:	f04f 30ff 	mov.w	r0, #4294967295
 800513c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005140:	3501      	adds	r5, #1
 8005142:	e7c6      	b.n	80050d2 <_printf_common+0x3e>
 8005144:	18e1      	adds	r1, r4, r3
 8005146:	1c5a      	adds	r2, r3, #1
 8005148:	2030      	movs	r0, #48	; 0x30
 800514a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800514e:	4422      	add	r2, r4
 8005150:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005154:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005158:	3302      	adds	r3, #2
 800515a:	e7c7      	b.n	80050ec <_printf_common+0x58>
 800515c:	2301      	movs	r3, #1
 800515e:	4622      	mov	r2, r4
 8005160:	4649      	mov	r1, r9
 8005162:	4638      	mov	r0, r7
 8005164:	47c0      	blx	r8
 8005166:	3001      	adds	r0, #1
 8005168:	d0e6      	beq.n	8005138 <_printf_common+0xa4>
 800516a:	3601      	adds	r6, #1
 800516c:	e7d9      	b.n	8005122 <_printf_common+0x8e>
	...

08005170 <_printf_i>:
 8005170:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005174:	7e0f      	ldrb	r7, [r1, #24]
 8005176:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005178:	2f78      	cmp	r7, #120	; 0x78
 800517a:	4691      	mov	r9, r2
 800517c:	4680      	mov	r8, r0
 800517e:	460c      	mov	r4, r1
 8005180:	469a      	mov	sl, r3
 8005182:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005186:	d807      	bhi.n	8005198 <_printf_i+0x28>
 8005188:	2f62      	cmp	r7, #98	; 0x62
 800518a:	d80a      	bhi.n	80051a2 <_printf_i+0x32>
 800518c:	2f00      	cmp	r7, #0
 800518e:	f000 80d8 	beq.w	8005342 <_printf_i+0x1d2>
 8005192:	2f58      	cmp	r7, #88	; 0x58
 8005194:	f000 80a3 	beq.w	80052de <_printf_i+0x16e>
 8005198:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800519c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80051a0:	e03a      	b.n	8005218 <_printf_i+0xa8>
 80051a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80051a6:	2b15      	cmp	r3, #21
 80051a8:	d8f6      	bhi.n	8005198 <_printf_i+0x28>
 80051aa:	a101      	add	r1, pc, #4	; (adr r1, 80051b0 <_printf_i+0x40>)
 80051ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80051b0:	08005209 	.word	0x08005209
 80051b4:	0800521d 	.word	0x0800521d
 80051b8:	08005199 	.word	0x08005199
 80051bc:	08005199 	.word	0x08005199
 80051c0:	08005199 	.word	0x08005199
 80051c4:	08005199 	.word	0x08005199
 80051c8:	0800521d 	.word	0x0800521d
 80051cc:	08005199 	.word	0x08005199
 80051d0:	08005199 	.word	0x08005199
 80051d4:	08005199 	.word	0x08005199
 80051d8:	08005199 	.word	0x08005199
 80051dc:	08005329 	.word	0x08005329
 80051e0:	0800524d 	.word	0x0800524d
 80051e4:	0800530b 	.word	0x0800530b
 80051e8:	08005199 	.word	0x08005199
 80051ec:	08005199 	.word	0x08005199
 80051f0:	0800534b 	.word	0x0800534b
 80051f4:	08005199 	.word	0x08005199
 80051f8:	0800524d 	.word	0x0800524d
 80051fc:	08005199 	.word	0x08005199
 8005200:	08005199 	.word	0x08005199
 8005204:	08005313 	.word	0x08005313
 8005208:	682b      	ldr	r3, [r5, #0]
 800520a:	1d1a      	adds	r2, r3, #4
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	602a      	str	r2, [r5, #0]
 8005210:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005214:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005218:	2301      	movs	r3, #1
 800521a:	e0a3      	b.n	8005364 <_printf_i+0x1f4>
 800521c:	6820      	ldr	r0, [r4, #0]
 800521e:	6829      	ldr	r1, [r5, #0]
 8005220:	0606      	lsls	r6, r0, #24
 8005222:	f101 0304 	add.w	r3, r1, #4
 8005226:	d50a      	bpl.n	800523e <_printf_i+0xce>
 8005228:	680e      	ldr	r6, [r1, #0]
 800522a:	602b      	str	r3, [r5, #0]
 800522c:	2e00      	cmp	r6, #0
 800522e:	da03      	bge.n	8005238 <_printf_i+0xc8>
 8005230:	232d      	movs	r3, #45	; 0x2d
 8005232:	4276      	negs	r6, r6
 8005234:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005238:	485e      	ldr	r0, [pc, #376]	; (80053b4 <_printf_i+0x244>)
 800523a:	230a      	movs	r3, #10
 800523c:	e019      	b.n	8005272 <_printf_i+0x102>
 800523e:	680e      	ldr	r6, [r1, #0]
 8005240:	602b      	str	r3, [r5, #0]
 8005242:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005246:	bf18      	it	ne
 8005248:	b236      	sxthne	r6, r6
 800524a:	e7ef      	b.n	800522c <_printf_i+0xbc>
 800524c:	682b      	ldr	r3, [r5, #0]
 800524e:	6820      	ldr	r0, [r4, #0]
 8005250:	1d19      	adds	r1, r3, #4
 8005252:	6029      	str	r1, [r5, #0]
 8005254:	0601      	lsls	r1, r0, #24
 8005256:	d501      	bpl.n	800525c <_printf_i+0xec>
 8005258:	681e      	ldr	r6, [r3, #0]
 800525a:	e002      	b.n	8005262 <_printf_i+0xf2>
 800525c:	0646      	lsls	r6, r0, #25
 800525e:	d5fb      	bpl.n	8005258 <_printf_i+0xe8>
 8005260:	881e      	ldrh	r6, [r3, #0]
 8005262:	4854      	ldr	r0, [pc, #336]	; (80053b4 <_printf_i+0x244>)
 8005264:	2f6f      	cmp	r7, #111	; 0x6f
 8005266:	bf0c      	ite	eq
 8005268:	2308      	moveq	r3, #8
 800526a:	230a      	movne	r3, #10
 800526c:	2100      	movs	r1, #0
 800526e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005272:	6865      	ldr	r5, [r4, #4]
 8005274:	60a5      	str	r5, [r4, #8]
 8005276:	2d00      	cmp	r5, #0
 8005278:	bfa2      	ittt	ge
 800527a:	6821      	ldrge	r1, [r4, #0]
 800527c:	f021 0104 	bicge.w	r1, r1, #4
 8005280:	6021      	strge	r1, [r4, #0]
 8005282:	b90e      	cbnz	r6, 8005288 <_printf_i+0x118>
 8005284:	2d00      	cmp	r5, #0
 8005286:	d04d      	beq.n	8005324 <_printf_i+0x1b4>
 8005288:	4615      	mov	r5, r2
 800528a:	fbb6 f1f3 	udiv	r1, r6, r3
 800528e:	fb03 6711 	mls	r7, r3, r1, r6
 8005292:	5dc7      	ldrb	r7, [r0, r7]
 8005294:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005298:	4637      	mov	r7, r6
 800529a:	42bb      	cmp	r3, r7
 800529c:	460e      	mov	r6, r1
 800529e:	d9f4      	bls.n	800528a <_printf_i+0x11a>
 80052a0:	2b08      	cmp	r3, #8
 80052a2:	d10b      	bne.n	80052bc <_printf_i+0x14c>
 80052a4:	6823      	ldr	r3, [r4, #0]
 80052a6:	07de      	lsls	r6, r3, #31
 80052a8:	d508      	bpl.n	80052bc <_printf_i+0x14c>
 80052aa:	6923      	ldr	r3, [r4, #16]
 80052ac:	6861      	ldr	r1, [r4, #4]
 80052ae:	4299      	cmp	r1, r3
 80052b0:	bfde      	ittt	le
 80052b2:	2330      	movle	r3, #48	; 0x30
 80052b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80052b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80052bc:	1b52      	subs	r2, r2, r5
 80052be:	6122      	str	r2, [r4, #16]
 80052c0:	f8cd a000 	str.w	sl, [sp]
 80052c4:	464b      	mov	r3, r9
 80052c6:	aa03      	add	r2, sp, #12
 80052c8:	4621      	mov	r1, r4
 80052ca:	4640      	mov	r0, r8
 80052cc:	f7ff fee2 	bl	8005094 <_printf_common>
 80052d0:	3001      	adds	r0, #1
 80052d2:	d14c      	bne.n	800536e <_printf_i+0x1fe>
 80052d4:	f04f 30ff 	mov.w	r0, #4294967295
 80052d8:	b004      	add	sp, #16
 80052da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052de:	4835      	ldr	r0, [pc, #212]	; (80053b4 <_printf_i+0x244>)
 80052e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80052e4:	6829      	ldr	r1, [r5, #0]
 80052e6:	6823      	ldr	r3, [r4, #0]
 80052e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80052ec:	6029      	str	r1, [r5, #0]
 80052ee:	061d      	lsls	r5, r3, #24
 80052f0:	d514      	bpl.n	800531c <_printf_i+0x1ac>
 80052f2:	07df      	lsls	r7, r3, #31
 80052f4:	bf44      	itt	mi
 80052f6:	f043 0320 	orrmi.w	r3, r3, #32
 80052fa:	6023      	strmi	r3, [r4, #0]
 80052fc:	b91e      	cbnz	r6, 8005306 <_printf_i+0x196>
 80052fe:	6823      	ldr	r3, [r4, #0]
 8005300:	f023 0320 	bic.w	r3, r3, #32
 8005304:	6023      	str	r3, [r4, #0]
 8005306:	2310      	movs	r3, #16
 8005308:	e7b0      	b.n	800526c <_printf_i+0xfc>
 800530a:	6823      	ldr	r3, [r4, #0]
 800530c:	f043 0320 	orr.w	r3, r3, #32
 8005310:	6023      	str	r3, [r4, #0]
 8005312:	2378      	movs	r3, #120	; 0x78
 8005314:	4828      	ldr	r0, [pc, #160]	; (80053b8 <_printf_i+0x248>)
 8005316:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800531a:	e7e3      	b.n	80052e4 <_printf_i+0x174>
 800531c:	0659      	lsls	r1, r3, #25
 800531e:	bf48      	it	mi
 8005320:	b2b6      	uxthmi	r6, r6
 8005322:	e7e6      	b.n	80052f2 <_printf_i+0x182>
 8005324:	4615      	mov	r5, r2
 8005326:	e7bb      	b.n	80052a0 <_printf_i+0x130>
 8005328:	682b      	ldr	r3, [r5, #0]
 800532a:	6826      	ldr	r6, [r4, #0]
 800532c:	6961      	ldr	r1, [r4, #20]
 800532e:	1d18      	adds	r0, r3, #4
 8005330:	6028      	str	r0, [r5, #0]
 8005332:	0635      	lsls	r5, r6, #24
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	d501      	bpl.n	800533c <_printf_i+0x1cc>
 8005338:	6019      	str	r1, [r3, #0]
 800533a:	e002      	b.n	8005342 <_printf_i+0x1d2>
 800533c:	0670      	lsls	r0, r6, #25
 800533e:	d5fb      	bpl.n	8005338 <_printf_i+0x1c8>
 8005340:	8019      	strh	r1, [r3, #0]
 8005342:	2300      	movs	r3, #0
 8005344:	6123      	str	r3, [r4, #16]
 8005346:	4615      	mov	r5, r2
 8005348:	e7ba      	b.n	80052c0 <_printf_i+0x150>
 800534a:	682b      	ldr	r3, [r5, #0]
 800534c:	1d1a      	adds	r2, r3, #4
 800534e:	602a      	str	r2, [r5, #0]
 8005350:	681d      	ldr	r5, [r3, #0]
 8005352:	6862      	ldr	r2, [r4, #4]
 8005354:	2100      	movs	r1, #0
 8005356:	4628      	mov	r0, r5
 8005358:	f7fa ff62 	bl	8000220 <memchr>
 800535c:	b108      	cbz	r0, 8005362 <_printf_i+0x1f2>
 800535e:	1b40      	subs	r0, r0, r5
 8005360:	6060      	str	r0, [r4, #4]
 8005362:	6863      	ldr	r3, [r4, #4]
 8005364:	6123      	str	r3, [r4, #16]
 8005366:	2300      	movs	r3, #0
 8005368:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800536c:	e7a8      	b.n	80052c0 <_printf_i+0x150>
 800536e:	6923      	ldr	r3, [r4, #16]
 8005370:	462a      	mov	r2, r5
 8005372:	4649      	mov	r1, r9
 8005374:	4640      	mov	r0, r8
 8005376:	47d0      	blx	sl
 8005378:	3001      	adds	r0, #1
 800537a:	d0ab      	beq.n	80052d4 <_printf_i+0x164>
 800537c:	6823      	ldr	r3, [r4, #0]
 800537e:	079b      	lsls	r3, r3, #30
 8005380:	d413      	bmi.n	80053aa <_printf_i+0x23a>
 8005382:	68e0      	ldr	r0, [r4, #12]
 8005384:	9b03      	ldr	r3, [sp, #12]
 8005386:	4298      	cmp	r0, r3
 8005388:	bfb8      	it	lt
 800538a:	4618      	movlt	r0, r3
 800538c:	e7a4      	b.n	80052d8 <_printf_i+0x168>
 800538e:	2301      	movs	r3, #1
 8005390:	4632      	mov	r2, r6
 8005392:	4649      	mov	r1, r9
 8005394:	4640      	mov	r0, r8
 8005396:	47d0      	blx	sl
 8005398:	3001      	adds	r0, #1
 800539a:	d09b      	beq.n	80052d4 <_printf_i+0x164>
 800539c:	3501      	adds	r5, #1
 800539e:	68e3      	ldr	r3, [r4, #12]
 80053a0:	9903      	ldr	r1, [sp, #12]
 80053a2:	1a5b      	subs	r3, r3, r1
 80053a4:	42ab      	cmp	r3, r5
 80053a6:	dcf2      	bgt.n	800538e <_printf_i+0x21e>
 80053a8:	e7eb      	b.n	8005382 <_printf_i+0x212>
 80053aa:	2500      	movs	r5, #0
 80053ac:	f104 0619 	add.w	r6, r4, #25
 80053b0:	e7f5      	b.n	800539e <_printf_i+0x22e>
 80053b2:	bf00      	nop
 80053b4:	08007cfa 	.word	0x08007cfa
 80053b8:	08007d0b 	.word	0x08007d0b

080053bc <_sbrk_r>:
 80053bc:	b538      	push	{r3, r4, r5, lr}
 80053be:	4d06      	ldr	r5, [pc, #24]	; (80053d8 <_sbrk_r+0x1c>)
 80053c0:	2300      	movs	r3, #0
 80053c2:	4604      	mov	r4, r0
 80053c4:	4608      	mov	r0, r1
 80053c6:	602b      	str	r3, [r5, #0]
 80053c8:	f7fc f99c 	bl	8001704 <_sbrk>
 80053cc:	1c43      	adds	r3, r0, #1
 80053ce:	d102      	bne.n	80053d6 <_sbrk_r+0x1a>
 80053d0:	682b      	ldr	r3, [r5, #0]
 80053d2:	b103      	cbz	r3, 80053d6 <_sbrk_r+0x1a>
 80053d4:	6023      	str	r3, [r4, #0]
 80053d6:	bd38      	pop	{r3, r4, r5, pc}
 80053d8:	200008f0 	.word	0x200008f0

080053dc <siprintf>:
 80053dc:	b40e      	push	{r1, r2, r3}
 80053de:	b500      	push	{lr}
 80053e0:	b09c      	sub	sp, #112	; 0x70
 80053e2:	ab1d      	add	r3, sp, #116	; 0x74
 80053e4:	9002      	str	r0, [sp, #8]
 80053e6:	9006      	str	r0, [sp, #24]
 80053e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80053ec:	4809      	ldr	r0, [pc, #36]	; (8005414 <siprintf+0x38>)
 80053ee:	9107      	str	r1, [sp, #28]
 80053f0:	9104      	str	r1, [sp, #16]
 80053f2:	4909      	ldr	r1, [pc, #36]	; (8005418 <siprintf+0x3c>)
 80053f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80053f8:	9105      	str	r1, [sp, #20]
 80053fa:	6800      	ldr	r0, [r0, #0]
 80053fc:	9301      	str	r3, [sp, #4]
 80053fe:	a902      	add	r1, sp, #8
 8005400:	f001 fabc 	bl	800697c <_svfiprintf_r>
 8005404:	9b02      	ldr	r3, [sp, #8]
 8005406:	2200      	movs	r2, #0
 8005408:	701a      	strb	r2, [r3, #0]
 800540a:	b01c      	add	sp, #112	; 0x70
 800540c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005410:	b003      	add	sp, #12
 8005412:	4770      	bx	lr
 8005414:	200005e4 	.word	0x200005e4
 8005418:	ffff0208 	.word	0xffff0208

0800541c <quorem>:
 800541c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005420:	6903      	ldr	r3, [r0, #16]
 8005422:	690c      	ldr	r4, [r1, #16]
 8005424:	42a3      	cmp	r3, r4
 8005426:	4607      	mov	r7, r0
 8005428:	f2c0 8081 	blt.w	800552e <quorem+0x112>
 800542c:	3c01      	subs	r4, #1
 800542e:	f101 0814 	add.w	r8, r1, #20
 8005432:	f100 0514 	add.w	r5, r0, #20
 8005436:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800543a:	9301      	str	r3, [sp, #4]
 800543c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005440:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005444:	3301      	adds	r3, #1
 8005446:	429a      	cmp	r2, r3
 8005448:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800544c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005450:	fbb2 f6f3 	udiv	r6, r2, r3
 8005454:	d331      	bcc.n	80054ba <quorem+0x9e>
 8005456:	f04f 0e00 	mov.w	lr, #0
 800545a:	4640      	mov	r0, r8
 800545c:	46ac      	mov	ip, r5
 800545e:	46f2      	mov	sl, lr
 8005460:	f850 2b04 	ldr.w	r2, [r0], #4
 8005464:	b293      	uxth	r3, r2
 8005466:	fb06 e303 	mla	r3, r6, r3, lr
 800546a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800546e:	b29b      	uxth	r3, r3
 8005470:	ebaa 0303 	sub.w	r3, sl, r3
 8005474:	f8dc a000 	ldr.w	sl, [ip]
 8005478:	0c12      	lsrs	r2, r2, #16
 800547a:	fa13 f38a 	uxtah	r3, r3, sl
 800547e:	fb06 e202 	mla	r2, r6, r2, lr
 8005482:	9300      	str	r3, [sp, #0]
 8005484:	9b00      	ldr	r3, [sp, #0]
 8005486:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800548a:	b292      	uxth	r2, r2
 800548c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005490:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005494:	f8bd 3000 	ldrh.w	r3, [sp]
 8005498:	4581      	cmp	r9, r0
 800549a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800549e:	f84c 3b04 	str.w	r3, [ip], #4
 80054a2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80054a6:	d2db      	bcs.n	8005460 <quorem+0x44>
 80054a8:	f855 300b 	ldr.w	r3, [r5, fp]
 80054ac:	b92b      	cbnz	r3, 80054ba <quorem+0x9e>
 80054ae:	9b01      	ldr	r3, [sp, #4]
 80054b0:	3b04      	subs	r3, #4
 80054b2:	429d      	cmp	r5, r3
 80054b4:	461a      	mov	r2, r3
 80054b6:	d32e      	bcc.n	8005516 <quorem+0xfa>
 80054b8:	613c      	str	r4, [r7, #16]
 80054ba:	4638      	mov	r0, r7
 80054bc:	f001 f8bc 	bl	8006638 <__mcmp>
 80054c0:	2800      	cmp	r0, #0
 80054c2:	db24      	blt.n	800550e <quorem+0xf2>
 80054c4:	3601      	adds	r6, #1
 80054c6:	4628      	mov	r0, r5
 80054c8:	f04f 0c00 	mov.w	ip, #0
 80054cc:	f858 2b04 	ldr.w	r2, [r8], #4
 80054d0:	f8d0 e000 	ldr.w	lr, [r0]
 80054d4:	b293      	uxth	r3, r2
 80054d6:	ebac 0303 	sub.w	r3, ip, r3
 80054da:	0c12      	lsrs	r2, r2, #16
 80054dc:	fa13 f38e 	uxtah	r3, r3, lr
 80054e0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80054e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80054ee:	45c1      	cmp	r9, r8
 80054f0:	f840 3b04 	str.w	r3, [r0], #4
 80054f4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80054f8:	d2e8      	bcs.n	80054cc <quorem+0xb0>
 80054fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80054fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005502:	b922      	cbnz	r2, 800550e <quorem+0xf2>
 8005504:	3b04      	subs	r3, #4
 8005506:	429d      	cmp	r5, r3
 8005508:	461a      	mov	r2, r3
 800550a:	d30a      	bcc.n	8005522 <quorem+0x106>
 800550c:	613c      	str	r4, [r7, #16]
 800550e:	4630      	mov	r0, r6
 8005510:	b003      	add	sp, #12
 8005512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005516:	6812      	ldr	r2, [r2, #0]
 8005518:	3b04      	subs	r3, #4
 800551a:	2a00      	cmp	r2, #0
 800551c:	d1cc      	bne.n	80054b8 <quorem+0x9c>
 800551e:	3c01      	subs	r4, #1
 8005520:	e7c7      	b.n	80054b2 <quorem+0x96>
 8005522:	6812      	ldr	r2, [r2, #0]
 8005524:	3b04      	subs	r3, #4
 8005526:	2a00      	cmp	r2, #0
 8005528:	d1f0      	bne.n	800550c <quorem+0xf0>
 800552a:	3c01      	subs	r4, #1
 800552c:	e7eb      	b.n	8005506 <quorem+0xea>
 800552e:	2000      	movs	r0, #0
 8005530:	e7ee      	b.n	8005510 <quorem+0xf4>
 8005532:	0000      	movs	r0, r0
 8005534:	0000      	movs	r0, r0
	...

08005538 <_dtoa_r>:
 8005538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800553c:	ed2d 8b04 	vpush	{d8-d9}
 8005540:	ec57 6b10 	vmov	r6, r7, d0
 8005544:	b093      	sub	sp, #76	; 0x4c
 8005546:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005548:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800554c:	9106      	str	r1, [sp, #24]
 800554e:	ee10 aa10 	vmov	sl, s0
 8005552:	4604      	mov	r4, r0
 8005554:	9209      	str	r2, [sp, #36]	; 0x24
 8005556:	930c      	str	r3, [sp, #48]	; 0x30
 8005558:	46bb      	mov	fp, r7
 800555a:	b975      	cbnz	r5, 800557a <_dtoa_r+0x42>
 800555c:	2010      	movs	r0, #16
 800555e:	f7ff f9c5 	bl	80048ec <malloc>
 8005562:	4602      	mov	r2, r0
 8005564:	6260      	str	r0, [r4, #36]	; 0x24
 8005566:	b920      	cbnz	r0, 8005572 <_dtoa_r+0x3a>
 8005568:	4ba7      	ldr	r3, [pc, #668]	; (8005808 <_dtoa_r+0x2d0>)
 800556a:	21ea      	movs	r1, #234	; 0xea
 800556c:	48a7      	ldr	r0, [pc, #668]	; (800580c <_dtoa_r+0x2d4>)
 800556e:	f001 fb05 	bl	8006b7c <__assert_func>
 8005572:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005576:	6005      	str	r5, [r0, #0]
 8005578:	60c5      	str	r5, [r0, #12]
 800557a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800557c:	6819      	ldr	r1, [r3, #0]
 800557e:	b151      	cbz	r1, 8005596 <_dtoa_r+0x5e>
 8005580:	685a      	ldr	r2, [r3, #4]
 8005582:	604a      	str	r2, [r1, #4]
 8005584:	2301      	movs	r3, #1
 8005586:	4093      	lsls	r3, r2
 8005588:	608b      	str	r3, [r1, #8]
 800558a:	4620      	mov	r0, r4
 800558c:	f000 fe12 	bl	80061b4 <_Bfree>
 8005590:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005592:	2200      	movs	r2, #0
 8005594:	601a      	str	r2, [r3, #0]
 8005596:	1e3b      	subs	r3, r7, #0
 8005598:	bfaa      	itet	ge
 800559a:	2300      	movge	r3, #0
 800559c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80055a0:	f8c8 3000 	strge.w	r3, [r8]
 80055a4:	4b9a      	ldr	r3, [pc, #616]	; (8005810 <_dtoa_r+0x2d8>)
 80055a6:	bfbc      	itt	lt
 80055a8:	2201      	movlt	r2, #1
 80055aa:	f8c8 2000 	strlt.w	r2, [r8]
 80055ae:	ea33 030b 	bics.w	r3, r3, fp
 80055b2:	d11b      	bne.n	80055ec <_dtoa_r+0xb4>
 80055b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80055b6:	f242 730f 	movw	r3, #9999	; 0x270f
 80055ba:	6013      	str	r3, [r2, #0]
 80055bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80055c0:	4333      	orrs	r3, r6
 80055c2:	f000 8592 	beq.w	80060ea <_dtoa_r+0xbb2>
 80055c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80055c8:	b963      	cbnz	r3, 80055e4 <_dtoa_r+0xac>
 80055ca:	4b92      	ldr	r3, [pc, #584]	; (8005814 <_dtoa_r+0x2dc>)
 80055cc:	e022      	b.n	8005614 <_dtoa_r+0xdc>
 80055ce:	4b92      	ldr	r3, [pc, #584]	; (8005818 <_dtoa_r+0x2e0>)
 80055d0:	9301      	str	r3, [sp, #4]
 80055d2:	3308      	adds	r3, #8
 80055d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80055d6:	6013      	str	r3, [r2, #0]
 80055d8:	9801      	ldr	r0, [sp, #4]
 80055da:	b013      	add	sp, #76	; 0x4c
 80055dc:	ecbd 8b04 	vpop	{d8-d9}
 80055e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055e4:	4b8b      	ldr	r3, [pc, #556]	; (8005814 <_dtoa_r+0x2dc>)
 80055e6:	9301      	str	r3, [sp, #4]
 80055e8:	3303      	adds	r3, #3
 80055ea:	e7f3      	b.n	80055d4 <_dtoa_r+0x9c>
 80055ec:	2200      	movs	r2, #0
 80055ee:	2300      	movs	r3, #0
 80055f0:	4650      	mov	r0, sl
 80055f2:	4659      	mov	r1, fp
 80055f4:	f7fb fa88 	bl	8000b08 <__aeabi_dcmpeq>
 80055f8:	ec4b ab19 	vmov	d9, sl, fp
 80055fc:	4680      	mov	r8, r0
 80055fe:	b158      	cbz	r0, 8005618 <_dtoa_r+0xe0>
 8005600:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005602:	2301      	movs	r3, #1
 8005604:	6013      	str	r3, [r2, #0]
 8005606:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005608:	2b00      	cmp	r3, #0
 800560a:	f000 856b 	beq.w	80060e4 <_dtoa_r+0xbac>
 800560e:	4883      	ldr	r0, [pc, #524]	; (800581c <_dtoa_r+0x2e4>)
 8005610:	6018      	str	r0, [r3, #0]
 8005612:	1e43      	subs	r3, r0, #1
 8005614:	9301      	str	r3, [sp, #4]
 8005616:	e7df      	b.n	80055d8 <_dtoa_r+0xa0>
 8005618:	ec4b ab10 	vmov	d0, sl, fp
 800561c:	aa10      	add	r2, sp, #64	; 0x40
 800561e:	a911      	add	r1, sp, #68	; 0x44
 8005620:	4620      	mov	r0, r4
 8005622:	f001 f8af 	bl	8006784 <__d2b>
 8005626:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800562a:	ee08 0a10 	vmov	s16, r0
 800562e:	2d00      	cmp	r5, #0
 8005630:	f000 8084 	beq.w	800573c <_dtoa_r+0x204>
 8005634:	ee19 3a90 	vmov	r3, s19
 8005638:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800563c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005640:	4656      	mov	r6, sl
 8005642:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005646:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800564a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800564e:	4b74      	ldr	r3, [pc, #464]	; (8005820 <_dtoa_r+0x2e8>)
 8005650:	2200      	movs	r2, #0
 8005652:	4630      	mov	r0, r6
 8005654:	4639      	mov	r1, r7
 8005656:	f7fa fe37 	bl	80002c8 <__aeabi_dsub>
 800565a:	a365      	add	r3, pc, #404	; (adr r3, 80057f0 <_dtoa_r+0x2b8>)
 800565c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005660:	f7fa ffea 	bl	8000638 <__aeabi_dmul>
 8005664:	a364      	add	r3, pc, #400	; (adr r3, 80057f8 <_dtoa_r+0x2c0>)
 8005666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566a:	f7fa fe2f 	bl	80002cc <__adddf3>
 800566e:	4606      	mov	r6, r0
 8005670:	4628      	mov	r0, r5
 8005672:	460f      	mov	r7, r1
 8005674:	f7fa ff76 	bl	8000564 <__aeabi_i2d>
 8005678:	a361      	add	r3, pc, #388	; (adr r3, 8005800 <_dtoa_r+0x2c8>)
 800567a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800567e:	f7fa ffdb 	bl	8000638 <__aeabi_dmul>
 8005682:	4602      	mov	r2, r0
 8005684:	460b      	mov	r3, r1
 8005686:	4630      	mov	r0, r6
 8005688:	4639      	mov	r1, r7
 800568a:	f7fa fe1f 	bl	80002cc <__adddf3>
 800568e:	4606      	mov	r6, r0
 8005690:	460f      	mov	r7, r1
 8005692:	f7fb fa81 	bl	8000b98 <__aeabi_d2iz>
 8005696:	2200      	movs	r2, #0
 8005698:	9000      	str	r0, [sp, #0]
 800569a:	2300      	movs	r3, #0
 800569c:	4630      	mov	r0, r6
 800569e:	4639      	mov	r1, r7
 80056a0:	f7fb fa3c 	bl	8000b1c <__aeabi_dcmplt>
 80056a4:	b150      	cbz	r0, 80056bc <_dtoa_r+0x184>
 80056a6:	9800      	ldr	r0, [sp, #0]
 80056a8:	f7fa ff5c 	bl	8000564 <__aeabi_i2d>
 80056ac:	4632      	mov	r2, r6
 80056ae:	463b      	mov	r3, r7
 80056b0:	f7fb fa2a 	bl	8000b08 <__aeabi_dcmpeq>
 80056b4:	b910      	cbnz	r0, 80056bc <_dtoa_r+0x184>
 80056b6:	9b00      	ldr	r3, [sp, #0]
 80056b8:	3b01      	subs	r3, #1
 80056ba:	9300      	str	r3, [sp, #0]
 80056bc:	9b00      	ldr	r3, [sp, #0]
 80056be:	2b16      	cmp	r3, #22
 80056c0:	d85a      	bhi.n	8005778 <_dtoa_r+0x240>
 80056c2:	9a00      	ldr	r2, [sp, #0]
 80056c4:	4b57      	ldr	r3, [pc, #348]	; (8005824 <_dtoa_r+0x2ec>)
 80056c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ce:	ec51 0b19 	vmov	r0, r1, d9
 80056d2:	f7fb fa23 	bl	8000b1c <__aeabi_dcmplt>
 80056d6:	2800      	cmp	r0, #0
 80056d8:	d050      	beq.n	800577c <_dtoa_r+0x244>
 80056da:	9b00      	ldr	r3, [sp, #0]
 80056dc:	3b01      	subs	r3, #1
 80056de:	9300      	str	r3, [sp, #0]
 80056e0:	2300      	movs	r3, #0
 80056e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80056e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80056e6:	1b5d      	subs	r5, r3, r5
 80056e8:	1e6b      	subs	r3, r5, #1
 80056ea:	9305      	str	r3, [sp, #20]
 80056ec:	bf45      	ittet	mi
 80056ee:	f1c5 0301 	rsbmi	r3, r5, #1
 80056f2:	9304      	strmi	r3, [sp, #16]
 80056f4:	2300      	movpl	r3, #0
 80056f6:	2300      	movmi	r3, #0
 80056f8:	bf4c      	ite	mi
 80056fa:	9305      	strmi	r3, [sp, #20]
 80056fc:	9304      	strpl	r3, [sp, #16]
 80056fe:	9b00      	ldr	r3, [sp, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	db3d      	blt.n	8005780 <_dtoa_r+0x248>
 8005704:	9b05      	ldr	r3, [sp, #20]
 8005706:	9a00      	ldr	r2, [sp, #0]
 8005708:	920a      	str	r2, [sp, #40]	; 0x28
 800570a:	4413      	add	r3, r2
 800570c:	9305      	str	r3, [sp, #20]
 800570e:	2300      	movs	r3, #0
 8005710:	9307      	str	r3, [sp, #28]
 8005712:	9b06      	ldr	r3, [sp, #24]
 8005714:	2b09      	cmp	r3, #9
 8005716:	f200 8089 	bhi.w	800582c <_dtoa_r+0x2f4>
 800571a:	2b05      	cmp	r3, #5
 800571c:	bfc4      	itt	gt
 800571e:	3b04      	subgt	r3, #4
 8005720:	9306      	strgt	r3, [sp, #24]
 8005722:	9b06      	ldr	r3, [sp, #24]
 8005724:	f1a3 0302 	sub.w	r3, r3, #2
 8005728:	bfcc      	ite	gt
 800572a:	2500      	movgt	r5, #0
 800572c:	2501      	movle	r5, #1
 800572e:	2b03      	cmp	r3, #3
 8005730:	f200 8087 	bhi.w	8005842 <_dtoa_r+0x30a>
 8005734:	e8df f003 	tbb	[pc, r3]
 8005738:	59383a2d 	.word	0x59383a2d
 800573c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005740:	441d      	add	r5, r3
 8005742:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005746:	2b20      	cmp	r3, #32
 8005748:	bfc1      	itttt	gt
 800574a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800574e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005752:	fa0b f303 	lslgt.w	r3, fp, r3
 8005756:	fa26 f000 	lsrgt.w	r0, r6, r0
 800575a:	bfda      	itte	le
 800575c:	f1c3 0320 	rsble	r3, r3, #32
 8005760:	fa06 f003 	lslle.w	r0, r6, r3
 8005764:	4318      	orrgt	r0, r3
 8005766:	f7fa feed 	bl	8000544 <__aeabi_ui2d>
 800576a:	2301      	movs	r3, #1
 800576c:	4606      	mov	r6, r0
 800576e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005772:	3d01      	subs	r5, #1
 8005774:	930e      	str	r3, [sp, #56]	; 0x38
 8005776:	e76a      	b.n	800564e <_dtoa_r+0x116>
 8005778:	2301      	movs	r3, #1
 800577a:	e7b2      	b.n	80056e2 <_dtoa_r+0x1aa>
 800577c:	900b      	str	r0, [sp, #44]	; 0x2c
 800577e:	e7b1      	b.n	80056e4 <_dtoa_r+0x1ac>
 8005780:	9b04      	ldr	r3, [sp, #16]
 8005782:	9a00      	ldr	r2, [sp, #0]
 8005784:	1a9b      	subs	r3, r3, r2
 8005786:	9304      	str	r3, [sp, #16]
 8005788:	4253      	negs	r3, r2
 800578a:	9307      	str	r3, [sp, #28]
 800578c:	2300      	movs	r3, #0
 800578e:	930a      	str	r3, [sp, #40]	; 0x28
 8005790:	e7bf      	b.n	8005712 <_dtoa_r+0x1da>
 8005792:	2300      	movs	r3, #0
 8005794:	9308      	str	r3, [sp, #32]
 8005796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005798:	2b00      	cmp	r3, #0
 800579a:	dc55      	bgt.n	8005848 <_dtoa_r+0x310>
 800579c:	2301      	movs	r3, #1
 800579e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80057a2:	461a      	mov	r2, r3
 80057a4:	9209      	str	r2, [sp, #36]	; 0x24
 80057a6:	e00c      	b.n	80057c2 <_dtoa_r+0x28a>
 80057a8:	2301      	movs	r3, #1
 80057aa:	e7f3      	b.n	8005794 <_dtoa_r+0x25c>
 80057ac:	2300      	movs	r3, #0
 80057ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80057b0:	9308      	str	r3, [sp, #32]
 80057b2:	9b00      	ldr	r3, [sp, #0]
 80057b4:	4413      	add	r3, r2
 80057b6:	9302      	str	r3, [sp, #8]
 80057b8:	3301      	adds	r3, #1
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	9303      	str	r3, [sp, #12]
 80057be:	bfb8      	it	lt
 80057c0:	2301      	movlt	r3, #1
 80057c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80057c4:	2200      	movs	r2, #0
 80057c6:	6042      	str	r2, [r0, #4]
 80057c8:	2204      	movs	r2, #4
 80057ca:	f102 0614 	add.w	r6, r2, #20
 80057ce:	429e      	cmp	r6, r3
 80057d0:	6841      	ldr	r1, [r0, #4]
 80057d2:	d93d      	bls.n	8005850 <_dtoa_r+0x318>
 80057d4:	4620      	mov	r0, r4
 80057d6:	f000 fcad 	bl	8006134 <_Balloc>
 80057da:	9001      	str	r0, [sp, #4]
 80057dc:	2800      	cmp	r0, #0
 80057de:	d13b      	bne.n	8005858 <_dtoa_r+0x320>
 80057e0:	4b11      	ldr	r3, [pc, #68]	; (8005828 <_dtoa_r+0x2f0>)
 80057e2:	4602      	mov	r2, r0
 80057e4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80057e8:	e6c0      	b.n	800556c <_dtoa_r+0x34>
 80057ea:	2301      	movs	r3, #1
 80057ec:	e7df      	b.n	80057ae <_dtoa_r+0x276>
 80057ee:	bf00      	nop
 80057f0:	636f4361 	.word	0x636f4361
 80057f4:	3fd287a7 	.word	0x3fd287a7
 80057f8:	8b60c8b3 	.word	0x8b60c8b3
 80057fc:	3fc68a28 	.word	0x3fc68a28
 8005800:	509f79fb 	.word	0x509f79fb
 8005804:	3fd34413 	.word	0x3fd34413
 8005808:	08007d29 	.word	0x08007d29
 800580c:	08007d40 	.word	0x08007d40
 8005810:	7ff00000 	.word	0x7ff00000
 8005814:	08007d25 	.word	0x08007d25
 8005818:	08007d1c 	.word	0x08007d1c
 800581c:	08007cf9 	.word	0x08007cf9
 8005820:	3ff80000 	.word	0x3ff80000
 8005824:	08007e30 	.word	0x08007e30
 8005828:	08007d9b 	.word	0x08007d9b
 800582c:	2501      	movs	r5, #1
 800582e:	2300      	movs	r3, #0
 8005830:	9306      	str	r3, [sp, #24]
 8005832:	9508      	str	r5, [sp, #32]
 8005834:	f04f 33ff 	mov.w	r3, #4294967295
 8005838:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800583c:	2200      	movs	r2, #0
 800583e:	2312      	movs	r3, #18
 8005840:	e7b0      	b.n	80057a4 <_dtoa_r+0x26c>
 8005842:	2301      	movs	r3, #1
 8005844:	9308      	str	r3, [sp, #32]
 8005846:	e7f5      	b.n	8005834 <_dtoa_r+0x2fc>
 8005848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800584a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800584e:	e7b8      	b.n	80057c2 <_dtoa_r+0x28a>
 8005850:	3101      	adds	r1, #1
 8005852:	6041      	str	r1, [r0, #4]
 8005854:	0052      	lsls	r2, r2, #1
 8005856:	e7b8      	b.n	80057ca <_dtoa_r+0x292>
 8005858:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800585a:	9a01      	ldr	r2, [sp, #4]
 800585c:	601a      	str	r2, [r3, #0]
 800585e:	9b03      	ldr	r3, [sp, #12]
 8005860:	2b0e      	cmp	r3, #14
 8005862:	f200 809d 	bhi.w	80059a0 <_dtoa_r+0x468>
 8005866:	2d00      	cmp	r5, #0
 8005868:	f000 809a 	beq.w	80059a0 <_dtoa_r+0x468>
 800586c:	9b00      	ldr	r3, [sp, #0]
 800586e:	2b00      	cmp	r3, #0
 8005870:	dd32      	ble.n	80058d8 <_dtoa_r+0x3a0>
 8005872:	4ab7      	ldr	r2, [pc, #732]	; (8005b50 <_dtoa_r+0x618>)
 8005874:	f003 030f 	and.w	r3, r3, #15
 8005878:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800587c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005880:	9b00      	ldr	r3, [sp, #0]
 8005882:	05d8      	lsls	r0, r3, #23
 8005884:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005888:	d516      	bpl.n	80058b8 <_dtoa_r+0x380>
 800588a:	4bb2      	ldr	r3, [pc, #712]	; (8005b54 <_dtoa_r+0x61c>)
 800588c:	ec51 0b19 	vmov	r0, r1, d9
 8005890:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005894:	f7fa fffa 	bl	800088c <__aeabi_ddiv>
 8005898:	f007 070f 	and.w	r7, r7, #15
 800589c:	4682      	mov	sl, r0
 800589e:	468b      	mov	fp, r1
 80058a0:	2503      	movs	r5, #3
 80058a2:	4eac      	ldr	r6, [pc, #688]	; (8005b54 <_dtoa_r+0x61c>)
 80058a4:	b957      	cbnz	r7, 80058bc <_dtoa_r+0x384>
 80058a6:	4642      	mov	r2, r8
 80058a8:	464b      	mov	r3, r9
 80058aa:	4650      	mov	r0, sl
 80058ac:	4659      	mov	r1, fp
 80058ae:	f7fa ffed 	bl	800088c <__aeabi_ddiv>
 80058b2:	4682      	mov	sl, r0
 80058b4:	468b      	mov	fp, r1
 80058b6:	e028      	b.n	800590a <_dtoa_r+0x3d2>
 80058b8:	2502      	movs	r5, #2
 80058ba:	e7f2      	b.n	80058a2 <_dtoa_r+0x36a>
 80058bc:	07f9      	lsls	r1, r7, #31
 80058be:	d508      	bpl.n	80058d2 <_dtoa_r+0x39a>
 80058c0:	4640      	mov	r0, r8
 80058c2:	4649      	mov	r1, r9
 80058c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80058c8:	f7fa feb6 	bl	8000638 <__aeabi_dmul>
 80058cc:	3501      	adds	r5, #1
 80058ce:	4680      	mov	r8, r0
 80058d0:	4689      	mov	r9, r1
 80058d2:	107f      	asrs	r7, r7, #1
 80058d4:	3608      	adds	r6, #8
 80058d6:	e7e5      	b.n	80058a4 <_dtoa_r+0x36c>
 80058d8:	f000 809b 	beq.w	8005a12 <_dtoa_r+0x4da>
 80058dc:	9b00      	ldr	r3, [sp, #0]
 80058de:	4f9d      	ldr	r7, [pc, #628]	; (8005b54 <_dtoa_r+0x61c>)
 80058e0:	425e      	negs	r6, r3
 80058e2:	4b9b      	ldr	r3, [pc, #620]	; (8005b50 <_dtoa_r+0x618>)
 80058e4:	f006 020f 	and.w	r2, r6, #15
 80058e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80058ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f0:	ec51 0b19 	vmov	r0, r1, d9
 80058f4:	f7fa fea0 	bl	8000638 <__aeabi_dmul>
 80058f8:	1136      	asrs	r6, r6, #4
 80058fa:	4682      	mov	sl, r0
 80058fc:	468b      	mov	fp, r1
 80058fe:	2300      	movs	r3, #0
 8005900:	2502      	movs	r5, #2
 8005902:	2e00      	cmp	r6, #0
 8005904:	d17a      	bne.n	80059fc <_dtoa_r+0x4c4>
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1d3      	bne.n	80058b2 <_dtoa_r+0x37a>
 800590a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800590c:	2b00      	cmp	r3, #0
 800590e:	f000 8082 	beq.w	8005a16 <_dtoa_r+0x4de>
 8005912:	4b91      	ldr	r3, [pc, #580]	; (8005b58 <_dtoa_r+0x620>)
 8005914:	2200      	movs	r2, #0
 8005916:	4650      	mov	r0, sl
 8005918:	4659      	mov	r1, fp
 800591a:	f7fb f8ff 	bl	8000b1c <__aeabi_dcmplt>
 800591e:	2800      	cmp	r0, #0
 8005920:	d079      	beq.n	8005a16 <_dtoa_r+0x4de>
 8005922:	9b03      	ldr	r3, [sp, #12]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d076      	beq.n	8005a16 <_dtoa_r+0x4de>
 8005928:	9b02      	ldr	r3, [sp, #8]
 800592a:	2b00      	cmp	r3, #0
 800592c:	dd36      	ble.n	800599c <_dtoa_r+0x464>
 800592e:	9b00      	ldr	r3, [sp, #0]
 8005930:	4650      	mov	r0, sl
 8005932:	4659      	mov	r1, fp
 8005934:	1e5f      	subs	r7, r3, #1
 8005936:	2200      	movs	r2, #0
 8005938:	4b88      	ldr	r3, [pc, #544]	; (8005b5c <_dtoa_r+0x624>)
 800593a:	f7fa fe7d 	bl	8000638 <__aeabi_dmul>
 800593e:	9e02      	ldr	r6, [sp, #8]
 8005940:	4682      	mov	sl, r0
 8005942:	468b      	mov	fp, r1
 8005944:	3501      	adds	r5, #1
 8005946:	4628      	mov	r0, r5
 8005948:	f7fa fe0c 	bl	8000564 <__aeabi_i2d>
 800594c:	4652      	mov	r2, sl
 800594e:	465b      	mov	r3, fp
 8005950:	f7fa fe72 	bl	8000638 <__aeabi_dmul>
 8005954:	4b82      	ldr	r3, [pc, #520]	; (8005b60 <_dtoa_r+0x628>)
 8005956:	2200      	movs	r2, #0
 8005958:	f7fa fcb8 	bl	80002cc <__adddf3>
 800595c:	46d0      	mov	r8, sl
 800595e:	46d9      	mov	r9, fp
 8005960:	4682      	mov	sl, r0
 8005962:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005966:	2e00      	cmp	r6, #0
 8005968:	d158      	bne.n	8005a1c <_dtoa_r+0x4e4>
 800596a:	4b7e      	ldr	r3, [pc, #504]	; (8005b64 <_dtoa_r+0x62c>)
 800596c:	2200      	movs	r2, #0
 800596e:	4640      	mov	r0, r8
 8005970:	4649      	mov	r1, r9
 8005972:	f7fa fca9 	bl	80002c8 <__aeabi_dsub>
 8005976:	4652      	mov	r2, sl
 8005978:	465b      	mov	r3, fp
 800597a:	4680      	mov	r8, r0
 800597c:	4689      	mov	r9, r1
 800597e:	f7fb f8eb 	bl	8000b58 <__aeabi_dcmpgt>
 8005982:	2800      	cmp	r0, #0
 8005984:	f040 8295 	bne.w	8005eb2 <_dtoa_r+0x97a>
 8005988:	4652      	mov	r2, sl
 800598a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800598e:	4640      	mov	r0, r8
 8005990:	4649      	mov	r1, r9
 8005992:	f7fb f8c3 	bl	8000b1c <__aeabi_dcmplt>
 8005996:	2800      	cmp	r0, #0
 8005998:	f040 8289 	bne.w	8005eae <_dtoa_r+0x976>
 800599c:	ec5b ab19 	vmov	sl, fp, d9
 80059a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	f2c0 8148 	blt.w	8005c38 <_dtoa_r+0x700>
 80059a8:	9a00      	ldr	r2, [sp, #0]
 80059aa:	2a0e      	cmp	r2, #14
 80059ac:	f300 8144 	bgt.w	8005c38 <_dtoa_r+0x700>
 80059b0:	4b67      	ldr	r3, [pc, #412]	; (8005b50 <_dtoa_r+0x618>)
 80059b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80059ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059bc:	2b00      	cmp	r3, #0
 80059be:	f280 80d5 	bge.w	8005b6c <_dtoa_r+0x634>
 80059c2:	9b03      	ldr	r3, [sp, #12]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f300 80d1 	bgt.w	8005b6c <_dtoa_r+0x634>
 80059ca:	f040 826f 	bne.w	8005eac <_dtoa_r+0x974>
 80059ce:	4b65      	ldr	r3, [pc, #404]	; (8005b64 <_dtoa_r+0x62c>)
 80059d0:	2200      	movs	r2, #0
 80059d2:	4640      	mov	r0, r8
 80059d4:	4649      	mov	r1, r9
 80059d6:	f7fa fe2f 	bl	8000638 <__aeabi_dmul>
 80059da:	4652      	mov	r2, sl
 80059dc:	465b      	mov	r3, fp
 80059de:	f7fb f8b1 	bl	8000b44 <__aeabi_dcmpge>
 80059e2:	9e03      	ldr	r6, [sp, #12]
 80059e4:	4637      	mov	r7, r6
 80059e6:	2800      	cmp	r0, #0
 80059e8:	f040 8245 	bne.w	8005e76 <_dtoa_r+0x93e>
 80059ec:	9d01      	ldr	r5, [sp, #4]
 80059ee:	2331      	movs	r3, #49	; 0x31
 80059f0:	f805 3b01 	strb.w	r3, [r5], #1
 80059f4:	9b00      	ldr	r3, [sp, #0]
 80059f6:	3301      	adds	r3, #1
 80059f8:	9300      	str	r3, [sp, #0]
 80059fa:	e240      	b.n	8005e7e <_dtoa_r+0x946>
 80059fc:	07f2      	lsls	r2, r6, #31
 80059fe:	d505      	bpl.n	8005a0c <_dtoa_r+0x4d4>
 8005a00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a04:	f7fa fe18 	bl	8000638 <__aeabi_dmul>
 8005a08:	3501      	adds	r5, #1
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	1076      	asrs	r6, r6, #1
 8005a0e:	3708      	adds	r7, #8
 8005a10:	e777      	b.n	8005902 <_dtoa_r+0x3ca>
 8005a12:	2502      	movs	r5, #2
 8005a14:	e779      	b.n	800590a <_dtoa_r+0x3d2>
 8005a16:	9f00      	ldr	r7, [sp, #0]
 8005a18:	9e03      	ldr	r6, [sp, #12]
 8005a1a:	e794      	b.n	8005946 <_dtoa_r+0x40e>
 8005a1c:	9901      	ldr	r1, [sp, #4]
 8005a1e:	4b4c      	ldr	r3, [pc, #304]	; (8005b50 <_dtoa_r+0x618>)
 8005a20:	4431      	add	r1, r6
 8005a22:	910d      	str	r1, [sp, #52]	; 0x34
 8005a24:	9908      	ldr	r1, [sp, #32]
 8005a26:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005a2a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005a2e:	2900      	cmp	r1, #0
 8005a30:	d043      	beq.n	8005aba <_dtoa_r+0x582>
 8005a32:	494d      	ldr	r1, [pc, #308]	; (8005b68 <_dtoa_r+0x630>)
 8005a34:	2000      	movs	r0, #0
 8005a36:	f7fa ff29 	bl	800088c <__aeabi_ddiv>
 8005a3a:	4652      	mov	r2, sl
 8005a3c:	465b      	mov	r3, fp
 8005a3e:	f7fa fc43 	bl	80002c8 <__aeabi_dsub>
 8005a42:	9d01      	ldr	r5, [sp, #4]
 8005a44:	4682      	mov	sl, r0
 8005a46:	468b      	mov	fp, r1
 8005a48:	4649      	mov	r1, r9
 8005a4a:	4640      	mov	r0, r8
 8005a4c:	f7fb f8a4 	bl	8000b98 <__aeabi_d2iz>
 8005a50:	4606      	mov	r6, r0
 8005a52:	f7fa fd87 	bl	8000564 <__aeabi_i2d>
 8005a56:	4602      	mov	r2, r0
 8005a58:	460b      	mov	r3, r1
 8005a5a:	4640      	mov	r0, r8
 8005a5c:	4649      	mov	r1, r9
 8005a5e:	f7fa fc33 	bl	80002c8 <__aeabi_dsub>
 8005a62:	3630      	adds	r6, #48	; 0x30
 8005a64:	f805 6b01 	strb.w	r6, [r5], #1
 8005a68:	4652      	mov	r2, sl
 8005a6a:	465b      	mov	r3, fp
 8005a6c:	4680      	mov	r8, r0
 8005a6e:	4689      	mov	r9, r1
 8005a70:	f7fb f854 	bl	8000b1c <__aeabi_dcmplt>
 8005a74:	2800      	cmp	r0, #0
 8005a76:	d163      	bne.n	8005b40 <_dtoa_r+0x608>
 8005a78:	4642      	mov	r2, r8
 8005a7a:	464b      	mov	r3, r9
 8005a7c:	4936      	ldr	r1, [pc, #216]	; (8005b58 <_dtoa_r+0x620>)
 8005a7e:	2000      	movs	r0, #0
 8005a80:	f7fa fc22 	bl	80002c8 <__aeabi_dsub>
 8005a84:	4652      	mov	r2, sl
 8005a86:	465b      	mov	r3, fp
 8005a88:	f7fb f848 	bl	8000b1c <__aeabi_dcmplt>
 8005a8c:	2800      	cmp	r0, #0
 8005a8e:	f040 80b5 	bne.w	8005bfc <_dtoa_r+0x6c4>
 8005a92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a94:	429d      	cmp	r5, r3
 8005a96:	d081      	beq.n	800599c <_dtoa_r+0x464>
 8005a98:	4b30      	ldr	r3, [pc, #192]	; (8005b5c <_dtoa_r+0x624>)
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	4650      	mov	r0, sl
 8005a9e:	4659      	mov	r1, fp
 8005aa0:	f7fa fdca 	bl	8000638 <__aeabi_dmul>
 8005aa4:	4b2d      	ldr	r3, [pc, #180]	; (8005b5c <_dtoa_r+0x624>)
 8005aa6:	4682      	mov	sl, r0
 8005aa8:	468b      	mov	fp, r1
 8005aaa:	4640      	mov	r0, r8
 8005aac:	4649      	mov	r1, r9
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f7fa fdc2 	bl	8000638 <__aeabi_dmul>
 8005ab4:	4680      	mov	r8, r0
 8005ab6:	4689      	mov	r9, r1
 8005ab8:	e7c6      	b.n	8005a48 <_dtoa_r+0x510>
 8005aba:	4650      	mov	r0, sl
 8005abc:	4659      	mov	r1, fp
 8005abe:	f7fa fdbb 	bl	8000638 <__aeabi_dmul>
 8005ac2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ac4:	9d01      	ldr	r5, [sp, #4]
 8005ac6:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ac8:	4682      	mov	sl, r0
 8005aca:	468b      	mov	fp, r1
 8005acc:	4649      	mov	r1, r9
 8005ace:	4640      	mov	r0, r8
 8005ad0:	f7fb f862 	bl	8000b98 <__aeabi_d2iz>
 8005ad4:	4606      	mov	r6, r0
 8005ad6:	f7fa fd45 	bl	8000564 <__aeabi_i2d>
 8005ada:	3630      	adds	r6, #48	; 0x30
 8005adc:	4602      	mov	r2, r0
 8005ade:	460b      	mov	r3, r1
 8005ae0:	4640      	mov	r0, r8
 8005ae2:	4649      	mov	r1, r9
 8005ae4:	f7fa fbf0 	bl	80002c8 <__aeabi_dsub>
 8005ae8:	f805 6b01 	strb.w	r6, [r5], #1
 8005aec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005aee:	429d      	cmp	r5, r3
 8005af0:	4680      	mov	r8, r0
 8005af2:	4689      	mov	r9, r1
 8005af4:	f04f 0200 	mov.w	r2, #0
 8005af8:	d124      	bne.n	8005b44 <_dtoa_r+0x60c>
 8005afa:	4b1b      	ldr	r3, [pc, #108]	; (8005b68 <_dtoa_r+0x630>)
 8005afc:	4650      	mov	r0, sl
 8005afe:	4659      	mov	r1, fp
 8005b00:	f7fa fbe4 	bl	80002cc <__adddf3>
 8005b04:	4602      	mov	r2, r0
 8005b06:	460b      	mov	r3, r1
 8005b08:	4640      	mov	r0, r8
 8005b0a:	4649      	mov	r1, r9
 8005b0c:	f7fb f824 	bl	8000b58 <__aeabi_dcmpgt>
 8005b10:	2800      	cmp	r0, #0
 8005b12:	d173      	bne.n	8005bfc <_dtoa_r+0x6c4>
 8005b14:	4652      	mov	r2, sl
 8005b16:	465b      	mov	r3, fp
 8005b18:	4913      	ldr	r1, [pc, #76]	; (8005b68 <_dtoa_r+0x630>)
 8005b1a:	2000      	movs	r0, #0
 8005b1c:	f7fa fbd4 	bl	80002c8 <__aeabi_dsub>
 8005b20:	4602      	mov	r2, r0
 8005b22:	460b      	mov	r3, r1
 8005b24:	4640      	mov	r0, r8
 8005b26:	4649      	mov	r1, r9
 8005b28:	f7fa fff8 	bl	8000b1c <__aeabi_dcmplt>
 8005b2c:	2800      	cmp	r0, #0
 8005b2e:	f43f af35 	beq.w	800599c <_dtoa_r+0x464>
 8005b32:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005b34:	1e6b      	subs	r3, r5, #1
 8005b36:	930f      	str	r3, [sp, #60]	; 0x3c
 8005b38:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005b3c:	2b30      	cmp	r3, #48	; 0x30
 8005b3e:	d0f8      	beq.n	8005b32 <_dtoa_r+0x5fa>
 8005b40:	9700      	str	r7, [sp, #0]
 8005b42:	e049      	b.n	8005bd8 <_dtoa_r+0x6a0>
 8005b44:	4b05      	ldr	r3, [pc, #20]	; (8005b5c <_dtoa_r+0x624>)
 8005b46:	f7fa fd77 	bl	8000638 <__aeabi_dmul>
 8005b4a:	4680      	mov	r8, r0
 8005b4c:	4689      	mov	r9, r1
 8005b4e:	e7bd      	b.n	8005acc <_dtoa_r+0x594>
 8005b50:	08007e30 	.word	0x08007e30
 8005b54:	08007e08 	.word	0x08007e08
 8005b58:	3ff00000 	.word	0x3ff00000
 8005b5c:	40240000 	.word	0x40240000
 8005b60:	401c0000 	.word	0x401c0000
 8005b64:	40140000 	.word	0x40140000
 8005b68:	3fe00000 	.word	0x3fe00000
 8005b6c:	9d01      	ldr	r5, [sp, #4]
 8005b6e:	4656      	mov	r6, sl
 8005b70:	465f      	mov	r7, fp
 8005b72:	4642      	mov	r2, r8
 8005b74:	464b      	mov	r3, r9
 8005b76:	4630      	mov	r0, r6
 8005b78:	4639      	mov	r1, r7
 8005b7a:	f7fa fe87 	bl	800088c <__aeabi_ddiv>
 8005b7e:	f7fb f80b 	bl	8000b98 <__aeabi_d2iz>
 8005b82:	4682      	mov	sl, r0
 8005b84:	f7fa fcee 	bl	8000564 <__aeabi_i2d>
 8005b88:	4642      	mov	r2, r8
 8005b8a:	464b      	mov	r3, r9
 8005b8c:	f7fa fd54 	bl	8000638 <__aeabi_dmul>
 8005b90:	4602      	mov	r2, r0
 8005b92:	460b      	mov	r3, r1
 8005b94:	4630      	mov	r0, r6
 8005b96:	4639      	mov	r1, r7
 8005b98:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005b9c:	f7fa fb94 	bl	80002c8 <__aeabi_dsub>
 8005ba0:	f805 6b01 	strb.w	r6, [r5], #1
 8005ba4:	9e01      	ldr	r6, [sp, #4]
 8005ba6:	9f03      	ldr	r7, [sp, #12]
 8005ba8:	1bae      	subs	r6, r5, r6
 8005baa:	42b7      	cmp	r7, r6
 8005bac:	4602      	mov	r2, r0
 8005bae:	460b      	mov	r3, r1
 8005bb0:	d135      	bne.n	8005c1e <_dtoa_r+0x6e6>
 8005bb2:	f7fa fb8b 	bl	80002cc <__adddf3>
 8005bb6:	4642      	mov	r2, r8
 8005bb8:	464b      	mov	r3, r9
 8005bba:	4606      	mov	r6, r0
 8005bbc:	460f      	mov	r7, r1
 8005bbe:	f7fa ffcb 	bl	8000b58 <__aeabi_dcmpgt>
 8005bc2:	b9d0      	cbnz	r0, 8005bfa <_dtoa_r+0x6c2>
 8005bc4:	4642      	mov	r2, r8
 8005bc6:	464b      	mov	r3, r9
 8005bc8:	4630      	mov	r0, r6
 8005bca:	4639      	mov	r1, r7
 8005bcc:	f7fa ff9c 	bl	8000b08 <__aeabi_dcmpeq>
 8005bd0:	b110      	cbz	r0, 8005bd8 <_dtoa_r+0x6a0>
 8005bd2:	f01a 0f01 	tst.w	sl, #1
 8005bd6:	d110      	bne.n	8005bfa <_dtoa_r+0x6c2>
 8005bd8:	4620      	mov	r0, r4
 8005bda:	ee18 1a10 	vmov	r1, s16
 8005bde:	f000 fae9 	bl	80061b4 <_Bfree>
 8005be2:	2300      	movs	r3, #0
 8005be4:	9800      	ldr	r0, [sp, #0]
 8005be6:	702b      	strb	r3, [r5, #0]
 8005be8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005bea:	3001      	adds	r0, #1
 8005bec:	6018      	str	r0, [r3, #0]
 8005bee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f43f acf1 	beq.w	80055d8 <_dtoa_r+0xa0>
 8005bf6:	601d      	str	r5, [r3, #0]
 8005bf8:	e4ee      	b.n	80055d8 <_dtoa_r+0xa0>
 8005bfa:	9f00      	ldr	r7, [sp, #0]
 8005bfc:	462b      	mov	r3, r5
 8005bfe:	461d      	mov	r5, r3
 8005c00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005c04:	2a39      	cmp	r2, #57	; 0x39
 8005c06:	d106      	bne.n	8005c16 <_dtoa_r+0x6de>
 8005c08:	9a01      	ldr	r2, [sp, #4]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d1f7      	bne.n	8005bfe <_dtoa_r+0x6c6>
 8005c0e:	9901      	ldr	r1, [sp, #4]
 8005c10:	2230      	movs	r2, #48	; 0x30
 8005c12:	3701      	adds	r7, #1
 8005c14:	700a      	strb	r2, [r1, #0]
 8005c16:	781a      	ldrb	r2, [r3, #0]
 8005c18:	3201      	adds	r2, #1
 8005c1a:	701a      	strb	r2, [r3, #0]
 8005c1c:	e790      	b.n	8005b40 <_dtoa_r+0x608>
 8005c1e:	4ba6      	ldr	r3, [pc, #664]	; (8005eb8 <_dtoa_r+0x980>)
 8005c20:	2200      	movs	r2, #0
 8005c22:	f7fa fd09 	bl	8000638 <__aeabi_dmul>
 8005c26:	2200      	movs	r2, #0
 8005c28:	2300      	movs	r3, #0
 8005c2a:	4606      	mov	r6, r0
 8005c2c:	460f      	mov	r7, r1
 8005c2e:	f7fa ff6b 	bl	8000b08 <__aeabi_dcmpeq>
 8005c32:	2800      	cmp	r0, #0
 8005c34:	d09d      	beq.n	8005b72 <_dtoa_r+0x63a>
 8005c36:	e7cf      	b.n	8005bd8 <_dtoa_r+0x6a0>
 8005c38:	9a08      	ldr	r2, [sp, #32]
 8005c3a:	2a00      	cmp	r2, #0
 8005c3c:	f000 80d7 	beq.w	8005dee <_dtoa_r+0x8b6>
 8005c40:	9a06      	ldr	r2, [sp, #24]
 8005c42:	2a01      	cmp	r2, #1
 8005c44:	f300 80ba 	bgt.w	8005dbc <_dtoa_r+0x884>
 8005c48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c4a:	2a00      	cmp	r2, #0
 8005c4c:	f000 80b2 	beq.w	8005db4 <_dtoa_r+0x87c>
 8005c50:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005c54:	9e07      	ldr	r6, [sp, #28]
 8005c56:	9d04      	ldr	r5, [sp, #16]
 8005c58:	9a04      	ldr	r2, [sp, #16]
 8005c5a:	441a      	add	r2, r3
 8005c5c:	9204      	str	r2, [sp, #16]
 8005c5e:	9a05      	ldr	r2, [sp, #20]
 8005c60:	2101      	movs	r1, #1
 8005c62:	441a      	add	r2, r3
 8005c64:	4620      	mov	r0, r4
 8005c66:	9205      	str	r2, [sp, #20]
 8005c68:	f000 fb5c 	bl	8006324 <__i2b>
 8005c6c:	4607      	mov	r7, r0
 8005c6e:	2d00      	cmp	r5, #0
 8005c70:	dd0c      	ble.n	8005c8c <_dtoa_r+0x754>
 8005c72:	9b05      	ldr	r3, [sp, #20]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	dd09      	ble.n	8005c8c <_dtoa_r+0x754>
 8005c78:	42ab      	cmp	r3, r5
 8005c7a:	9a04      	ldr	r2, [sp, #16]
 8005c7c:	bfa8      	it	ge
 8005c7e:	462b      	movge	r3, r5
 8005c80:	1ad2      	subs	r2, r2, r3
 8005c82:	9204      	str	r2, [sp, #16]
 8005c84:	9a05      	ldr	r2, [sp, #20]
 8005c86:	1aed      	subs	r5, r5, r3
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	9305      	str	r3, [sp, #20]
 8005c8c:	9b07      	ldr	r3, [sp, #28]
 8005c8e:	b31b      	cbz	r3, 8005cd8 <_dtoa_r+0x7a0>
 8005c90:	9b08      	ldr	r3, [sp, #32]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	f000 80af 	beq.w	8005df6 <_dtoa_r+0x8be>
 8005c98:	2e00      	cmp	r6, #0
 8005c9a:	dd13      	ble.n	8005cc4 <_dtoa_r+0x78c>
 8005c9c:	4639      	mov	r1, r7
 8005c9e:	4632      	mov	r2, r6
 8005ca0:	4620      	mov	r0, r4
 8005ca2:	f000 fbff 	bl	80064a4 <__pow5mult>
 8005ca6:	ee18 2a10 	vmov	r2, s16
 8005caa:	4601      	mov	r1, r0
 8005cac:	4607      	mov	r7, r0
 8005cae:	4620      	mov	r0, r4
 8005cb0:	f000 fb4e 	bl	8006350 <__multiply>
 8005cb4:	ee18 1a10 	vmov	r1, s16
 8005cb8:	4680      	mov	r8, r0
 8005cba:	4620      	mov	r0, r4
 8005cbc:	f000 fa7a 	bl	80061b4 <_Bfree>
 8005cc0:	ee08 8a10 	vmov	s16, r8
 8005cc4:	9b07      	ldr	r3, [sp, #28]
 8005cc6:	1b9a      	subs	r2, r3, r6
 8005cc8:	d006      	beq.n	8005cd8 <_dtoa_r+0x7a0>
 8005cca:	ee18 1a10 	vmov	r1, s16
 8005cce:	4620      	mov	r0, r4
 8005cd0:	f000 fbe8 	bl	80064a4 <__pow5mult>
 8005cd4:	ee08 0a10 	vmov	s16, r0
 8005cd8:	2101      	movs	r1, #1
 8005cda:	4620      	mov	r0, r4
 8005cdc:	f000 fb22 	bl	8006324 <__i2b>
 8005ce0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	4606      	mov	r6, r0
 8005ce6:	f340 8088 	ble.w	8005dfa <_dtoa_r+0x8c2>
 8005cea:	461a      	mov	r2, r3
 8005cec:	4601      	mov	r1, r0
 8005cee:	4620      	mov	r0, r4
 8005cf0:	f000 fbd8 	bl	80064a4 <__pow5mult>
 8005cf4:	9b06      	ldr	r3, [sp, #24]
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	4606      	mov	r6, r0
 8005cfa:	f340 8081 	ble.w	8005e00 <_dtoa_r+0x8c8>
 8005cfe:	f04f 0800 	mov.w	r8, #0
 8005d02:	6933      	ldr	r3, [r6, #16]
 8005d04:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005d08:	6918      	ldr	r0, [r3, #16]
 8005d0a:	f000 fabb 	bl	8006284 <__hi0bits>
 8005d0e:	f1c0 0020 	rsb	r0, r0, #32
 8005d12:	9b05      	ldr	r3, [sp, #20]
 8005d14:	4418      	add	r0, r3
 8005d16:	f010 001f 	ands.w	r0, r0, #31
 8005d1a:	f000 8092 	beq.w	8005e42 <_dtoa_r+0x90a>
 8005d1e:	f1c0 0320 	rsb	r3, r0, #32
 8005d22:	2b04      	cmp	r3, #4
 8005d24:	f340 808a 	ble.w	8005e3c <_dtoa_r+0x904>
 8005d28:	f1c0 001c 	rsb	r0, r0, #28
 8005d2c:	9b04      	ldr	r3, [sp, #16]
 8005d2e:	4403      	add	r3, r0
 8005d30:	9304      	str	r3, [sp, #16]
 8005d32:	9b05      	ldr	r3, [sp, #20]
 8005d34:	4403      	add	r3, r0
 8005d36:	4405      	add	r5, r0
 8005d38:	9305      	str	r3, [sp, #20]
 8005d3a:	9b04      	ldr	r3, [sp, #16]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	dd07      	ble.n	8005d50 <_dtoa_r+0x818>
 8005d40:	ee18 1a10 	vmov	r1, s16
 8005d44:	461a      	mov	r2, r3
 8005d46:	4620      	mov	r0, r4
 8005d48:	f000 fc06 	bl	8006558 <__lshift>
 8005d4c:	ee08 0a10 	vmov	s16, r0
 8005d50:	9b05      	ldr	r3, [sp, #20]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	dd05      	ble.n	8005d62 <_dtoa_r+0x82a>
 8005d56:	4631      	mov	r1, r6
 8005d58:	461a      	mov	r2, r3
 8005d5a:	4620      	mov	r0, r4
 8005d5c:	f000 fbfc 	bl	8006558 <__lshift>
 8005d60:	4606      	mov	r6, r0
 8005d62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d06e      	beq.n	8005e46 <_dtoa_r+0x90e>
 8005d68:	ee18 0a10 	vmov	r0, s16
 8005d6c:	4631      	mov	r1, r6
 8005d6e:	f000 fc63 	bl	8006638 <__mcmp>
 8005d72:	2800      	cmp	r0, #0
 8005d74:	da67      	bge.n	8005e46 <_dtoa_r+0x90e>
 8005d76:	9b00      	ldr	r3, [sp, #0]
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	ee18 1a10 	vmov	r1, s16
 8005d7e:	9300      	str	r3, [sp, #0]
 8005d80:	220a      	movs	r2, #10
 8005d82:	2300      	movs	r3, #0
 8005d84:	4620      	mov	r0, r4
 8005d86:	f000 fa37 	bl	80061f8 <__multadd>
 8005d8a:	9b08      	ldr	r3, [sp, #32]
 8005d8c:	ee08 0a10 	vmov	s16, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f000 81b1 	beq.w	80060f8 <_dtoa_r+0xbc0>
 8005d96:	2300      	movs	r3, #0
 8005d98:	4639      	mov	r1, r7
 8005d9a:	220a      	movs	r2, #10
 8005d9c:	4620      	mov	r0, r4
 8005d9e:	f000 fa2b 	bl	80061f8 <__multadd>
 8005da2:	9b02      	ldr	r3, [sp, #8]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	4607      	mov	r7, r0
 8005da8:	f300 808e 	bgt.w	8005ec8 <_dtoa_r+0x990>
 8005dac:	9b06      	ldr	r3, [sp, #24]
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	dc51      	bgt.n	8005e56 <_dtoa_r+0x91e>
 8005db2:	e089      	b.n	8005ec8 <_dtoa_r+0x990>
 8005db4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005db6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005dba:	e74b      	b.n	8005c54 <_dtoa_r+0x71c>
 8005dbc:	9b03      	ldr	r3, [sp, #12]
 8005dbe:	1e5e      	subs	r6, r3, #1
 8005dc0:	9b07      	ldr	r3, [sp, #28]
 8005dc2:	42b3      	cmp	r3, r6
 8005dc4:	bfbf      	itttt	lt
 8005dc6:	9b07      	ldrlt	r3, [sp, #28]
 8005dc8:	9607      	strlt	r6, [sp, #28]
 8005dca:	1af2      	sublt	r2, r6, r3
 8005dcc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005dce:	bfb6      	itet	lt
 8005dd0:	189b      	addlt	r3, r3, r2
 8005dd2:	1b9e      	subge	r6, r3, r6
 8005dd4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005dd6:	9b03      	ldr	r3, [sp, #12]
 8005dd8:	bfb8      	it	lt
 8005dda:	2600      	movlt	r6, #0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	bfb7      	itett	lt
 8005de0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005de4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005de8:	1a9d      	sublt	r5, r3, r2
 8005dea:	2300      	movlt	r3, #0
 8005dec:	e734      	b.n	8005c58 <_dtoa_r+0x720>
 8005dee:	9e07      	ldr	r6, [sp, #28]
 8005df0:	9d04      	ldr	r5, [sp, #16]
 8005df2:	9f08      	ldr	r7, [sp, #32]
 8005df4:	e73b      	b.n	8005c6e <_dtoa_r+0x736>
 8005df6:	9a07      	ldr	r2, [sp, #28]
 8005df8:	e767      	b.n	8005cca <_dtoa_r+0x792>
 8005dfa:	9b06      	ldr	r3, [sp, #24]
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	dc18      	bgt.n	8005e32 <_dtoa_r+0x8fa>
 8005e00:	f1ba 0f00 	cmp.w	sl, #0
 8005e04:	d115      	bne.n	8005e32 <_dtoa_r+0x8fa>
 8005e06:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005e0a:	b993      	cbnz	r3, 8005e32 <_dtoa_r+0x8fa>
 8005e0c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005e10:	0d1b      	lsrs	r3, r3, #20
 8005e12:	051b      	lsls	r3, r3, #20
 8005e14:	b183      	cbz	r3, 8005e38 <_dtoa_r+0x900>
 8005e16:	9b04      	ldr	r3, [sp, #16]
 8005e18:	3301      	adds	r3, #1
 8005e1a:	9304      	str	r3, [sp, #16]
 8005e1c:	9b05      	ldr	r3, [sp, #20]
 8005e1e:	3301      	adds	r3, #1
 8005e20:	9305      	str	r3, [sp, #20]
 8005e22:	f04f 0801 	mov.w	r8, #1
 8005e26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	f47f af6a 	bne.w	8005d02 <_dtoa_r+0x7ca>
 8005e2e:	2001      	movs	r0, #1
 8005e30:	e76f      	b.n	8005d12 <_dtoa_r+0x7da>
 8005e32:	f04f 0800 	mov.w	r8, #0
 8005e36:	e7f6      	b.n	8005e26 <_dtoa_r+0x8ee>
 8005e38:	4698      	mov	r8, r3
 8005e3a:	e7f4      	b.n	8005e26 <_dtoa_r+0x8ee>
 8005e3c:	f43f af7d 	beq.w	8005d3a <_dtoa_r+0x802>
 8005e40:	4618      	mov	r0, r3
 8005e42:	301c      	adds	r0, #28
 8005e44:	e772      	b.n	8005d2c <_dtoa_r+0x7f4>
 8005e46:	9b03      	ldr	r3, [sp, #12]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	dc37      	bgt.n	8005ebc <_dtoa_r+0x984>
 8005e4c:	9b06      	ldr	r3, [sp, #24]
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	dd34      	ble.n	8005ebc <_dtoa_r+0x984>
 8005e52:	9b03      	ldr	r3, [sp, #12]
 8005e54:	9302      	str	r3, [sp, #8]
 8005e56:	9b02      	ldr	r3, [sp, #8]
 8005e58:	b96b      	cbnz	r3, 8005e76 <_dtoa_r+0x93e>
 8005e5a:	4631      	mov	r1, r6
 8005e5c:	2205      	movs	r2, #5
 8005e5e:	4620      	mov	r0, r4
 8005e60:	f000 f9ca 	bl	80061f8 <__multadd>
 8005e64:	4601      	mov	r1, r0
 8005e66:	4606      	mov	r6, r0
 8005e68:	ee18 0a10 	vmov	r0, s16
 8005e6c:	f000 fbe4 	bl	8006638 <__mcmp>
 8005e70:	2800      	cmp	r0, #0
 8005e72:	f73f adbb 	bgt.w	80059ec <_dtoa_r+0x4b4>
 8005e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e78:	9d01      	ldr	r5, [sp, #4]
 8005e7a:	43db      	mvns	r3, r3
 8005e7c:	9300      	str	r3, [sp, #0]
 8005e7e:	f04f 0800 	mov.w	r8, #0
 8005e82:	4631      	mov	r1, r6
 8005e84:	4620      	mov	r0, r4
 8005e86:	f000 f995 	bl	80061b4 <_Bfree>
 8005e8a:	2f00      	cmp	r7, #0
 8005e8c:	f43f aea4 	beq.w	8005bd8 <_dtoa_r+0x6a0>
 8005e90:	f1b8 0f00 	cmp.w	r8, #0
 8005e94:	d005      	beq.n	8005ea2 <_dtoa_r+0x96a>
 8005e96:	45b8      	cmp	r8, r7
 8005e98:	d003      	beq.n	8005ea2 <_dtoa_r+0x96a>
 8005e9a:	4641      	mov	r1, r8
 8005e9c:	4620      	mov	r0, r4
 8005e9e:	f000 f989 	bl	80061b4 <_Bfree>
 8005ea2:	4639      	mov	r1, r7
 8005ea4:	4620      	mov	r0, r4
 8005ea6:	f000 f985 	bl	80061b4 <_Bfree>
 8005eaa:	e695      	b.n	8005bd8 <_dtoa_r+0x6a0>
 8005eac:	2600      	movs	r6, #0
 8005eae:	4637      	mov	r7, r6
 8005eb0:	e7e1      	b.n	8005e76 <_dtoa_r+0x93e>
 8005eb2:	9700      	str	r7, [sp, #0]
 8005eb4:	4637      	mov	r7, r6
 8005eb6:	e599      	b.n	80059ec <_dtoa_r+0x4b4>
 8005eb8:	40240000 	.word	0x40240000
 8005ebc:	9b08      	ldr	r3, [sp, #32]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	f000 80ca 	beq.w	8006058 <_dtoa_r+0xb20>
 8005ec4:	9b03      	ldr	r3, [sp, #12]
 8005ec6:	9302      	str	r3, [sp, #8]
 8005ec8:	2d00      	cmp	r5, #0
 8005eca:	dd05      	ble.n	8005ed8 <_dtoa_r+0x9a0>
 8005ecc:	4639      	mov	r1, r7
 8005ece:	462a      	mov	r2, r5
 8005ed0:	4620      	mov	r0, r4
 8005ed2:	f000 fb41 	bl	8006558 <__lshift>
 8005ed6:	4607      	mov	r7, r0
 8005ed8:	f1b8 0f00 	cmp.w	r8, #0
 8005edc:	d05b      	beq.n	8005f96 <_dtoa_r+0xa5e>
 8005ede:	6879      	ldr	r1, [r7, #4]
 8005ee0:	4620      	mov	r0, r4
 8005ee2:	f000 f927 	bl	8006134 <_Balloc>
 8005ee6:	4605      	mov	r5, r0
 8005ee8:	b928      	cbnz	r0, 8005ef6 <_dtoa_r+0x9be>
 8005eea:	4b87      	ldr	r3, [pc, #540]	; (8006108 <_dtoa_r+0xbd0>)
 8005eec:	4602      	mov	r2, r0
 8005eee:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005ef2:	f7ff bb3b 	b.w	800556c <_dtoa_r+0x34>
 8005ef6:	693a      	ldr	r2, [r7, #16]
 8005ef8:	3202      	adds	r2, #2
 8005efa:	0092      	lsls	r2, r2, #2
 8005efc:	f107 010c 	add.w	r1, r7, #12
 8005f00:	300c      	adds	r0, #12
 8005f02:	f7fe fcfb 	bl	80048fc <memcpy>
 8005f06:	2201      	movs	r2, #1
 8005f08:	4629      	mov	r1, r5
 8005f0a:	4620      	mov	r0, r4
 8005f0c:	f000 fb24 	bl	8006558 <__lshift>
 8005f10:	9b01      	ldr	r3, [sp, #4]
 8005f12:	f103 0901 	add.w	r9, r3, #1
 8005f16:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	9305      	str	r3, [sp, #20]
 8005f1e:	f00a 0301 	and.w	r3, sl, #1
 8005f22:	46b8      	mov	r8, r7
 8005f24:	9304      	str	r3, [sp, #16]
 8005f26:	4607      	mov	r7, r0
 8005f28:	4631      	mov	r1, r6
 8005f2a:	ee18 0a10 	vmov	r0, s16
 8005f2e:	f7ff fa75 	bl	800541c <quorem>
 8005f32:	4641      	mov	r1, r8
 8005f34:	9002      	str	r0, [sp, #8]
 8005f36:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005f3a:	ee18 0a10 	vmov	r0, s16
 8005f3e:	f000 fb7b 	bl	8006638 <__mcmp>
 8005f42:	463a      	mov	r2, r7
 8005f44:	9003      	str	r0, [sp, #12]
 8005f46:	4631      	mov	r1, r6
 8005f48:	4620      	mov	r0, r4
 8005f4a:	f000 fb91 	bl	8006670 <__mdiff>
 8005f4e:	68c2      	ldr	r2, [r0, #12]
 8005f50:	f109 3bff 	add.w	fp, r9, #4294967295
 8005f54:	4605      	mov	r5, r0
 8005f56:	bb02      	cbnz	r2, 8005f9a <_dtoa_r+0xa62>
 8005f58:	4601      	mov	r1, r0
 8005f5a:	ee18 0a10 	vmov	r0, s16
 8005f5e:	f000 fb6b 	bl	8006638 <__mcmp>
 8005f62:	4602      	mov	r2, r0
 8005f64:	4629      	mov	r1, r5
 8005f66:	4620      	mov	r0, r4
 8005f68:	9207      	str	r2, [sp, #28]
 8005f6a:	f000 f923 	bl	80061b4 <_Bfree>
 8005f6e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005f72:	ea43 0102 	orr.w	r1, r3, r2
 8005f76:	9b04      	ldr	r3, [sp, #16]
 8005f78:	430b      	orrs	r3, r1
 8005f7a:	464d      	mov	r5, r9
 8005f7c:	d10f      	bne.n	8005f9e <_dtoa_r+0xa66>
 8005f7e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005f82:	d02a      	beq.n	8005fda <_dtoa_r+0xaa2>
 8005f84:	9b03      	ldr	r3, [sp, #12]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	dd02      	ble.n	8005f90 <_dtoa_r+0xa58>
 8005f8a:	9b02      	ldr	r3, [sp, #8]
 8005f8c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005f90:	f88b a000 	strb.w	sl, [fp]
 8005f94:	e775      	b.n	8005e82 <_dtoa_r+0x94a>
 8005f96:	4638      	mov	r0, r7
 8005f98:	e7ba      	b.n	8005f10 <_dtoa_r+0x9d8>
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	e7e2      	b.n	8005f64 <_dtoa_r+0xa2c>
 8005f9e:	9b03      	ldr	r3, [sp, #12]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	db04      	blt.n	8005fae <_dtoa_r+0xa76>
 8005fa4:	9906      	ldr	r1, [sp, #24]
 8005fa6:	430b      	orrs	r3, r1
 8005fa8:	9904      	ldr	r1, [sp, #16]
 8005faa:	430b      	orrs	r3, r1
 8005fac:	d122      	bne.n	8005ff4 <_dtoa_r+0xabc>
 8005fae:	2a00      	cmp	r2, #0
 8005fb0:	ddee      	ble.n	8005f90 <_dtoa_r+0xa58>
 8005fb2:	ee18 1a10 	vmov	r1, s16
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	4620      	mov	r0, r4
 8005fba:	f000 facd 	bl	8006558 <__lshift>
 8005fbe:	4631      	mov	r1, r6
 8005fc0:	ee08 0a10 	vmov	s16, r0
 8005fc4:	f000 fb38 	bl	8006638 <__mcmp>
 8005fc8:	2800      	cmp	r0, #0
 8005fca:	dc03      	bgt.n	8005fd4 <_dtoa_r+0xa9c>
 8005fcc:	d1e0      	bne.n	8005f90 <_dtoa_r+0xa58>
 8005fce:	f01a 0f01 	tst.w	sl, #1
 8005fd2:	d0dd      	beq.n	8005f90 <_dtoa_r+0xa58>
 8005fd4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005fd8:	d1d7      	bne.n	8005f8a <_dtoa_r+0xa52>
 8005fda:	2339      	movs	r3, #57	; 0x39
 8005fdc:	f88b 3000 	strb.w	r3, [fp]
 8005fe0:	462b      	mov	r3, r5
 8005fe2:	461d      	mov	r5, r3
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005fea:	2a39      	cmp	r2, #57	; 0x39
 8005fec:	d071      	beq.n	80060d2 <_dtoa_r+0xb9a>
 8005fee:	3201      	adds	r2, #1
 8005ff0:	701a      	strb	r2, [r3, #0]
 8005ff2:	e746      	b.n	8005e82 <_dtoa_r+0x94a>
 8005ff4:	2a00      	cmp	r2, #0
 8005ff6:	dd07      	ble.n	8006008 <_dtoa_r+0xad0>
 8005ff8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005ffc:	d0ed      	beq.n	8005fda <_dtoa_r+0xaa2>
 8005ffe:	f10a 0301 	add.w	r3, sl, #1
 8006002:	f88b 3000 	strb.w	r3, [fp]
 8006006:	e73c      	b.n	8005e82 <_dtoa_r+0x94a>
 8006008:	9b05      	ldr	r3, [sp, #20]
 800600a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800600e:	4599      	cmp	r9, r3
 8006010:	d047      	beq.n	80060a2 <_dtoa_r+0xb6a>
 8006012:	ee18 1a10 	vmov	r1, s16
 8006016:	2300      	movs	r3, #0
 8006018:	220a      	movs	r2, #10
 800601a:	4620      	mov	r0, r4
 800601c:	f000 f8ec 	bl	80061f8 <__multadd>
 8006020:	45b8      	cmp	r8, r7
 8006022:	ee08 0a10 	vmov	s16, r0
 8006026:	f04f 0300 	mov.w	r3, #0
 800602a:	f04f 020a 	mov.w	r2, #10
 800602e:	4641      	mov	r1, r8
 8006030:	4620      	mov	r0, r4
 8006032:	d106      	bne.n	8006042 <_dtoa_r+0xb0a>
 8006034:	f000 f8e0 	bl	80061f8 <__multadd>
 8006038:	4680      	mov	r8, r0
 800603a:	4607      	mov	r7, r0
 800603c:	f109 0901 	add.w	r9, r9, #1
 8006040:	e772      	b.n	8005f28 <_dtoa_r+0x9f0>
 8006042:	f000 f8d9 	bl	80061f8 <__multadd>
 8006046:	4639      	mov	r1, r7
 8006048:	4680      	mov	r8, r0
 800604a:	2300      	movs	r3, #0
 800604c:	220a      	movs	r2, #10
 800604e:	4620      	mov	r0, r4
 8006050:	f000 f8d2 	bl	80061f8 <__multadd>
 8006054:	4607      	mov	r7, r0
 8006056:	e7f1      	b.n	800603c <_dtoa_r+0xb04>
 8006058:	9b03      	ldr	r3, [sp, #12]
 800605a:	9302      	str	r3, [sp, #8]
 800605c:	9d01      	ldr	r5, [sp, #4]
 800605e:	ee18 0a10 	vmov	r0, s16
 8006062:	4631      	mov	r1, r6
 8006064:	f7ff f9da 	bl	800541c <quorem>
 8006068:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800606c:	9b01      	ldr	r3, [sp, #4]
 800606e:	f805 ab01 	strb.w	sl, [r5], #1
 8006072:	1aea      	subs	r2, r5, r3
 8006074:	9b02      	ldr	r3, [sp, #8]
 8006076:	4293      	cmp	r3, r2
 8006078:	dd09      	ble.n	800608e <_dtoa_r+0xb56>
 800607a:	ee18 1a10 	vmov	r1, s16
 800607e:	2300      	movs	r3, #0
 8006080:	220a      	movs	r2, #10
 8006082:	4620      	mov	r0, r4
 8006084:	f000 f8b8 	bl	80061f8 <__multadd>
 8006088:	ee08 0a10 	vmov	s16, r0
 800608c:	e7e7      	b.n	800605e <_dtoa_r+0xb26>
 800608e:	9b02      	ldr	r3, [sp, #8]
 8006090:	2b00      	cmp	r3, #0
 8006092:	bfc8      	it	gt
 8006094:	461d      	movgt	r5, r3
 8006096:	9b01      	ldr	r3, [sp, #4]
 8006098:	bfd8      	it	le
 800609a:	2501      	movle	r5, #1
 800609c:	441d      	add	r5, r3
 800609e:	f04f 0800 	mov.w	r8, #0
 80060a2:	ee18 1a10 	vmov	r1, s16
 80060a6:	2201      	movs	r2, #1
 80060a8:	4620      	mov	r0, r4
 80060aa:	f000 fa55 	bl	8006558 <__lshift>
 80060ae:	4631      	mov	r1, r6
 80060b0:	ee08 0a10 	vmov	s16, r0
 80060b4:	f000 fac0 	bl	8006638 <__mcmp>
 80060b8:	2800      	cmp	r0, #0
 80060ba:	dc91      	bgt.n	8005fe0 <_dtoa_r+0xaa8>
 80060bc:	d102      	bne.n	80060c4 <_dtoa_r+0xb8c>
 80060be:	f01a 0f01 	tst.w	sl, #1
 80060c2:	d18d      	bne.n	8005fe0 <_dtoa_r+0xaa8>
 80060c4:	462b      	mov	r3, r5
 80060c6:	461d      	mov	r5, r3
 80060c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80060cc:	2a30      	cmp	r2, #48	; 0x30
 80060ce:	d0fa      	beq.n	80060c6 <_dtoa_r+0xb8e>
 80060d0:	e6d7      	b.n	8005e82 <_dtoa_r+0x94a>
 80060d2:	9a01      	ldr	r2, [sp, #4]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d184      	bne.n	8005fe2 <_dtoa_r+0xaaa>
 80060d8:	9b00      	ldr	r3, [sp, #0]
 80060da:	3301      	adds	r3, #1
 80060dc:	9300      	str	r3, [sp, #0]
 80060de:	2331      	movs	r3, #49	; 0x31
 80060e0:	7013      	strb	r3, [r2, #0]
 80060e2:	e6ce      	b.n	8005e82 <_dtoa_r+0x94a>
 80060e4:	4b09      	ldr	r3, [pc, #36]	; (800610c <_dtoa_r+0xbd4>)
 80060e6:	f7ff ba95 	b.w	8005614 <_dtoa_r+0xdc>
 80060ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f47f aa6e 	bne.w	80055ce <_dtoa_r+0x96>
 80060f2:	4b07      	ldr	r3, [pc, #28]	; (8006110 <_dtoa_r+0xbd8>)
 80060f4:	f7ff ba8e 	b.w	8005614 <_dtoa_r+0xdc>
 80060f8:	9b02      	ldr	r3, [sp, #8]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	dcae      	bgt.n	800605c <_dtoa_r+0xb24>
 80060fe:	9b06      	ldr	r3, [sp, #24]
 8006100:	2b02      	cmp	r3, #2
 8006102:	f73f aea8 	bgt.w	8005e56 <_dtoa_r+0x91e>
 8006106:	e7a9      	b.n	800605c <_dtoa_r+0xb24>
 8006108:	08007d9b 	.word	0x08007d9b
 800610c:	08007cf8 	.word	0x08007cf8
 8006110:	08007d1c 	.word	0x08007d1c

08006114 <_localeconv_r>:
 8006114:	4800      	ldr	r0, [pc, #0]	; (8006118 <_localeconv_r+0x4>)
 8006116:	4770      	bx	lr
 8006118:	20000738 	.word	0x20000738

0800611c <__malloc_lock>:
 800611c:	4801      	ldr	r0, [pc, #4]	; (8006124 <__malloc_lock+0x8>)
 800611e:	f000 bd5e 	b.w	8006bde <__retarget_lock_acquire_recursive>
 8006122:	bf00      	nop
 8006124:	200008f4 	.word	0x200008f4

08006128 <__malloc_unlock>:
 8006128:	4801      	ldr	r0, [pc, #4]	; (8006130 <__malloc_unlock+0x8>)
 800612a:	f000 bd59 	b.w	8006be0 <__retarget_lock_release_recursive>
 800612e:	bf00      	nop
 8006130:	200008f4 	.word	0x200008f4

08006134 <_Balloc>:
 8006134:	b570      	push	{r4, r5, r6, lr}
 8006136:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006138:	4604      	mov	r4, r0
 800613a:	460d      	mov	r5, r1
 800613c:	b976      	cbnz	r6, 800615c <_Balloc+0x28>
 800613e:	2010      	movs	r0, #16
 8006140:	f7fe fbd4 	bl	80048ec <malloc>
 8006144:	4602      	mov	r2, r0
 8006146:	6260      	str	r0, [r4, #36]	; 0x24
 8006148:	b920      	cbnz	r0, 8006154 <_Balloc+0x20>
 800614a:	4b18      	ldr	r3, [pc, #96]	; (80061ac <_Balloc+0x78>)
 800614c:	4818      	ldr	r0, [pc, #96]	; (80061b0 <_Balloc+0x7c>)
 800614e:	2166      	movs	r1, #102	; 0x66
 8006150:	f000 fd14 	bl	8006b7c <__assert_func>
 8006154:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006158:	6006      	str	r6, [r0, #0]
 800615a:	60c6      	str	r6, [r0, #12]
 800615c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800615e:	68f3      	ldr	r3, [r6, #12]
 8006160:	b183      	cbz	r3, 8006184 <_Balloc+0x50>
 8006162:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800616a:	b9b8      	cbnz	r0, 800619c <_Balloc+0x68>
 800616c:	2101      	movs	r1, #1
 800616e:	fa01 f605 	lsl.w	r6, r1, r5
 8006172:	1d72      	adds	r2, r6, #5
 8006174:	0092      	lsls	r2, r2, #2
 8006176:	4620      	mov	r0, r4
 8006178:	f000 fb60 	bl	800683c <_calloc_r>
 800617c:	b160      	cbz	r0, 8006198 <_Balloc+0x64>
 800617e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006182:	e00e      	b.n	80061a2 <_Balloc+0x6e>
 8006184:	2221      	movs	r2, #33	; 0x21
 8006186:	2104      	movs	r1, #4
 8006188:	4620      	mov	r0, r4
 800618a:	f000 fb57 	bl	800683c <_calloc_r>
 800618e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006190:	60f0      	str	r0, [r6, #12]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d1e4      	bne.n	8006162 <_Balloc+0x2e>
 8006198:	2000      	movs	r0, #0
 800619a:	bd70      	pop	{r4, r5, r6, pc}
 800619c:	6802      	ldr	r2, [r0, #0]
 800619e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80061a2:	2300      	movs	r3, #0
 80061a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80061a8:	e7f7      	b.n	800619a <_Balloc+0x66>
 80061aa:	bf00      	nop
 80061ac:	08007d29 	.word	0x08007d29
 80061b0:	08007dac 	.word	0x08007dac

080061b4 <_Bfree>:
 80061b4:	b570      	push	{r4, r5, r6, lr}
 80061b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80061b8:	4605      	mov	r5, r0
 80061ba:	460c      	mov	r4, r1
 80061bc:	b976      	cbnz	r6, 80061dc <_Bfree+0x28>
 80061be:	2010      	movs	r0, #16
 80061c0:	f7fe fb94 	bl	80048ec <malloc>
 80061c4:	4602      	mov	r2, r0
 80061c6:	6268      	str	r0, [r5, #36]	; 0x24
 80061c8:	b920      	cbnz	r0, 80061d4 <_Bfree+0x20>
 80061ca:	4b09      	ldr	r3, [pc, #36]	; (80061f0 <_Bfree+0x3c>)
 80061cc:	4809      	ldr	r0, [pc, #36]	; (80061f4 <_Bfree+0x40>)
 80061ce:	218a      	movs	r1, #138	; 0x8a
 80061d0:	f000 fcd4 	bl	8006b7c <__assert_func>
 80061d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80061d8:	6006      	str	r6, [r0, #0]
 80061da:	60c6      	str	r6, [r0, #12]
 80061dc:	b13c      	cbz	r4, 80061ee <_Bfree+0x3a>
 80061de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80061e0:	6862      	ldr	r2, [r4, #4]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80061e8:	6021      	str	r1, [r4, #0]
 80061ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80061ee:	bd70      	pop	{r4, r5, r6, pc}
 80061f0:	08007d29 	.word	0x08007d29
 80061f4:	08007dac 	.word	0x08007dac

080061f8 <__multadd>:
 80061f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061fc:	690d      	ldr	r5, [r1, #16]
 80061fe:	4607      	mov	r7, r0
 8006200:	460c      	mov	r4, r1
 8006202:	461e      	mov	r6, r3
 8006204:	f101 0c14 	add.w	ip, r1, #20
 8006208:	2000      	movs	r0, #0
 800620a:	f8dc 3000 	ldr.w	r3, [ip]
 800620e:	b299      	uxth	r1, r3
 8006210:	fb02 6101 	mla	r1, r2, r1, r6
 8006214:	0c1e      	lsrs	r6, r3, #16
 8006216:	0c0b      	lsrs	r3, r1, #16
 8006218:	fb02 3306 	mla	r3, r2, r6, r3
 800621c:	b289      	uxth	r1, r1
 800621e:	3001      	adds	r0, #1
 8006220:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006224:	4285      	cmp	r5, r0
 8006226:	f84c 1b04 	str.w	r1, [ip], #4
 800622a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800622e:	dcec      	bgt.n	800620a <__multadd+0x12>
 8006230:	b30e      	cbz	r6, 8006276 <__multadd+0x7e>
 8006232:	68a3      	ldr	r3, [r4, #8]
 8006234:	42ab      	cmp	r3, r5
 8006236:	dc19      	bgt.n	800626c <__multadd+0x74>
 8006238:	6861      	ldr	r1, [r4, #4]
 800623a:	4638      	mov	r0, r7
 800623c:	3101      	adds	r1, #1
 800623e:	f7ff ff79 	bl	8006134 <_Balloc>
 8006242:	4680      	mov	r8, r0
 8006244:	b928      	cbnz	r0, 8006252 <__multadd+0x5a>
 8006246:	4602      	mov	r2, r0
 8006248:	4b0c      	ldr	r3, [pc, #48]	; (800627c <__multadd+0x84>)
 800624a:	480d      	ldr	r0, [pc, #52]	; (8006280 <__multadd+0x88>)
 800624c:	21b5      	movs	r1, #181	; 0xb5
 800624e:	f000 fc95 	bl	8006b7c <__assert_func>
 8006252:	6922      	ldr	r2, [r4, #16]
 8006254:	3202      	adds	r2, #2
 8006256:	f104 010c 	add.w	r1, r4, #12
 800625a:	0092      	lsls	r2, r2, #2
 800625c:	300c      	adds	r0, #12
 800625e:	f7fe fb4d 	bl	80048fc <memcpy>
 8006262:	4621      	mov	r1, r4
 8006264:	4638      	mov	r0, r7
 8006266:	f7ff ffa5 	bl	80061b4 <_Bfree>
 800626a:	4644      	mov	r4, r8
 800626c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006270:	3501      	adds	r5, #1
 8006272:	615e      	str	r6, [r3, #20]
 8006274:	6125      	str	r5, [r4, #16]
 8006276:	4620      	mov	r0, r4
 8006278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800627c:	08007d9b 	.word	0x08007d9b
 8006280:	08007dac 	.word	0x08007dac

08006284 <__hi0bits>:
 8006284:	0c03      	lsrs	r3, r0, #16
 8006286:	041b      	lsls	r3, r3, #16
 8006288:	b9d3      	cbnz	r3, 80062c0 <__hi0bits+0x3c>
 800628a:	0400      	lsls	r0, r0, #16
 800628c:	2310      	movs	r3, #16
 800628e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006292:	bf04      	itt	eq
 8006294:	0200      	lsleq	r0, r0, #8
 8006296:	3308      	addeq	r3, #8
 8006298:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800629c:	bf04      	itt	eq
 800629e:	0100      	lsleq	r0, r0, #4
 80062a0:	3304      	addeq	r3, #4
 80062a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80062a6:	bf04      	itt	eq
 80062a8:	0080      	lsleq	r0, r0, #2
 80062aa:	3302      	addeq	r3, #2
 80062ac:	2800      	cmp	r0, #0
 80062ae:	db05      	blt.n	80062bc <__hi0bits+0x38>
 80062b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80062b4:	f103 0301 	add.w	r3, r3, #1
 80062b8:	bf08      	it	eq
 80062ba:	2320      	moveq	r3, #32
 80062bc:	4618      	mov	r0, r3
 80062be:	4770      	bx	lr
 80062c0:	2300      	movs	r3, #0
 80062c2:	e7e4      	b.n	800628e <__hi0bits+0xa>

080062c4 <__lo0bits>:
 80062c4:	6803      	ldr	r3, [r0, #0]
 80062c6:	f013 0207 	ands.w	r2, r3, #7
 80062ca:	4601      	mov	r1, r0
 80062cc:	d00b      	beq.n	80062e6 <__lo0bits+0x22>
 80062ce:	07da      	lsls	r2, r3, #31
 80062d0:	d423      	bmi.n	800631a <__lo0bits+0x56>
 80062d2:	0798      	lsls	r0, r3, #30
 80062d4:	bf49      	itett	mi
 80062d6:	085b      	lsrmi	r3, r3, #1
 80062d8:	089b      	lsrpl	r3, r3, #2
 80062da:	2001      	movmi	r0, #1
 80062dc:	600b      	strmi	r3, [r1, #0]
 80062de:	bf5c      	itt	pl
 80062e0:	600b      	strpl	r3, [r1, #0]
 80062e2:	2002      	movpl	r0, #2
 80062e4:	4770      	bx	lr
 80062e6:	b298      	uxth	r0, r3
 80062e8:	b9a8      	cbnz	r0, 8006316 <__lo0bits+0x52>
 80062ea:	0c1b      	lsrs	r3, r3, #16
 80062ec:	2010      	movs	r0, #16
 80062ee:	b2da      	uxtb	r2, r3
 80062f0:	b90a      	cbnz	r2, 80062f6 <__lo0bits+0x32>
 80062f2:	3008      	adds	r0, #8
 80062f4:	0a1b      	lsrs	r3, r3, #8
 80062f6:	071a      	lsls	r2, r3, #28
 80062f8:	bf04      	itt	eq
 80062fa:	091b      	lsreq	r3, r3, #4
 80062fc:	3004      	addeq	r0, #4
 80062fe:	079a      	lsls	r2, r3, #30
 8006300:	bf04      	itt	eq
 8006302:	089b      	lsreq	r3, r3, #2
 8006304:	3002      	addeq	r0, #2
 8006306:	07da      	lsls	r2, r3, #31
 8006308:	d403      	bmi.n	8006312 <__lo0bits+0x4e>
 800630a:	085b      	lsrs	r3, r3, #1
 800630c:	f100 0001 	add.w	r0, r0, #1
 8006310:	d005      	beq.n	800631e <__lo0bits+0x5a>
 8006312:	600b      	str	r3, [r1, #0]
 8006314:	4770      	bx	lr
 8006316:	4610      	mov	r0, r2
 8006318:	e7e9      	b.n	80062ee <__lo0bits+0x2a>
 800631a:	2000      	movs	r0, #0
 800631c:	4770      	bx	lr
 800631e:	2020      	movs	r0, #32
 8006320:	4770      	bx	lr
	...

08006324 <__i2b>:
 8006324:	b510      	push	{r4, lr}
 8006326:	460c      	mov	r4, r1
 8006328:	2101      	movs	r1, #1
 800632a:	f7ff ff03 	bl	8006134 <_Balloc>
 800632e:	4602      	mov	r2, r0
 8006330:	b928      	cbnz	r0, 800633e <__i2b+0x1a>
 8006332:	4b05      	ldr	r3, [pc, #20]	; (8006348 <__i2b+0x24>)
 8006334:	4805      	ldr	r0, [pc, #20]	; (800634c <__i2b+0x28>)
 8006336:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800633a:	f000 fc1f 	bl	8006b7c <__assert_func>
 800633e:	2301      	movs	r3, #1
 8006340:	6144      	str	r4, [r0, #20]
 8006342:	6103      	str	r3, [r0, #16]
 8006344:	bd10      	pop	{r4, pc}
 8006346:	bf00      	nop
 8006348:	08007d9b 	.word	0x08007d9b
 800634c:	08007dac 	.word	0x08007dac

08006350 <__multiply>:
 8006350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006354:	4691      	mov	r9, r2
 8006356:	690a      	ldr	r2, [r1, #16]
 8006358:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800635c:	429a      	cmp	r2, r3
 800635e:	bfb8      	it	lt
 8006360:	460b      	movlt	r3, r1
 8006362:	460c      	mov	r4, r1
 8006364:	bfbc      	itt	lt
 8006366:	464c      	movlt	r4, r9
 8006368:	4699      	movlt	r9, r3
 800636a:	6927      	ldr	r7, [r4, #16]
 800636c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006370:	68a3      	ldr	r3, [r4, #8]
 8006372:	6861      	ldr	r1, [r4, #4]
 8006374:	eb07 060a 	add.w	r6, r7, sl
 8006378:	42b3      	cmp	r3, r6
 800637a:	b085      	sub	sp, #20
 800637c:	bfb8      	it	lt
 800637e:	3101      	addlt	r1, #1
 8006380:	f7ff fed8 	bl	8006134 <_Balloc>
 8006384:	b930      	cbnz	r0, 8006394 <__multiply+0x44>
 8006386:	4602      	mov	r2, r0
 8006388:	4b44      	ldr	r3, [pc, #272]	; (800649c <__multiply+0x14c>)
 800638a:	4845      	ldr	r0, [pc, #276]	; (80064a0 <__multiply+0x150>)
 800638c:	f240 115d 	movw	r1, #349	; 0x15d
 8006390:	f000 fbf4 	bl	8006b7c <__assert_func>
 8006394:	f100 0514 	add.w	r5, r0, #20
 8006398:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800639c:	462b      	mov	r3, r5
 800639e:	2200      	movs	r2, #0
 80063a0:	4543      	cmp	r3, r8
 80063a2:	d321      	bcc.n	80063e8 <__multiply+0x98>
 80063a4:	f104 0314 	add.w	r3, r4, #20
 80063a8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80063ac:	f109 0314 	add.w	r3, r9, #20
 80063b0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80063b4:	9202      	str	r2, [sp, #8]
 80063b6:	1b3a      	subs	r2, r7, r4
 80063b8:	3a15      	subs	r2, #21
 80063ba:	f022 0203 	bic.w	r2, r2, #3
 80063be:	3204      	adds	r2, #4
 80063c0:	f104 0115 	add.w	r1, r4, #21
 80063c4:	428f      	cmp	r7, r1
 80063c6:	bf38      	it	cc
 80063c8:	2204      	movcc	r2, #4
 80063ca:	9201      	str	r2, [sp, #4]
 80063cc:	9a02      	ldr	r2, [sp, #8]
 80063ce:	9303      	str	r3, [sp, #12]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d80c      	bhi.n	80063ee <__multiply+0x9e>
 80063d4:	2e00      	cmp	r6, #0
 80063d6:	dd03      	ble.n	80063e0 <__multiply+0x90>
 80063d8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d05a      	beq.n	8006496 <__multiply+0x146>
 80063e0:	6106      	str	r6, [r0, #16]
 80063e2:	b005      	add	sp, #20
 80063e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063e8:	f843 2b04 	str.w	r2, [r3], #4
 80063ec:	e7d8      	b.n	80063a0 <__multiply+0x50>
 80063ee:	f8b3 a000 	ldrh.w	sl, [r3]
 80063f2:	f1ba 0f00 	cmp.w	sl, #0
 80063f6:	d024      	beq.n	8006442 <__multiply+0xf2>
 80063f8:	f104 0e14 	add.w	lr, r4, #20
 80063fc:	46a9      	mov	r9, r5
 80063fe:	f04f 0c00 	mov.w	ip, #0
 8006402:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006406:	f8d9 1000 	ldr.w	r1, [r9]
 800640a:	fa1f fb82 	uxth.w	fp, r2
 800640e:	b289      	uxth	r1, r1
 8006410:	fb0a 110b 	mla	r1, sl, fp, r1
 8006414:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006418:	f8d9 2000 	ldr.w	r2, [r9]
 800641c:	4461      	add	r1, ip
 800641e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006422:	fb0a c20b 	mla	r2, sl, fp, ip
 8006426:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800642a:	b289      	uxth	r1, r1
 800642c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006430:	4577      	cmp	r7, lr
 8006432:	f849 1b04 	str.w	r1, [r9], #4
 8006436:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800643a:	d8e2      	bhi.n	8006402 <__multiply+0xb2>
 800643c:	9a01      	ldr	r2, [sp, #4]
 800643e:	f845 c002 	str.w	ip, [r5, r2]
 8006442:	9a03      	ldr	r2, [sp, #12]
 8006444:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006448:	3304      	adds	r3, #4
 800644a:	f1b9 0f00 	cmp.w	r9, #0
 800644e:	d020      	beq.n	8006492 <__multiply+0x142>
 8006450:	6829      	ldr	r1, [r5, #0]
 8006452:	f104 0c14 	add.w	ip, r4, #20
 8006456:	46ae      	mov	lr, r5
 8006458:	f04f 0a00 	mov.w	sl, #0
 800645c:	f8bc b000 	ldrh.w	fp, [ip]
 8006460:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006464:	fb09 220b 	mla	r2, r9, fp, r2
 8006468:	4492      	add	sl, r2
 800646a:	b289      	uxth	r1, r1
 800646c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006470:	f84e 1b04 	str.w	r1, [lr], #4
 8006474:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006478:	f8be 1000 	ldrh.w	r1, [lr]
 800647c:	0c12      	lsrs	r2, r2, #16
 800647e:	fb09 1102 	mla	r1, r9, r2, r1
 8006482:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006486:	4567      	cmp	r7, ip
 8006488:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800648c:	d8e6      	bhi.n	800645c <__multiply+0x10c>
 800648e:	9a01      	ldr	r2, [sp, #4]
 8006490:	50a9      	str	r1, [r5, r2]
 8006492:	3504      	adds	r5, #4
 8006494:	e79a      	b.n	80063cc <__multiply+0x7c>
 8006496:	3e01      	subs	r6, #1
 8006498:	e79c      	b.n	80063d4 <__multiply+0x84>
 800649a:	bf00      	nop
 800649c:	08007d9b 	.word	0x08007d9b
 80064a0:	08007dac 	.word	0x08007dac

080064a4 <__pow5mult>:
 80064a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064a8:	4615      	mov	r5, r2
 80064aa:	f012 0203 	ands.w	r2, r2, #3
 80064ae:	4606      	mov	r6, r0
 80064b0:	460f      	mov	r7, r1
 80064b2:	d007      	beq.n	80064c4 <__pow5mult+0x20>
 80064b4:	4c25      	ldr	r4, [pc, #148]	; (800654c <__pow5mult+0xa8>)
 80064b6:	3a01      	subs	r2, #1
 80064b8:	2300      	movs	r3, #0
 80064ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80064be:	f7ff fe9b 	bl	80061f8 <__multadd>
 80064c2:	4607      	mov	r7, r0
 80064c4:	10ad      	asrs	r5, r5, #2
 80064c6:	d03d      	beq.n	8006544 <__pow5mult+0xa0>
 80064c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80064ca:	b97c      	cbnz	r4, 80064ec <__pow5mult+0x48>
 80064cc:	2010      	movs	r0, #16
 80064ce:	f7fe fa0d 	bl	80048ec <malloc>
 80064d2:	4602      	mov	r2, r0
 80064d4:	6270      	str	r0, [r6, #36]	; 0x24
 80064d6:	b928      	cbnz	r0, 80064e4 <__pow5mult+0x40>
 80064d8:	4b1d      	ldr	r3, [pc, #116]	; (8006550 <__pow5mult+0xac>)
 80064da:	481e      	ldr	r0, [pc, #120]	; (8006554 <__pow5mult+0xb0>)
 80064dc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80064e0:	f000 fb4c 	bl	8006b7c <__assert_func>
 80064e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80064e8:	6004      	str	r4, [r0, #0]
 80064ea:	60c4      	str	r4, [r0, #12]
 80064ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80064f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80064f4:	b94c      	cbnz	r4, 800650a <__pow5mult+0x66>
 80064f6:	f240 2171 	movw	r1, #625	; 0x271
 80064fa:	4630      	mov	r0, r6
 80064fc:	f7ff ff12 	bl	8006324 <__i2b>
 8006500:	2300      	movs	r3, #0
 8006502:	f8c8 0008 	str.w	r0, [r8, #8]
 8006506:	4604      	mov	r4, r0
 8006508:	6003      	str	r3, [r0, #0]
 800650a:	f04f 0900 	mov.w	r9, #0
 800650e:	07eb      	lsls	r3, r5, #31
 8006510:	d50a      	bpl.n	8006528 <__pow5mult+0x84>
 8006512:	4639      	mov	r1, r7
 8006514:	4622      	mov	r2, r4
 8006516:	4630      	mov	r0, r6
 8006518:	f7ff ff1a 	bl	8006350 <__multiply>
 800651c:	4639      	mov	r1, r7
 800651e:	4680      	mov	r8, r0
 8006520:	4630      	mov	r0, r6
 8006522:	f7ff fe47 	bl	80061b4 <_Bfree>
 8006526:	4647      	mov	r7, r8
 8006528:	106d      	asrs	r5, r5, #1
 800652a:	d00b      	beq.n	8006544 <__pow5mult+0xa0>
 800652c:	6820      	ldr	r0, [r4, #0]
 800652e:	b938      	cbnz	r0, 8006540 <__pow5mult+0x9c>
 8006530:	4622      	mov	r2, r4
 8006532:	4621      	mov	r1, r4
 8006534:	4630      	mov	r0, r6
 8006536:	f7ff ff0b 	bl	8006350 <__multiply>
 800653a:	6020      	str	r0, [r4, #0]
 800653c:	f8c0 9000 	str.w	r9, [r0]
 8006540:	4604      	mov	r4, r0
 8006542:	e7e4      	b.n	800650e <__pow5mult+0x6a>
 8006544:	4638      	mov	r0, r7
 8006546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800654a:	bf00      	nop
 800654c:	08007ef8 	.word	0x08007ef8
 8006550:	08007d29 	.word	0x08007d29
 8006554:	08007dac 	.word	0x08007dac

08006558 <__lshift>:
 8006558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800655c:	460c      	mov	r4, r1
 800655e:	6849      	ldr	r1, [r1, #4]
 8006560:	6923      	ldr	r3, [r4, #16]
 8006562:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006566:	68a3      	ldr	r3, [r4, #8]
 8006568:	4607      	mov	r7, r0
 800656a:	4691      	mov	r9, r2
 800656c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006570:	f108 0601 	add.w	r6, r8, #1
 8006574:	42b3      	cmp	r3, r6
 8006576:	db0b      	blt.n	8006590 <__lshift+0x38>
 8006578:	4638      	mov	r0, r7
 800657a:	f7ff fddb 	bl	8006134 <_Balloc>
 800657e:	4605      	mov	r5, r0
 8006580:	b948      	cbnz	r0, 8006596 <__lshift+0x3e>
 8006582:	4602      	mov	r2, r0
 8006584:	4b2a      	ldr	r3, [pc, #168]	; (8006630 <__lshift+0xd8>)
 8006586:	482b      	ldr	r0, [pc, #172]	; (8006634 <__lshift+0xdc>)
 8006588:	f240 11d9 	movw	r1, #473	; 0x1d9
 800658c:	f000 faf6 	bl	8006b7c <__assert_func>
 8006590:	3101      	adds	r1, #1
 8006592:	005b      	lsls	r3, r3, #1
 8006594:	e7ee      	b.n	8006574 <__lshift+0x1c>
 8006596:	2300      	movs	r3, #0
 8006598:	f100 0114 	add.w	r1, r0, #20
 800659c:	f100 0210 	add.w	r2, r0, #16
 80065a0:	4618      	mov	r0, r3
 80065a2:	4553      	cmp	r3, sl
 80065a4:	db37      	blt.n	8006616 <__lshift+0xbe>
 80065a6:	6920      	ldr	r0, [r4, #16]
 80065a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80065ac:	f104 0314 	add.w	r3, r4, #20
 80065b0:	f019 091f 	ands.w	r9, r9, #31
 80065b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80065b8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80065bc:	d02f      	beq.n	800661e <__lshift+0xc6>
 80065be:	f1c9 0e20 	rsb	lr, r9, #32
 80065c2:	468a      	mov	sl, r1
 80065c4:	f04f 0c00 	mov.w	ip, #0
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	fa02 f209 	lsl.w	r2, r2, r9
 80065ce:	ea42 020c 	orr.w	r2, r2, ip
 80065d2:	f84a 2b04 	str.w	r2, [sl], #4
 80065d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80065da:	4298      	cmp	r0, r3
 80065dc:	fa22 fc0e 	lsr.w	ip, r2, lr
 80065e0:	d8f2      	bhi.n	80065c8 <__lshift+0x70>
 80065e2:	1b03      	subs	r3, r0, r4
 80065e4:	3b15      	subs	r3, #21
 80065e6:	f023 0303 	bic.w	r3, r3, #3
 80065ea:	3304      	adds	r3, #4
 80065ec:	f104 0215 	add.w	r2, r4, #21
 80065f0:	4290      	cmp	r0, r2
 80065f2:	bf38      	it	cc
 80065f4:	2304      	movcc	r3, #4
 80065f6:	f841 c003 	str.w	ip, [r1, r3]
 80065fa:	f1bc 0f00 	cmp.w	ip, #0
 80065fe:	d001      	beq.n	8006604 <__lshift+0xac>
 8006600:	f108 0602 	add.w	r6, r8, #2
 8006604:	3e01      	subs	r6, #1
 8006606:	4638      	mov	r0, r7
 8006608:	612e      	str	r6, [r5, #16]
 800660a:	4621      	mov	r1, r4
 800660c:	f7ff fdd2 	bl	80061b4 <_Bfree>
 8006610:	4628      	mov	r0, r5
 8006612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006616:	f842 0f04 	str.w	r0, [r2, #4]!
 800661a:	3301      	adds	r3, #1
 800661c:	e7c1      	b.n	80065a2 <__lshift+0x4a>
 800661e:	3904      	subs	r1, #4
 8006620:	f853 2b04 	ldr.w	r2, [r3], #4
 8006624:	f841 2f04 	str.w	r2, [r1, #4]!
 8006628:	4298      	cmp	r0, r3
 800662a:	d8f9      	bhi.n	8006620 <__lshift+0xc8>
 800662c:	e7ea      	b.n	8006604 <__lshift+0xac>
 800662e:	bf00      	nop
 8006630:	08007d9b 	.word	0x08007d9b
 8006634:	08007dac 	.word	0x08007dac

08006638 <__mcmp>:
 8006638:	b530      	push	{r4, r5, lr}
 800663a:	6902      	ldr	r2, [r0, #16]
 800663c:	690c      	ldr	r4, [r1, #16]
 800663e:	1b12      	subs	r2, r2, r4
 8006640:	d10e      	bne.n	8006660 <__mcmp+0x28>
 8006642:	f100 0314 	add.w	r3, r0, #20
 8006646:	3114      	adds	r1, #20
 8006648:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800664c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006650:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006654:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006658:	42a5      	cmp	r5, r4
 800665a:	d003      	beq.n	8006664 <__mcmp+0x2c>
 800665c:	d305      	bcc.n	800666a <__mcmp+0x32>
 800665e:	2201      	movs	r2, #1
 8006660:	4610      	mov	r0, r2
 8006662:	bd30      	pop	{r4, r5, pc}
 8006664:	4283      	cmp	r3, r0
 8006666:	d3f3      	bcc.n	8006650 <__mcmp+0x18>
 8006668:	e7fa      	b.n	8006660 <__mcmp+0x28>
 800666a:	f04f 32ff 	mov.w	r2, #4294967295
 800666e:	e7f7      	b.n	8006660 <__mcmp+0x28>

08006670 <__mdiff>:
 8006670:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006674:	460c      	mov	r4, r1
 8006676:	4606      	mov	r6, r0
 8006678:	4611      	mov	r1, r2
 800667a:	4620      	mov	r0, r4
 800667c:	4690      	mov	r8, r2
 800667e:	f7ff ffdb 	bl	8006638 <__mcmp>
 8006682:	1e05      	subs	r5, r0, #0
 8006684:	d110      	bne.n	80066a8 <__mdiff+0x38>
 8006686:	4629      	mov	r1, r5
 8006688:	4630      	mov	r0, r6
 800668a:	f7ff fd53 	bl	8006134 <_Balloc>
 800668e:	b930      	cbnz	r0, 800669e <__mdiff+0x2e>
 8006690:	4b3a      	ldr	r3, [pc, #232]	; (800677c <__mdiff+0x10c>)
 8006692:	4602      	mov	r2, r0
 8006694:	f240 2132 	movw	r1, #562	; 0x232
 8006698:	4839      	ldr	r0, [pc, #228]	; (8006780 <__mdiff+0x110>)
 800669a:	f000 fa6f 	bl	8006b7c <__assert_func>
 800669e:	2301      	movs	r3, #1
 80066a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80066a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066a8:	bfa4      	itt	ge
 80066aa:	4643      	movge	r3, r8
 80066ac:	46a0      	movge	r8, r4
 80066ae:	4630      	mov	r0, r6
 80066b0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80066b4:	bfa6      	itte	ge
 80066b6:	461c      	movge	r4, r3
 80066b8:	2500      	movge	r5, #0
 80066ba:	2501      	movlt	r5, #1
 80066bc:	f7ff fd3a 	bl	8006134 <_Balloc>
 80066c0:	b920      	cbnz	r0, 80066cc <__mdiff+0x5c>
 80066c2:	4b2e      	ldr	r3, [pc, #184]	; (800677c <__mdiff+0x10c>)
 80066c4:	4602      	mov	r2, r0
 80066c6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80066ca:	e7e5      	b.n	8006698 <__mdiff+0x28>
 80066cc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80066d0:	6926      	ldr	r6, [r4, #16]
 80066d2:	60c5      	str	r5, [r0, #12]
 80066d4:	f104 0914 	add.w	r9, r4, #20
 80066d8:	f108 0514 	add.w	r5, r8, #20
 80066dc:	f100 0e14 	add.w	lr, r0, #20
 80066e0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80066e4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80066e8:	f108 0210 	add.w	r2, r8, #16
 80066ec:	46f2      	mov	sl, lr
 80066ee:	2100      	movs	r1, #0
 80066f0:	f859 3b04 	ldr.w	r3, [r9], #4
 80066f4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80066f8:	fa1f f883 	uxth.w	r8, r3
 80066fc:	fa11 f18b 	uxtah	r1, r1, fp
 8006700:	0c1b      	lsrs	r3, r3, #16
 8006702:	eba1 0808 	sub.w	r8, r1, r8
 8006706:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800670a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800670e:	fa1f f888 	uxth.w	r8, r8
 8006712:	1419      	asrs	r1, r3, #16
 8006714:	454e      	cmp	r6, r9
 8006716:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800671a:	f84a 3b04 	str.w	r3, [sl], #4
 800671e:	d8e7      	bhi.n	80066f0 <__mdiff+0x80>
 8006720:	1b33      	subs	r3, r6, r4
 8006722:	3b15      	subs	r3, #21
 8006724:	f023 0303 	bic.w	r3, r3, #3
 8006728:	3304      	adds	r3, #4
 800672a:	3415      	adds	r4, #21
 800672c:	42a6      	cmp	r6, r4
 800672e:	bf38      	it	cc
 8006730:	2304      	movcc	r3, #4
 8006732:	441d      	add	r5, r3
 8006734:	4473      	add	r3, lr
 8006736:	469e      	mov	lr, r3
 8006738:	462e      	mov	r6, r5
 800673a:	4566      	cmp	r6, ip
 800673c:	d30e      	bcc.n	800675c <__mdiff+0xec>
 800673e:	f10c 0203 	add.w	r2, ip, #3
 8006742:	1b52      	subs	r2, r2, r5
 8006744:	f022 0203 	bic.w	r2, r2, #3
 8006748:	3d03      	subs	r5, #3
 800674a:	45ac      	cmp	ip, r5
 800674c:	bf38      	it	cc
 800674e:	2200      	movcc	r2, #0
 8006750:	441a      	add	r2, r3
 8006752:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006756:	b17b      	cbz	r3, 8006778 <__mdiff+0x108>
 8006758:	6107      	str	r7, [r0, #16]
 800675a:	e7a3      	b.n	80066a4 <__mdiff+0x34>
 800675c:	f856 8b04 	ldr.w	r8, [r6], #4
 8006760:	fa11 f288 	uxtah	r2, r1, r8
 8006764:	1414      	asrs	r4, r2, #16
 8006766:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800676a:	b292      	uxth	r2, r2
 800676c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006770:	f84e 2b04 	str.w	r2, [lr], #4
 8006774:	1421      	asrs	r1, r4, #16
 8006776:	e7e0      	b.n	800673a <__mdiff+0xca>
 8006778:	3f01      	subs	r7, #1
 800677a:	e7ea      	b.n	8006752 <__mdiff+0xe2>
 800677c:	08007d9b 	.word	0x08007d9b
 8006780:	08007dac 	.word	0x08007dac

08006784 <__d2b>:
 8006784:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006788:	4689      	mov	r9, r1
 800678a:	2101      	movs	r1, #1
 800678c:	ec57 6b10 	vmov	r6, r7, d0
 8006790:	4690      	mov	r8, r2
 8006792:	f7ff fccf 	bl	8006134 <_Balloc>
 8006796:	4604      	mov	r4, r0
 8006798:	b930      	cbnz	r0, 80067a8 <__d2b+0x24>
 800679a:	4602      	mov	r2, r0
 800679c:	4b25      	ldr	r3, [pc, #148]	; (8006834 <__d2b+0xb0>)
 800679e:	4826      	ldr	r0, [pc, #152]	; (8006838 <__d2b+0xb4>)
 80067a0:	f240 310a 	movw	r1, #778	; 0x30a
 80067a4:	f000 f9ea 	bl	8006b7c <__assert_func>
 80067a8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80067ac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80067b0:	bb35      	cbnz	r5, 8006800 <__d2b+0x7c>
 80067b2:	2e00      	cmp	r6, #0
 80067b4:	9301      	str	r3, [sp, #4]
 80067b6:	d028      	beq.n	800680a <__d2b+0x86>
 80067b8:	4668      	mov	r0, sp
 80067ba:	9600      	str	r6, [sp, #0]
 80067bc:	f7ff fd82 	bl	80062c4 <__lo0bits>
 80067c0:	9900      	ldr	r1, [sp, #0]
 80067c2:	b300      	cbz	r0, 8006806 <__d2b+0x82>
 80067c4:	9a01      	ldr	r2, [sp, #4]
 80067c6:	f1c0 0320 	rsb	r3, r0, #32
 80067ca:	fa02 f303 	lsl.w	r3, r2, r3
 80067ce:	430b      	orrs	r3, r1
 80067d0:	40c2      	lsrs	r2, r0
 80067d2:	6163      	str	r3, [r4, #20]
 80067d4:	9201      	str	r2, [sp, #4]
 80067d6:	9b01      	ldr	r3, [sp, #4]
 80067d8:	61a3      	str	r3, [r4, #24]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	bf14      	ite	ne
 80067de:	2202      	movne	r2, #2
 80067e0:	2201      	moveq	r2, #1
 80067e2:	6122      	str	r2, [r4, #16]
 80067e4:	b1d5      	cbz	r5, 800681c <__d2b+0x98>
 80067e6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80067ea:	4405      	add	r5, r0
 80067ec:	f8c9 5000 	str.w	r5, [r9]
 80067f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80067f4:	f8c8 0000 	str.w	r0, [r8]
 80067f8:	4620      	mov	r0, r4
 80067fa:	b003      	add	sp, #12
 80067fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006800:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006804:	e7d5      	b.n	80067b2 <__d2b+0x2e>
 8006806:	6161      	str	r1, [r4, #20]
 8006808:	e7e5      	b.n	80067d6 <__d2b+0x52>
 800680a:	a801      	add	r0, sp, #4
 800680c:	f7ff fd5a 	bl	80062c4 <__lo0bits>
 8006810:	9b01      	ldr	r3, [sp, #4]
 8006812:	6163      	str	r3, [r4, #20]
 8006814:	2201      	movs	r2, #1
 8006816:	6122      	str	r2, [r4, #16]
 8006818:	3020      	adds	r0, #32
 800681a:	e7e3      	b.n	80067e4 <__d2b+0x60>
 800681c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006820:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006824:	f8c9 0000 	str.w	r0, [r9]
 8006828:	6918      	ldr	r0, [r3, #16]
 800682a:	f7ff fd2b 	bl	8006284 <__hi0bits>
 800682e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006832:	e7df      	b.n	80067f4 <__d2b+0x70>
 8006834:	08007d9b 	.word	0x08007d9b
 8006838:	08007dac 	.word	0x08007dac

0800683c <_calloc_r>:
 800683c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800683e:	fba1 2402 	umull	r2, r4, r1, r2
 8006842:	b94c      	cbnz	r4, 8006858 <_calloc_r+0x1c>
 8006844:	4611      	mov	r1, r2
 8006846:	9201      	str	r2, [sp, #4]
 8006848:	f7fe f8da 	bl	8004a00 <_malloc_r>
 800684c:	9a01      	ldr	r2, [sp, #4]
 800684e:	4605      	mov	r5, r0
 8006850:	b930      	cbnz	r0, 8006860 <_calloc_r+0x24>
 8006852:	4628      	mov	r0, r5
 8006854:	b003      	add	sp, #12
 8006856:	bd30      	pop	{r4, r5, pc}
 8006858:	220c      	movs	r2, #12
 800685a:	6002      	str	r2, [r0, #0]
 800685c:	2500      	movs	r5, #0
 800685e:	e7f8      	b.n	8006852 <_calloc_r+0x16>
 8006860:	4621      	mov	r1, r4
 8006862:	f7fe f859 	bl	8004918 <memset>
 8006866:	e7f4      	b.n	8006852 <_calloc_r+0x16>

08006868 <_realloc_r>:
 8006868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800686c:	4680      	mov	r8, r0
 800686e:	4614      	mov	r4, r2
 8006870:	460e      	mov	r6, r1
 8006872:	b921      	cbnz	r1, 800687e <_realloc_r+0x16>
 8006874:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006878:	4611      	mov	r1, r2
 800687a:	f7fe b8c1 	b.w	8004a00 <_malloc_r>
 800687e:	b92a      	cbnz	r2, 800688c <_realloc_r+0x24>
 8006880:	f7fe f852 	bl	8004928 <_free_r>
 8006884:	4625      	mov	r5, r4
 8006886:	4628      	mov	r0, r5
 8006888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800688c:	f000 f9d5 	bl	8006c3a <_malloc_usable_size_r>
 8006890:	4284      	cmp	r4, r0
 8006892:	4607      	mov	r7, r0
 8006894:	d802      	bhi.n	800689c <_realloc_r+0x34>
 8006896:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800689a:	d812      	bhi.n	80068c2 <_realloc_r+0x5a>
 800689c:	4621      	mov	r1, r4
 800689e:	4640      	mov	r0, r8
 80068a0:	f7fe f8ae 	bl	8004a00 <_malloc_r>
 80068a4:	4605      	mov	r5, r0
 80068a6:	2800      	cmp	r0, #0
 80068a8:	d0ed      	beq.n	8006886 <_realloc_r+0x1e>
 80068aa:	42bc      	cmp	r4, r7
 80068ac:	4622      	mov	r2, r4
 80068ae:	4631      	mov	r1, r6
 80068b0:	bf28      	it	cs
 80068b2:	463a      	movcs	r2, r7
 80068b4:	f7fe f822 	bl	80048fc <memcpy>
 80068b8:	4631      	mov	r1, r6
 80068ba:	4640      	mov	r0, r8
 80068bc:	f7fe f834 	bl	8004928 <_free_r>
 80068c0:	e7e1      	b.n	8006886 <_realloc_r+0x1e>
 80068c2:	4635      	mov	r5, r6
 80068c4:	e7df      	b.n	8006886 <_realloc_r+0x1e>

080068c6 <__ssputs_r>:
 80068c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068ca:	688e      	ldr	r6, [r1, #8]
 80068cc:	429e      	cmp	r6, r3
 80068ce:	4682      	mov	sl, r0
 80068d0:	460c      	mov	r4, r1
 80068d2:	4690      	mov	r8, r2
 80068d4:	461f      	mov	r7, r3
 80068d6:	d838      	bhi.n	800694a <__ssputs_r+0x84>
 80068d8:	898a      	ldrh	r2, [r1, #12]
 80068da:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80068de:	d032      	beq.n	8006946 <__ssputs_r+0x80>
 80068e0:	6825      	ldr	r5, [r4, #0]
 80068e2:	6909      	ldr	r1, [r1, #16]
 80068e4:	eba5 0901 	sub.w	r9, r5, r1
 80068e8:	6965      	ldr	r5, [r4, #20]
 80068ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80068ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80068f2:	3301      	adds	r3, #1
 80068f4:	444b      	add	r3, r9
 80068f6:	106d      	asrs	r5, r5, #1
 80068f8:	429d      	cmp	r5, r3
 80068fa:	bf38      	it	cc
 80068fc:	461d      	movcc	r5, r3
 80068fe:	0553      	lsls	r3, r2, #21
 8006900:	d531      	bpl.n	8006966 <__ssputs_r+0xa0>
 8006902:	4629      	mov	r1, r5
 8006904:	f7fe f87c 	bl	8004a00 <_malloc_r>
 8006908:	4606      	mov	r6, r0
 800690a:	b950      	cbnz	r0, 8006922 <__ssputs_r+0x5c>
 800690c:	230c      	movs	r3, #12
 800690e:	f8ca 3000 	str.w	r3, [sl]
 8006912:	89a3      	ldrh	r3, [r4, #12]
 8006914:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006918:	81a3      	strh	r3, [r4, #12]
 800691a:	f04f 30ff 	mov.w	r0, #4294967295
 800691e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006922:	6921      	ldr	r1, [r4, #16]
 8006924:	464a      	mov	r2, r9
 8006926:	f7fd ffe9 	bl	80048fc <memcpy>
 800692a:	89a3      	ldrh	r3, [r4, #12]
 800692c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006934:	81a3      	strh	r3, [r4, #12]
 8006936:	6126      	str	r6, [r4, #16]
 8006938:	6165      	str	r5, [r4, #20]
 800693a:	444e      	add	r6, r9
 800693c:	eba5 0509 	sub.w	r5, r5, r9
 8006940:	6026      	str	r6, [r4, #0]
 8006942:	60a5      	str	r5, [r4, #8]
 8006944:	463e      	mov	r6, r7
 8006946:	42be      	cmp	r6, r7
 8006948:	d900      	bls.n	800694c <__ssputs_r+0x86>
 800694a:	463e      	mov	r6, r7
 800694c:	6820      	ldr	r0, [r4, #0]
 800694e:	4632      	mov	r2, r6
 8006950:	4641      	mov	r1, r8
 8006952:	f000 f958 	bl	8006c06 <memmove>
 8006956:	68a3      	ldr	r3, [r4, #8]
 8006958:	1b9b      	subs	r3, r3, r6
 800695a:	60a3      	str	r3, [r4, #8]
 800695c:	6823      	ldr	r3, [r4, #0]
 800695e:	4433      	add	r3, r6
 8006960:	6023      	str	r3, [r4, #0]
 8006962:	2000      	movs	r0, #0
 8006964:	e7db      	b.n	800691e <__ssputs_r+0x58>
 8006966:	462a      	mov	r2, r5
 8006968:	f7ff ff7e 	bl	8006868 <_realloc_r>
 800696c:	4606      	mov	r6, r0
 800696e:	2800      	cmp	r0, #0
 8006970:	d1e1      	bne.n	8006936 <__ssputs_r+0x70>
 8006972:	6921      	ldr	r1, [r4, #16]
 8006974:	4650      	mov	r0, sl
 8006976:	f7fd ffd7 	bl	8004928 <_free_r>
 800697a:	e7c7      	b.n	800690c <__ssputs_r+0x46>

0800697c <_svfiprintf_r>:
 800697c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006980:	4698      	mov	r8, r3
 8006982:	898b      	ldrh	r3, [r1, #12]
 8006984:	061b      	lsls	r3, r3, #24
 8006986:	b09d      	sub	sp, #116	; 0x74
 8006988:	4607      	mov	r7, r0
 800698a:	460d      	mov	r5, r1
 800698c:	4614      	mov	r4, r2
 800698e:	d50e      	bpl.n	80069ae <_svfiprintf_r+0x32>
 8006990:	690b      	ldr	r3, [r1, #16]
 8006992:	b963      	cbnz	r3, 80069ae <_svfiprintf_r+0x32>
 8006994:	2140      	movs	r1, #64	; 0x40
 8006996:	f7fe f833 	bl	8004a00 <_malloc_r>
 800699a:	6028      	str	r0, [r5, #0]
 800699c:	6128      	str	r0, [r5, #16]
 800699e:	b920      	cbnz	r0, 80069aa <_svfiprintf_r+0x2e>
 80069a0:	230c      	movs	r3, #12
 80069a2:	603b      	str	r3, [r7, #0]
 80069a4:	f04f 30ff 	mov.w	r0, #4294967295
 80069a8:	e0d1      	b.n	8006b4e <_svfiprintf_r+0x1d2>
 80069aa:	2340      	movs	r3, #64	; 0x40
 80069ac:	616b      	str	r3, [r5, #20]
 80069ae:	2300      	movs	r3, #0
 80069b0:	9309      	str	r3, [sp, #36]	; 0x24
 80069b2:	2320      	movs	r3, #32
 80069b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80069b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80069bc:	2330      	movs	r3, #48	; 0x30
 80069be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006b68 <_svfiprintf_r+0x1ec>
 80069c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80069c6:	f04f 0901 	mov.w	r9, #1
 80069ca:	4623      	mov	r3, r4
 80069cc:	469a      	mov	sl, r3
 80069ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069d2:	b10a      	cbz	r2, 80069d8 <_svfiprintf_r+0x5c>
 80069d4:	2a25      	cmp	r2, #37	; 0x25
 80069d6:	d1f9      	bne.n	80069cc <_svfiprintf_r+0x50>
 80069d8:	ebba 0b04 	subs.w	fp, sl, r4
 80069dc:	d00b      	beq.n	80069f6 <_svfiprintf_r+0x7a>
 80069de:	465b      	mov	r3, fp
 80069e0:	4622      	mov	r2, r4
 80069e2:	4629      	mov	r1, r5
 80069e4:	4638      	mov	r0, r7
 80069e6:	f7ff ff6e 	bl	80068c6 <__ssputs_r>
 80069ea:	3001      	adds	r0, #1
 80069ec:	f000 80aa 	beq.w	8006b44 <_svfiprintf_r+0x1c8>
 80069f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069f2:	445a      	add	r2, fp
 80069f4:	9209      	str	r2, [sp, #36]	; 0x24
 80069f6:	f89a 3000 	ldrb.w	r3, [sl]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	f000 80a2 	beq.w	8006b44 <_svfiprintf_r+0x1c8>
 8006a00:	2300      	movs	r3, #0
 8006a02:	f04f 32ff 	mov.w	r2, #4294967295
 8006a06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a0a:	f10a 0a01 	add.w	sl, sl, #1
 8006a0e:	9304      	str	r3, [sp, #16]
 8006a10:	9307      	str	r3, [sp, #28]
 8006a12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a16:	931a      	str	r3, [sp, #104]	; 0x68
 8006a18:	4654      	mov	r4, sl
 8006a1a:	2205      	movs	r2, #5
 8006a1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a20:	4851      	ldr	r0, [pc, #324]	; (8006b68 <_svfiprintf_r+0x1ec>)
 8006a22:	f7f9 fbfd 	bl	8000220 <memchr>
 8006a26:	9a04      	ldr	r2, [sp, #16]
 8006a28:	b9d8      	cbnz	r0, 8006a62 <_svfiprintf_r+0xe6>
 8006a2a:	06d0      	lsls	r0, r2, #27
 8006a2c:	bf44      	itt	mi
 8006a2e:	2320      	movmi	r3, #32
 8006a30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a34:	0711      	lsls	r1, r2, #28
 8006a36:	bf44      	itt	mi
 8006a38:	232b      	movmi	r3, #43	; 0x2b
 8006a3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a3e:	f89a 3000 	ldrb.w	r3, [sl]
 8006a42:	2b2a      	cmp	r3, #42	; 0x2a
 8006a44:	d015      	beq.n	8006a72 <_svfiprintf_r+0xf6>
 8006a46:	9a07      	ldr	r2, [sp, #28]
 8006a48:	4654      	mov	r4, sl
 8006a4a:	2000      	movs	r0, #0
 8006a4c:	f04f 0c0a 	mov.w	ip, #10
 8006a50:	4621      	mov	r1, r4
 8006a52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a56:	3b30      	subs	r3, #48	; 0x30
 8006a58:	2b09      	cmp	r3, #9
 8006a5a:	d94e      	bls.n	8006afa <_svfiprintf_r+0x17e>
 8006a5c:	b1b0      	cbz	r0, 8006a8c <_svfiprintf_r+0x110>
 8006a5e:	9207      	str	r2, [sp, #28]
 8006a60:	e014      	b.n	8006a8c <_svfiprintf_r+0x110>
 8006a62:	eba0 0308 	sub.w	r3, r0, r8
 8006a66:	fa09 f303 	lsl.w	r3, r9, r3
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	9304      	str	r3, [sp, #16]
 8006a6e:	46a2      	mov	sl, r4
 8006a70:	e7d2      	b.n	8006a18 <_svfiprintf_r+0x9c>
 8006a72:	9b03      	ldr	r3, [sp, #12]
 8006a74:	1d19      	adds	r1, r3, #4
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	9103      	str	r1, [sp, #12]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	bfbb      	ittet	lt
 8006a7e:	425b      	neglt	r3, r3
 8006a80:	f042 0202 	orrlt.w	r2, r2, #2
 8006a84:	9307      	strge	r3, [sp, #28]
 8006a86:	9307      	strlt	r3, [sp, #28]
 8006a88:	bfb8      	it	lt
 8006a8a:	9204      	strlt	r2, [sp, #16]
 8006a8c:	7823      	ldrb	r3, [r4, #0]
 8006a8e:	2b2e      	cmp	r3, #46	; 0x2e
 8006a90:	d10c      	bne.n	8006aac <_svfiprintf_r+0x130>
 8006a92:	7863      	ldrb	r3, [r4, #1]
 8006a94:	2b2a      	cmp	r3, #42	; 0x2a
 8006a96:	d135      	bne.n	8006b04 <_svfiprintf_r+0x188>
 8006a98:	9b03      	ldr	r3, [sp, #12]
 8006a9a:	1d1a      	adds	r2, r3, #4
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	9203      	str	r2, [sp, #12]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	bfb8      	it	lt
 8006aa4:	f04f 33ff 	movlt.w	r3, #4294967295
 8006aa8:	3402      	adds	r4, #2
 8006aaa:	9305      	str	r3, [sp, #20]
 8006aac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006b78 <_svfiprintf_r+0x1fc>
 8006ab0:	7821      	ldrb	r1, [r4, #0]
 8006ab2:	2203      	movs	r2, #3
 8006ab4:	4650      	mov	r0, sl
 8006ab6:	f7f9 fbb3 	bl	8000220 <memchr>
 8006aba:	b140      	cbz	r0, 8006ace <_svfiprintf_r+0x152>
 8006abc:	2340      	movs	r3, #64	; 0x40
 8006abe:	eba0 000a 	sub.w	r0, r0, sl
 8006ac2:	fa03 f000 	lsl.w	r0, r3, r0
 8006ac6:	9b04      	ldr	r3, [sp, #16]
 8006ac8:	4303      	orrs	r3, r0
 8006aca:	3401      	adds	r4, #1
 8006acc:	9304      	str	r3, [sp, #16]
 8006ace:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ad2:	4826      	ldr	r0, [pc, #152]	; (8006b6c <_svfiprintf_r+0x1f0>)
 8006ad4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ad8:	2206      	movs	r2, #6
 8006ada:	f7f9 fba1 	bl	8000220 <memchr>
 8006ade:	2800      	cmp	r0, #0
 8006ae0:	d038      	beq.n	8006b54 <_svfiprintf_r+0x1d8>
 8006ae2:	4b23      	ldr	r3, [pc, #140]	; (8006b70 <_svfiprintf_r+0x1f4>)
 8006ae4:	bb1b      	cbnz	r3, 8006b2e <_svfiprintf_r+0x1b2>
 8006ae6:	9b03      	ldr	r3, [sp, #12]
 8006ae8:	3307      	adds	r3, #7
 8006aea:	f023 0307 	bic.w	r3, r3, #7
 8006aee:	3308      	adds	r3, #8
 8006af0:	9303      	str	r3, [sp, #12]
 8006af2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006af4:	4433      	add	r3, r6
 8006af6:	9309      	str	r3, [sp, #36]	; 0x24
 8006af8:	e767      	b.n	80069ca <_svfiprintf_r+0x4e>
 8006afa:	fb0c 3202 	mla	r2, ip, r2, r3
 8006afe:	460c      	mov	r4, r1
 8006b00:	2001      	movs	r0, #1
 8006b02:	e7a5      	b.n	8006a50 <_svfiprintf_r+0xd4>
 8006b04:	2300      	movs	r3, #0
 8006b06:	3401      	adds	r4, #1
 8006b08:	9305      	str	r3, [sp, #20]
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	f04f 0c0a 	mov.w	ip, #10
 8006b10:	4620      	mov	r0, r4
 8006b12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b16:	3a30      	subs	r2, #48	; 0x30
 8006b18:	2a09      	cmp	r2, #9
 8006b1a:	d903      	bls.n	8006b24 <_svfiprintf_r+0x1a8>
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d0c5      	beq.n	8006aac <_svfiprintf_r+0x130>
 8006b20:	9105      	str	r1, [sp, #20]
 8006b22:	e7c3      	b.n	8006aac <_svfiprintf_r+0x130>
 8006b24:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b28:	4604      	mov	r4, r0
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e7f0      	b.n	8006b10 <_svfiprintf_r+0x194>
 8006b2e:	ab03      	add	r3, sp, #12
 8006b30:	9300      	str	r3, [sp, #0]
 8006b32:	462a      	mov	r2, r5
 8006b34:	4b0f      	ldr	r3, [pc, #60]	; (8006b74 <_svfiprintf_r+0x1f8>)
 8006b36:	a904      	add	r1, sp, #16
 8006b38:	4638      	mov	r0, r7
 8006b3a:	f7fe f875 	bl	8004c28 <_printf_float>
 8006b3e:	1c42      	adds	r2, r0, #1
 8006b40:	4606      	mov	r6, r0
 8006b42:	d1d6      	bne.n	8006af2 <_svfiprintf_r+0x176>
 8006b44:	89ab      	ldrh	r3, [r5, #12]
 8006b46:	065b      	lsls	r3, r3, #25
 8006b48:	f53f af2c 	bmi.w	80069a4 <_svfiprintf_r+0x28>
 8006b4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b4e:	b01d      	add	sp, #116	; 0x74
 8006b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b54:	ab03      	add	r3, sp, #12
 8006b56:	9300      	str	r3, [sp, #0]
 8006b58:	462a      	mov	r2, r5
 8006b5a:	4b06      	ldr	r3, [pc, #24]	; (8006b74 <_svfiprintf_r+0x1f8>)
 8006b5c:	a904      	add	r1, sp, #16
 8006b5e:	4638      	mov	r0, r7
 8006b60:	f7fe fb06 	bl	8005170 <_printf_i>
 8006b64:	e7eb      	b.n	8006b3e <_svfiprintf_r+0x1c2>
 8006b66:	bf00      	nop
 8006b68:	08007f04 	.word	0x08007f04
 8006b6c:	08007f0e 	.word	0x08007f0e
 8006b70:	08004c29 	.word	0x08004c29
 8006b74:	080068c7 	.word	0x080068c7
 8006b78:	08007f0a 	.word	0x08007f0a

08006b7c <__assert_func>:
 8006b7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006b7e:	4614      	mov	r4, r2
 8006b80:	461a      	mov	r2, r3
 8006b82:	4b09      	ldr	r3, [pc, #36]	; (8006ba8 <__assert_func+0x2c>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4605      	mov	r5, r0
 8006b88:	68d8      	ldr	r0, [r3, #12]
 8006b8a:	b14c      	cbz	r4, 8006ba0 <__assert_func+0x24>
 8006b8c:	4b07      	ldr	r3, [pc, #28]	; (8006bac <__assert_func+0x30>)
 8006b8e:	9100      	str	r1, [sp, #0]
 8006b90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006b94:	4906      	ldr	r1, [pc, #24]	; (8006bb0 <__assert_func+0x34>)
 8006b96:	462b      	mov	r3, r5
 8006b98:	f000 f80e 	bl	8006bb8 <fiprintf>
 8006b9c:	f000 fa7c 	bl	8007098 <abort>
 8006ba0:	4b04      	ldr	r3, [pc, #16]	; (8006bb4 <__assert_func+0x38>)
 8006ba2:	461c      	mov	r4, r3
 8006ba4:	e7f3      	b.n	8006b8e <__assert_func+0x12>
 8006ba6:	bf00      	nop
 8006ba8:	200005e4 	.word	0x200005e4
 8006bac:	08007f15 	.word	0x08007f15
 8006bb0:	08007f22 	.word	0x08007f22
 8006bb4:	08007f50 	.word	0x08007f50

08006bb8 <fiprintf>:
 8006bb8:	b40e      	push	{r1, r2, r3}
 8006bba:	b503      	push	{r0, r1, lr}
 8006bbc:	4601      	mov	r1, r0
 8006bbe:	ab03      	add	r3, sp, #12
 8006bc0:	4805      	ldr	r0, [pc, #20]	; (8006bd8 <fiprintf+0x20>)
 8006bc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bc6:	6800      	ldr	r0, [r0, #0]
 8006bc8:	9301      	str	r3, [sp, #4]
 8006bca:	f000 f867 	bl	8006c9c <_vfiprintf_r>
 8006bce:	b002      	add	sp, #8
 8006bd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bd4:	b003      	add	sp, #12
 8006bd6:	4770      	bx	lr
 8006bd8:	200005e4 	.word	0x200005e4

08006bdc <__retarget_lock_init_recursive>:
 8006bdc:	4770      	bx	lr

08006bde <__retarget_lock_acquire_recursive>:
 8006bde:	4770      	bx	lr

08006be0 <__retarget_lock_release_recursive>:
 8006be0:	4770      	bx	lr

08006be2 <__ascii_mbtowc>:
 8006be2:	b082      	sub	sp, #8
 8006be4:	b901      	cbnz	r1, 8006be8 <__ascii_mbtowc+0x6>
 8006be6:	a901      	add	r1, sp, #4
 8006be8:	b142      	cbz	r2, 8006bfc <__ascii_mbtowc+0x1a>
 8006bea:	b14b      	cbz	r3, 8006c00 <__ascii_mbtowc+0x1e>
 8006bec:	7813      	ldrb	r3, [r2, #0]
 8006bee:	600b      	str	r3, [r1, #0]
 8006bf0:	7812      	ldrb	r2, [r2, #0]
 8006bf2:	1e10      	subs	r0, r2, #0
 8006bf4:	bf18      	it	ne
 8006bf6:	2001      	movne	r0, #1
 8006bf8:	b002      	add	sp, #8
 8006bfa:	4770      	bx	lr
 8006bfc:	4610      	mov	r0, r2
 8006bfe:	e7fb      	b.n	8006bf8 <__ascii_mbtowc+0x16>
 8006c00:	f06f 0001 	mvn.w	r0, #1
 8006c04:	e7f8      	b.n	8006bf8 <__ascii_mbtowc+0x16>

08006c06 <memmove>:
 8006c06:	4288      	cmp	r0, r1
 8006c08:	b510      	push	{r4, lr}
 8006c0a:	eb01 0402 	add.w	r4, r1, r2
 8006c0e:	d902      	bls.n	8006c16 <memmove+0x10>
 8006c10:	4284      	cmp	r4, r0
 8006c12:	4623      	mov	r3, r4
 8006c14:	d807      	bhi.n	8006c26 <memmove+0x20>
 8006c16:	1e43      	subs	r3, r0, #1
 8006c18:	42a1      	cmp	r1, r4
 8006c1a:	d008      	beq.n	8006c2e <memmove+0x28>
 8006c1c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c20:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c24:	e7f8      	b.n	8006c18 <memmove+0x12>
 8006c26:	4402      	add	r2, r0
 8006c28:	4601      	mov	r1, r0
 8006c2a:	428a      	cmp	r2, r1
 8006c2c:	d100      	bne.n	8006c30 <memmove+0x2a>
 8006c2e:	bd10      	pop	{r4, pc}
 8006c30:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c34:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006c38:	e7f7      	b.n	8006c2a <memmove+0x24>

08006c3a <_malloc_usable_size_r>:
 8006c3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c3e:	1f18      	subs	r0, r3, #4
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	bfbc      	itt	lt
 8006c44:	580b      	ldrlt	r3, [r1, r0]
 8006c46:	18c0      	addlt	r0, r0, r3
 8006c48:	4770      	bx	lr

08006c4a <__sfputc_r>:
 8006c4a:	6893      	ldr	r3, [r2, #8]
 8006c4c:	3b01      	subs	r3, #1
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	b410      	push	{r4}
 8006c52:	6093      	str	r3, [r2, #8]
 8006c54:	da08      	bge.n	8006c68 <__sfputc_r+0x1e>
 8006c56:	6994      	ldr	r4, [r2, #24]
 8006c58:	42a3      	cmp	r3, r4
 8006c5a:	db01      	blt.n	8006c60 <__sfputc_r+0x16>
 8006c5c:	290a      	cmp	r1, #10
 8006c5e:	d103      	bne.n	8006c68 <__sfputc_r+0x1e>
 8006c60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c64:	f000 b94a 	b.w	8006efc <__swbuf_r>
 8006c68:	6813      	ldr	r3, [r2, #0]
 8006c6a:	1c58      	adds	r0, r3, #1
 8006c6c:	6010      	str	r0, [r2, #0]
 8006c6e:	7019      	strb	r1, [r3, #0]
 8006c70:	4608      	mov	r0, r1
 8006c72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <__sfputs_r>:
 8006c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c7a:	4606      	mov	r6, r0
 8006c7c:	460f      	mov	r7, r1
 8006c7e:	4614      	mov	r4, r2
 8006c80:	18d5      	adds	r5, r2, r3
 8006c82:	42ac      	cmp	r4, r5
 8006c84:	d101      	bne.n	8006c8a <__sfputs_r+0x12>
 8006c86:	2000      	movs	r0, #0
 8006c88:	e007      	b.n	8006c9a <__sfputs_r+0x22>
 8006c8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c8e:	463a      	mov	r2, r7
 8006c90:	4630      	mov	r0, r6
 8006c92:	f7ff ffda 	bl	8006c4a <__sfputc_r>
 8006c96:	1c43      	adds	r3, r0, #1
 8006c98:	d1f3      	bne.n	8006c82 <__sfputs_r+0xa>
 8006c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006c9c <_vfiprintf_r>:
 8006c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ca0:	460d      	mov	r5, r1
 8006ca2:	b09d      	sub	sp, #116	; 0x74
 8006ca4:	4614      	mov	r4, r2
 8006ca6:	4698      	mov	r8, r3
 8006ca8:	4606      	mov	r6, r0
 8006caa:	b118      	cbz	r0, 8006cb4 <_vfiprintf_r+0x18>
 8006cac:	6983      	ldr	r3, [r0, #24]
 8006cae:	b90b      	cbnz	r3, 8006cb4 <_vfiprintf_r+0x18>
 8006cb0:	f000 fb14 	bl	80072dc <__sinit>
 8006cb4:	4b89      	ldr	r3, [pc, #548]	; (8006edc <_vfiprintf_r+0x240>)
 8006cb6:	429d      	cmp	r5, r3
 8006cb8:	d11b      	bne.n	8006cf2 <_vfiprintf_r+0x56>
 8006cba:	6875      	ldr	r5, [r6, #4]
 8006cbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006cbe:	07d9      	lsls	r1, r3, #31
 8006cc0:	d405      	bmi.n	8006cce <_vfiprintf_r+0x32>
 8006cc2:	89ab      	ldrh	r3, [r5, #12]
 8006cc4:	059a      	lsls	r2, r3, #22
 8006cc6:	d402      	bmi.n	8006cce <_vfiprintf_r+0x32>
 8006cc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006cca:	f7ff ff88 	bl	8006bde <__retarget_lock_acquire_recursive>
 8006cce:	89ab      	ldrh	r3, [r5, #12]
 8006cd0:	071b      	lsls	r3, r3, #28
 8006cd2:	d501      	bpl.n	8006cd8 <_vfiprintf_r+0x3c>
 8006cd4:	692b      	ldr	r3, [r5, #16]
 8006cd6:	b9eb      	cbnz	r3, 8006d14 <_vfiprintf_r+0x78>
 8006cd8:	4629      	mov	r1, r5
 8006cda:	4630      	mov	r0, r6
 8006cdc:	f000 f96e 	bl	8006fbc <__swsetup_r>
 8006ce0:	b1c0      	cbz	r0, 8006d14 <_vfiprintf_r+0x78>
 8006ce2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ce4:	07dc      	lsls	r4, r3, #31
 8006ce6:	d50e      	bpl.n	8006d06 <_vfiprintf_r+0x6a>
 8006ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cec:	b01d      	add	sp, #116	; 0x74
 8006cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cf2:	4b7b      	ldr	r3, [pc, #492]	; (8006ee0 <_vfiprintf_r+0x244>)
 8006cf4:	429d      	cmp	r5, r3
 8006cf6:	d101      	bne.n	8006cfc <_vfiprintf_r+0x60>
 8006cf8:	68b5      	ldr	r5, [r6, #8]
 8006cfa:	e7df      	b.n	8006cbc <_vfiprintf_r+0x20>
 8006cfc:	4b79      	ldr	r3, [pc, #484]	; (8006ee4 <_vfiprintf_r+0x248>)
 8006cfe:	429d      	cmp	r5, r3
 8006d00:	bf08      	it	eq
 8006d02:	68f5      	ldreq	r5, [r6, #12]
 8006d04:	e7da      	b.n	8006cbc <_vfiprintf_r+0x20>
 8006d06:	89ab      	ldrh	r3, [r5, #12]
 8006d08:	0598      	lsls	r0, r3, #22
 8006d0a:	d4ed      	bmi.n	8006ce8 <_vfiprintf_r+0x4c>
 8006d0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d0e:	f7ff ff67 	bl	8006be0 <__retarget_lock_release_recursive>
 8006d12:	e7e9      	b.n	8006ce8 <_vfiprintf_r+0x4c>
 8006d14:	2300      	movs	r3, #0
 8006d16:	9309      	str	r3, [sp, #36]	; 0x24
 8006d18:	2320      	movs	r3, #32
 8006d1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d22:	2330      	movs	r3, #48	; 0x30
 8006d24:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006ee8 <_vfiprintf_r+0x24c>
 8006d28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d2c:	f04f 0901 	mov.w	r9, #1
 8006d30:	4623      	mov	r3, r4
 8006d32:	469a      	mov	sl, r3
 8006d34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d38:	b10a      	cbz	r2, 8006d3e <_vfiprintf_r+0xa2>
 8006d3a:	2a25      	cmp	r2, #37	; 0x25
 8006d3c:	d1f9      	bne.n	8006d32 <_vfiprintf_r+0x96>
 8006d3e:	ebba 0b04 	subs.w	fp, sl, r4
 8006d42:	d00b      	beq.n	8006d5c <_vfiprintf_r+0xc0>
 8006d44:	465b      	mov	r3, fp
 8006d46:	4622      	mov	r2, r4
 8006d48:	4629      	mov	r1, r5
 8006d4a:	4630      	mov	r0, r6
 8006d4c:	f7ff ff94 	bl	8006c78 <__sfputs_r>
 8006d50:	3001      	adds	r0, #1
 8006d52:	f000 80aa 	beq.w	8006eaa <_vfiprintf_r+0x20e>
 8006d56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d58:	445a      	add	r2, fp
 8006d5a:	9209      	str	r2, [sp, #36]	; 0x24
 8006d5c:	f89a 3000 	ldrb.w	r3, [sl]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f000 80a2 	beq.w	8006eaa <_vfiprintf_r+0x20e>
 8006d66:	2300      	movs	r3, #0
 8006d68:	f04f 32ff 	mov.w	r2, #4294967295
 8006d6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d70:	f10a 0a01 	add.w	sl, sl, #1
 8006d74:	9304      	str	r3, [sp, #16]
 8006d76:	9307      	str	r3, [sp, #28]
 8006d78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d7c:	931a      	str	r3, [sp, #104]	; 0x68
 8006d7e:	4654      	mov	r4, sl
 8006d80:	2205      	movs	r2, #5
 8006d82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d86:	4858      	ldr	r0, [pc, #352]	; (8006ee8 <_vfiprintf_r+0x24c>)
 8006d88:	f7f9 fa4a 	bl	8000220 <memchr>
 8006d8c:	9a04      	ldr	r2, [sp, #16]
 8006d8e:	b9d8      	cbnz	r0, 8006dc8 <_vfiprintf_r+0x12c>
 8006d90:	06d1      	lsls	r1, r2, #27
 8006d92:	bf44      	itt	mi
 8006d94:	2320      	movmi	r3, #32
 8006d96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d9a:	0713      	lsls	r3, r2, #28
 8006d9c:	bf44      	itt	mi
 8006d9e:	232b      	movmi	r3, #43	; 0x2b
 8006da0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006da4:	f89a 3000 	ldrb.w	r3, [sl]
 8006da8:	2b2a      	cmp	r3, #42	; 0x2a
 8006daa:	d015      	beq.n	8006dd8 <_vfiprintf_r+0x13c>
 8006dac:	9a07      	ldr	r2, [sp, #28]
 8006dae:	4654      	mov	r4, sl
 8006db0:	2000      	movs	r0, #0
 8006db2:	f04f 0c0a 	mov.w	ip, #10
 8006db6:	4621      	mov	r1, r4
 8006db8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006dbc:	3b30      	subs	r3, #48	; 0x30
 8006dbe:	2b09      	cmp	r3, #9
 8006dc0:	d94e      	bls.n	8006e60 <_vfiprintf_r+0x1c4>
 8006dc2:	b1b0      	cbz	r0, 8006df2 <_vfiprintf_r+0x156>
 8006dc4:	9207      	str	r2, [sp, #28]
 8006dc6:	e014      	b.n	8006df2 <_vfiprintf_r+0x156>
 8006dc8:	eba0 0308 	sub.w	r3, r0, r8
 8006dcc:	fa09 f303 	lsl.w	r3, r9, r3
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	9304      	str	r3, [sp, #16]
 8006dd4:	46a2      	mov	sl, r4
 8006dd6:	e7d2      	b.n	8006d7e <_vfiprintf_r+0xe2>
 8006dd8:	9b03      	ldr	r3, [sp, #12]
 8006dda:	1d19      	adds	r1, r3, #4
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	9103      	str	r1, [sp, #12]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	bfbb      	ittet	lt
 8006de4:	425b      	neglt	r3, r3
 8006de6:	f042 0202 	orrlt.w	r2, r2, #2
 8006dea:	9307      	strge	r3, [sp, #28]
 8006dec:	9307      	strlt	r3, [sp, #28]
 8006dee:	bfb8      	it	lt
 8006df0:	9204      	strlt	r2, [sp, #16]
 8006df2:	7823      	ldrb	r3, [r4, #0]
 8006df4:	2b2e      	cmp	r3, #46	; 0x2e
 8006df6:	d10c      	bne.n	8006e12 <_vfiprintf_r+0x176>
 8006df8:	7863      	ldrb	r3, [r4, #1]
 8006dfa:	2b2a      	cmp	r3, #42	; 0x2a
 8006dfc:	d135      	bne.n	8006e6a <_vfiprintf_r+0x1ce>
 8006dfe:	9b03      	ldr	r3, [sp, #12]
 8006e00:	1d1a      	adds	r2, r3, #4
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	9203      	str	r2, [sp, #12]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	bfb8      	it	lt
 8006e0a:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e0e:	3402      	adds	r4, #2
 8006e10:	9305      	str	r3, [sp, #20]
 8006e12:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006ef8 <_vfiprintf_r+0x25c>
 8006e16:	7821      	ldrb	r1, [r4, #0]
 8006e18:	2203      	movs	r2, #3
 8006e1a:	4650      	mov	r0, sl
 8006e1c:	f7f9 fa00 	bl	8000220 <memchr>
 8006e20:	b140      	cbz	r0, 8006e34 <_vfiprintf_r+0x198>
 8006e22:	2340      	movs	r3, #64	; 0x40
 8006e24:	eba0 000a 	sub.w	r0, r0, sl
 8006e28:	fa03 f000 	lsl.w	r0, r3, r0
 8006e2c:	9b04      	ldr	r3, [sp, #16]
 8006e2e:	4303      	orrs	r3, r0
 8006e30:	3401      	adds	r4, #1
 8006e32:	9304      	str	r3, [sp, #16]
 8006e34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e38:	482c      	ldr	r0, [pc, #176]	; (8006eec <_vfiprintf_r+0x250>)
 8006e3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e3e:	2206      	movs	r2, #6
 8006e40:	f7f9 f9ee 	bl	8000220 <memchr>
 8006e44:	2800      	cmp	r0, #0
 8006e46:	d03f      	beq.n	8006ec8 <_vfiprintf_r+0x22c>
 8006e48:	4b29      	ldr	r3, [pc, #164]	; (8006ef0 <_vfiprintf_r+0x254>)
 8006e4a:	bb1b      	cbnz	r3, 8006e94 <_vfiprintf_r+0x1f8>
 8006e4c:	9b03      	ldr	r3, [sp, #12]
 8006e4e:	3307      	adds	r3, #7
 8006e50:	f023 0307 	bic.w	r3, r3, #7
 8006e54:	3308      	adds	r3, #8
 8006e56:	9303      	str	r3, [sp, #12]
 8006e58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e5a:	443b      	add	r3, r7
 8006e5c:	9309      	str	r3, [sp, #36]	; 0x24
 8006e5e:	e767      	b.n	8006d30 <_vfiprintf_r+0x94>
 8006e60:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e64:	460c      	mov	r4, r1
 8006e66:	2001      	movs	r0, #1
 8006e68:	e7a5      	b.n	8006db6 <_vfiprintf_r+0x11a>
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	3401      	adds	r4, #1
 8006e6e:	9305      	str	r3, [sp, #20]
 8006e70:	4619      	mov	r1, r3
 8006e72:	f04f 0c0a 	mov.w	ip, #10
 8006e76:	4620      	mov	r0, r4
 8006e78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e7c:	3a30      	subs	r2, #48	; 0x30
 8006e7e:	2a09      	cmp	r2, #9
 8006e80:	d903      	bls.n	8006e8a <_vfiprintf_r+0x1ee>
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d0c5      	beq.n	8006e12 <_vfiprintf_r+0x176>
 8006e86:	9105      	str	r1, [sp, #20]
 8006e88:	e7c3      	b.n	8006e12 <_vfiprintf_r+0x176>
 8006e8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e8e:	4604      	mov	r4, r0
 8006e90:	2301      	movs	r3, #1
 8006e92:	e7f0      	b.n	8006e76 <_vfiprintf_r+0x1da>
 8006e94:	ab03      	add	r3, sp, #12
 8006e96:	9300      	str	r3, [sp, #0]
 8006e98:	462a      	mov	r2, r5
 8006e9a:	4b16      	ldr	r3, [pc, #88]	; (8006ef4 <_vfiprintf_r+0x258>)
 8006e9c:	a904      	add	r1, sp, #16
 8006e9e:	4630      	mov	r0, r6
 8006ea0:	f7fd fec2 	bl	8004c28 <_printf_float>
 8006ea4:	4607      	mov	r7, r0
 8006ea6:	1c78      	adds	r0, r7, #1
 8006ea8:	d1d6      	bne.n	8006e58 <_vfiprintf_r+0x1bc>
 8006eaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006eac:	07d9      	lsls	r1, r3, #31
 8006eae:	d405      	bmi.n	8006ebc <_vfiprintf_r+0x220>
 8006eb0:	89ab      	ldrh	r3, [r5, #12]
 8006eb2:	059a      	lsls	r2, r3, #22
 8006eb4:	d402      	bmi.n	8006ebc <_vfiprintf_r+0x220>
 8006eb6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006eb8:	f7ff fe92 	bl	8006be0 <__retarget_lock_release_recursive>
 8006ebc:	89ab      	ldrh	r3, [r5, #12]
 8006ebe:	065b      	lsls	r3, r3, #25
 8006ec0:	f53f af12 	bmi.w	8006ce8 <_vfiprintf_r+0x4c>
 8006ec4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ec6:	e711      	b.n	8006cec <_vfiprintf_r+0x50>
 8006ec8:	ab03      	add	r3, sp, #12
 8006eca:	9300      	str	r3, [sp, #0]
 8006ecc:	462a      	mov	r2, r5
 8006ece:	4b09      	ldr	r3, [pc, #36]	; (8006ef4 <_vfiprintf_r+0x258>)
 8006ed0:	a904      	add	r1, sp, #16
 8006ed2:	4630      	mov	r0, r6
 8006ed4:	f7fe f94c 	bl	8005170 <_printf_i>
 8006ed8:	e7e4      	b.n	8006ea4 <_vfiprintf_r+0x208>
 8006eda:	bf00      	nop
 8006edc:	0800807c 	.word	0x0800807c
 8006ee0:	0800809c 	.word	0x0800809c
 8006ee4:	0800805c 	.word	0x0800805c
 8006ee8:	08007f04 	.word	0x08007f04
 8006eec:	08007f0e 	.word	0x08007f0e
 8006ef0:	08004c29 	.word	0x08004c29
 8006ef4:	08006c79 	.word	0x08006c79
 8006ef8:	08007f0a 	.word	0x08007f0a

08006efc <__swbuf_r>:
 8006efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006efe:	460e      	mov	r6, r1
 8006f00:	4614      	mov	r4, r2
 8006f02:	4605      	mov	r5, r0
 8006f04:	b118      	cbz	r0, 8006f0e <__swbuf_r+0x12>
 8006f06:	6983      	ldr	r3, [r0, #24]
 8006f08:	b90b      	cbnz	r3, 8006f0e <__swbuf_r+0x12>
 8006f0a:	f000 f9e7 	bl	80072dc <__sinit>
 8006f0e:	4b21      	ldr	r3, [pc, #132]	; (8006f94 <__swbuf_r+0x98>)
 8006f10:	429c      	cmp	r4, r3
 8006f12:	d12b      	bne.n	8006f6c <__swbuf_r+0x70>
 8006f14:	686c      	ldr	r4, [r5, #4]
 8006f16:	69a3      	ldr	r3, [r4, #24]
 8006f18:	60a3      	str	r3, [r4, #8]
 8006f1a:	89a3      	ldrh	r3, [r4, #12]
 8006f1c:	071a      	lsls	r2, r3, #28
 8006f1e:	d52f      	bpl.n	8006f80 <__swbuf_r+0x84>
 8006f20:	6923      	ldr	r3, [r4, #16]
 8006f22:	b36b      	cbz	r3, 8006f80 <__swbuf_r+0x84>
 8006f24:	6923      	ldr	r3, [r4, #16]
 8006f26:	6820      	ldr	r0, [r4, #0]
 8006f28:	1ac0      	subs	r0, r0, r3
 8006f2a:	6963      	ldr	r3, [r4, #20]
 8006f2c:	b2f6      	uxtb	r6, r6
 8006f2e:	4283      	cmp	r3, r0
 8006f30:	4637      	mov	r7, r6
 8006f32:	dc04      	bgt.n	8006f3e <__swbuf_r+0x42>
 8006f34:	4621      	mov	r1, r4
 8006f36:	4628      	mov	r0, r5
 8006f38:	f000 f93c 	bl	80071b4 <_fflush_r>
 8006f3c:	bb30      	cbnz	r0, 8006f8c <__swbuf_r+0x90>
 8006f3e:	68a3      	ldr	r3, [r4, #8]
 8006f40:	3b01      	subs	r3, #1
 8006f42:	60a3      	str	r3, [r4, #8]
 8006f44:	6823      	ldr	r3, [r4, #0]
 8006f46:	1c5a      	adds	r2, r3, #1
 8006f48:	6022      	str	r2, [r4, #0]
 8006f4a:	701e      	strb	r6, [r3, #0]
 8006f4c:	6963      	ldr	r3, [r4, #20]
 8006f4e:	3001      	adds	r0, #1
 8006f50:	4283      	cmp	r3, r0
 8006f52:	d004      	beq.n	8006f5e <__swbuf_r+0x62>
 8006f54:	89a3      	ldrh	r3, [r4, #12]
 8006f56:	07db      	lsls	r3, r3, #31
 8006f58:	d506      	bpl.n	8006f68 <__swbuf_r+0x6c>
 8006f5a:	2e0a      	cmp	r6, #10
 8006f5c:	d104      	bne.n	8006f68 <__swbuf_r+0x6c>
 8006f5e:	4621      	mov	r1, r4
 8006f60:	4628      	mov	r0, r5
 8006f62:	f000 f927 	bl	80071b4 <_fflush_r>
 8006f66:	b988      	cbnz	r0, 8006f8c <__swbuf_r+0x90>
 8006f68:	4638      	mov	r0, r7
 8006f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f6c:	4b0a      	ldr	r3, [pc, #40]	; (8006f98 <__swbuf_r+0x9c>)
 8006f6e:	429c      	cmp	r4, r3
 8006f70:	d101      	bne.n	8006f76 <__swbuf_r+0x7a>
 8006f72:	68ac      	ldr	r4, [r5, #8]
 8006f74:	e7cf      	b.n	8006f16 <__swbuf_r+0x1a>
 8006f76:	4b09      	ldr	r3, [pc, #36]	; (8006f9c <__swbuf_r+0xa0>)
 8006f78:	429c      	cmp	r4, r3
 8006f7a:	bf08      	it	eq
 8006f7c:	68ec      	ldreq	r4, [r5, #12]
 8006f7e:	e7ca      	b.n	8006f16 <__swbuf_r+0x1a>
 8006f80:	4621      	mov	r1, r4
 8006f82:	4628      	mov	r0, r5
 8006f84:	f000 f81a 	bl	8006fbc <__swsetup_r>
 8006f88:	2800      	cmp	r0, #0
 8006f8a:	d0cb      	beq.n	8006f24 <__swbuf_r+0x28>
 8006f8c:	f04f 37ff 	mov.w	r7, #4294967295
 8006f90:	e7ea      	b.n	8006f68 <__swbuf_r+0x6c>
 8006f92:	bf00      	nop
 8006f94:	0800807c 	.word	0x0800807c
 8006f98:	0800809c 	.word	0x0800809c
 8006f9c:	0800805c 	.word	0x0800805c

08006fa0 <__ascii_wctomb>:
 8006fa0:	b149      	cbz	r1, 8006fb6 <__ascii_wctomb+0x16>
 8006fa2:	2aff      	cmp	r2, #255	; 0xff
 8006fa4:	bf85      	ittet	hi
 8006fa6:	238a      	movhi	r3, #138	; 0x8a
 8006fa8:	6003      	strhi	r3, [r0, #0]
 8006faa:	700a      	strbls	r2, [r1, #0]
 8006fac:	f04f 30ff 	movhi.w	r0, #4294967295
 8006fb0:	bf98      	it	ls
 8006fb2:	2001      	movls	r0, #1
 8006fb4:	4770      	bx	lr
 8006fb6:	4608      	mov	r0, r1
 8006fb8:	4770      	bx	lr
	...

08006fbc <__swsetup_r>:
 8006fbc:	4b32      	ldr	r3, [pc, #200]	; (8007088 <__swsetup_r+0xcc>)
 8006fbe:	b570      	push	{r4, r5, r6, lr}
 8006fc0:	681d      	ldr	r5, [r3, #0]
 8006fc2:	4606      	mov	r6, r0
 8006fc4:	460c      	mov	r4, r1
 8006fc6:	b125      	cbz	r5, 8006fd2 <__swsetup_r+0x16>
 8006fc8:	69ab      	ldr	r3, [r5, #24]
 8006fca:	b913      	cbnz	r3, 8006fd2 <__swsetup_r+0x16>
 8006fcc:	4628      	mov	r0, r5
 8006fce:	f000 f985 	bl	80072dc <__sinit>
 8006fd2:	4b2e      	ldr	r3, [pc, #184]	; (800708c <__swsetup_r+0xd0>)
 8006fd4:	429c      	cmp	r4, r3
 8006fd6:	d10f      	bne.n	8006ff8 <__swsetup_r+0x3c>
 8006fd8:	686c      	ldr	r4, [r5, #4]
 8006fda:	89a3      	ldrh	r3, [r4, #12]
 8006fdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006fe0:	0719      	lsls	r1, r3, #28
 8006fe2:	d42c      	bmi.n	800703e <__swsetup_r+0x82>
 8006fe4:	06dd      	lsls	r5, r3, #27
 8006fe6:	d411      	bmi.n	800700c <__swsetup_r+0x50>
 8006fe8:	2309      	movs	r3, #9
 8006fea:	6033      	str	r3, [r6, #0]
 8006fec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006ff0:	81a3      	strh	r3, [r4, #12]
 8006ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ff6:	e03e      	b.n	8007076 <__swsetup_r+0xba>
 8006ff8:	4b25      	ldr	r3, [pc, #148]	; (8007090 <__swsetup_r+0xd4>)
 8006ffa:	429c      	cmp	r4, r3
 8006ffc:	d101      	bne.n	8007002 <__swsetup_r+0x46>
 8006ffe:	68ac      	ldr	r4, [r5, #8]
 8007000:	e7eb      	b.n	8006fda <__swsetup_r+0x1e>
 8007002:	4b24      	ldr	r3, [pc, #144]	; (8007094 <__swsetup_r+0xd8>)
 8007004:	429c      	cmp	r4, r3
 8007006:	bf08      	it	eq
 8007008:	68ec      	ldreq	r4, [r5, #12]
 800700a:	e7e6      	b.n	8006fda <__swsetup_r+0x1e>
 800700c:	0758      	lsls	r0, r3, #29
 800700e:	d512      	bpl.n	8007036 <__swsetup_r+0x7a>
 8007010:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007012:	b141      	cbz	r1, 8007026 <__swsetup_r+0x6a>
 8007014:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007018:	4299      	cmp	r1, r3
 800701a:	d002      	beq.n	8007022 <__swsetup_r+0x66>
 800701c:	4630      	mov	r0, r6
 800701e:	f7fd fc83 	bl	8004928 <_free_r>
 8007022:	2300      	movs	r3, #0
 8007024:	6363      	str	r3, [r4, #52]	; 0x34
 8007026:	89a3      	ldrh	r3, [r4, #12]
 8007028:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800702c:	81a3      	strh	r3, [r4, #12]
 800702e:	2300      	movs	r3, #0
 8007030:	6063      	str	r3, [r4, #4]
 8007032:	6923      	ldr	r3, [r4, #16]
 8007034:	6023      	str	r3, [r4, #0]
 8007036:	89a3      	ldrh	r3, [r4, #12]
 8007038:	f043 0308 	orr.w	r3, r3, #8
 800703c:	81a3      	strh	r3, [r4, #12]
 800703e:	6923      	ldr	r3, [r4, #16]
 8007040:	b94b      	cbnz	r3, 8007056 <__swsetup_r+0x9a>
 8007042:	89a3      	ldrh	r3, [r4, #12]
 8007044:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007048:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800704c:	d003      	beq.n	8007056 <__swsetup_r+0x9a>
 800704e:	4621      	mov	r1, r4
 8007050:	4630      	mov	r0, r6
 8007052:	f000 fa05 	bl	8007460 <__smakebuf_r>
 8007056:	89a0      	ldrh	r0, [r4, #12]
 8007058:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800705c:	f010 0301 	ands.w	r3, r0, #1
 8007060:	d00a      	beq.n	8007078 <__swsetup_r+0xbc>
 8007062:	2300      	movs	r3, #0
 8007064:	60a3      	str	r3, [r4, #8]
 8007066:	6963      	ldr	r3, [r4, #20]
 8007068:	425b      	negs	r3, r3
 800706a:	61a3      	str	r3, [r4, #24]
 800706c:	6923      	ldr	r3, [r4, #16]
 800706e:	b943      	cbnz	r3, 8007082 <__swsetup_r+0xc6>
 8007070:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007074:	d1ba      	bne.n	8006fec <__swsetup_r+0x30>
 8007076:	bd70      	pop	{r4, r5, r6, pc}
 8007078:	0781      	lsls	r1, r0, #30
 800707a:	bf58      	it	pl
 800707c:	6963      	ldrpl	r3, [r4, #20]
 800707e:	60a3      	str	r3, [r4, #8]
 8007080:	e7f4      	b.n	800706c <__swsetup_r+0xb0>
 8007082:	2000      	movs	r0, #0
 8007084:	e7f7      	b.n	8007076 <__swsetup_r+0xba>
 8007086:	bf00      	nop
 8007088:	200005e4 	.word	0x200005e4
 800708c:	0800807c 	.word	0x0800807c
 8007090:	0800809c 	.word	0x0800809c
 8007094:	0800805c 	.word	0x0800805c

08007098 <abort>:
 8007098:	b508      	push	{r3, lr}
 800709a:	2006      	movs	r0, #6
 800709c:	f000 fa48 	bl	8007530 <raise>
 80070a0:	2001      	movs	r0, #1
 80070a2:	f7fa fab7 	bl	8001614 <_exit>
	...

080070a8 <__sflush_r>:
 80070a8:	898a      	ldrh	r2, [r1, #12]
 80070aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070ae:	4605      	mov	r5, r0
 80070b0:	0710      	lsls	r0, r2, #28
 80070b2:	460c      	mov	r4, r1
 80070b4:	d458      	bmi.n	8007168 <__sflush_r+0xc0>
 80070b6:	684b      	ldr	r3, [r1, #4]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	dc05      	bgt.n	80070c8 <__sflush_r+0x20>
 80070bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80070be:	2b00      	cmp	r3, #0
 80070c0:	dc02      	bgt.n	80070c8 <__sflush_r+0x20>
 80070c2:	2000      	movs	r0, #0
 80070c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80070ca:	2e00      	cmp	r6, #0
 80070cc:	d0f9      	beq.n	80070c2 <__sflush_r+0x1a>
 80070ce:	2300      	movs	r3, #0
 80070d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80070d4:	682f      	ldr	r7, [r5, #0]
 80070d6:	602b      	str	r3, [r5, #0]
 80070d8:	d032      	beq.n	8007140 <__sflush_r+0x98>
 80070da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80070dc:	89a3      	ldrh	r3, [r4, #12]
 80070de:	075a      	lsls	r2, r3, #29
 80070e0:	d505      	bpl.n	80070ee <__sflush_r+0x46>
 80070e2:	6863      	ldr	r3, [r4, #4]
 80070e4:	1ac0      	subs	r0, r0, r3
 80070e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80070e8:	b10b      	cbz	r3, 80070ee <__sflush_r+0x46>
 80070ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80070ec:	1ac0      	subs	r0, r0, r3
 80070ee:	2300      	movs	r3, #0
 80070f0:	4602      	mov	r2, r0
 80070f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80070f4:	6a21      	ldr	r1, [r4, #32]
 80070f6:	4628      	mov	r0, r5
 80070f8:	47b0      	blx	r6
 80070fa:	1c43      	adds	r3, r0, #1
 80070fc:	89a3      	ldrh	r3, [r4, #12]
 80070fe:	d106      	bne.n	800710e <__sflush_r+0x66>
 8007100:	6829      	ldr	r1, [r5, #0]
 8007102:	291d      	cmp	r1, #29
 8007104:	d82c      	bhi.n	8007160 <__sflush_r+0xb8>
 8007106:	4a2a      	ldr	r2, [pc, #168]	; (80071b0 <__sflush_r+0x108>)
 8007108:	40ca      	lsrs	r2, r1
 800710a:	07d6      	lsls	r6, r2, #31
 800710c:	d528      	bpl.n	8007160 <__sflush_r+0xb8>
 800710e:	2200      	movs	r2, #0
 8007110:	6062      	str	r2, [r4, #4]
 8007112:	04d9      	lsls	r1, r3, #19
 8007114:	6922      	ldr	r2, [r4, #16]
 8007116:	6022      	str	r2, [r4, #0]
 8007118:	d504      	bpl.n	8007124 <__sflush_r+0x7c>
 800711a:	1c42      	adds	r2, r0, #1
 800711c:	d101      	bne.n	8007122 <__sflush_r+0x7a>
 800711e:	682b      	ldr	r3, [r5, #0]
 8007120:	b903      	cbnz	r3, 8007124 <__sflush_r+0x7c>
 8007122:	6560      	str	r0, [r4, #84]	; 0x54
 8007124:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007126:	602f      	str	r7, [r5, #0]
 8007128:	2900      	cmp	r1, #0
 800712a:	d0ca      	beq.n	80070c2 <__sflush_r+0x1a>
 800712c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007130:	4299      	cmp	r1, r3
 8007132:	d002      	beq.n	800713a <__sflush_r+0x92>
 8007134:	4628      	mov	r0, r5
 8007136:	f7fd fbf7 	bl	8004928 <_free_r>
 800713a:	2000      	movs	r0, #0
 800713c:	6360      	str	r0, [r4, #52]	; 0x34
 800713e:	e7c1      	b.n	80070c4 <__sflush_r+0x1c>
 8007140:	6a21      	ldr	r1, [r4, #32]
 8007142:	2301      	movs	r3, #1
 8007144:	4628      	mov	r0, r5
 8007146:	47b0      	blx	r6
 8007148:	1c41      	adds	r1, r0, #1
 800714a:	d1c7      	bne.n	80070dc <__sflush_r+0x34>
 800714c:	682b      	ldr	r3, [r5, #0]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d0c4      	beq.n	80070dc <__sflush_r+0x34>
 8007152:	2b1d      	cmp	r3, #29
 8007154:	d001      	beq.n	800715a <__sflush_r+0xb2>
 8007156:	2b16      	cmp	r3, #22
 8007158:	d101      	bne.n	800715e <__sflush_r+0xb6>
 800715a:	602f      	str	r7, [r5, #0]
 800715c:	e7b1      	b.n	80070c2 <__sflush_r+0x1a>
 800715e:	89a3      	ldrh	r3, [r4, #12]
 8007160:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007164:	81a3      	strh	r3, [r4, #12]
 8007166:	e7ad      	b.n	80070c4 <__sflush_r+0x1c>
 8007168:	690f      	ldr	r7, [r1, #16]
 800716a:	2f00      	cmp	r7, #0
 800716c:	d0a9      	beq.n	80070c2 <__sflush_r+0x1a>
 800716e:	0793      	lsls	r3, r2, #30
 8007170:	680e      	ldr	r6, [r1, #0]
 8007172:	bf08      	it	eq
 8007174:	694b      	ldreq	r3, [r1, #20]
 8007176:	600f      	str	r7, [r1, #0]
 8007178:	bf18      	it	ne
 800717a:	2300      	movne	r3, #0
 800717c:	eba6 0807 	sub.w	r8, r6, r7
 8007180:	608b      	str	r3, [r1, #8]
 8007182:	f1b8 0f00 	cmp.w	r8, #0
 8007186:	dd9c      	ble.n	80070c2 <__sflush_r+0x1a>
 8007188:	6a21      	ldr	r1, [r4, #32]
 800718a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800718c:	4643      	mov	r3, r8
 800718e:	463a      	mov	r2, r7
 8007190:	4628      	mov	r0, r5
 8007192:	47b0      	blx	r6
 8007194:	2800      	cmp	r0, #0
 8007196:	dc06      	bgt.n	80071a6 <__sflush_r+0xfe>
 8007198:	89a3      	ldrh	r3, [r4, #12]
 800719a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800719e:	81a3      	strh	r3, [r4, #12]
 80071a0:	f04f 30ff 	mov.w	r0, #4294967295
 80071a4:	e78e      	b.n	80070c4 <__sflush_r+0x1c>
 80071a6:	4407      	add	r7, r0
 80071a8:	eba8 0800 	sub.w	r8, r8, r0
 80071ac:	e7e9      	b.n	8007182 <__sflush_r+0xda>
 80071ae:	bf00      	nop
 80071b0:	20400001 	.word	0x20400001

080071b4 <_fflush_r>:
 80071b4:	b538      	push	{r3, r4, r5, lr}
 80071b6:	690b      	ldr	r3, [r1, #16]
 80071b8:	4605      	mov	r5, r0
 80071ba:	460c      	mov	r4, r1
 80071bc:	b913      	cbnz	r3, 80071c4 <_fflush_r+0x10>
 80071be:	2500      	movs	r5, #0
 80071c0:	4628      	mov	r0, r5
 80071c2:	bd38      	pop	{r3, r4, r5, pc}
 80071c4:	b118      	cbz	r0, 80071ce <_fflush_r+0x1a>
 80071c6:	6983      	ldr	r3, [r0, #24]
 80071c8:	b90b      	cbnz	r3, 80071ce <_fflush_r+0x1a>
 80071ca:	f000 f887 	bl	80072dc <__sinit>
 80071ce:	4b14      	ldr	r3, [pc, #80]	; (8007220 <_fflush_r+0x6c>)
 80071d0:	429c      	cmp	r4, r3
 80071d2:	d11b      	bne.n	800720c <_fflush_r+0x58>
 80071d4:	686c      	ldr	r4, [r5, #4]
 80071d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d0ef      	beq.n	80071be <_fflush_r+0xa>
 80071de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80071e0:	07d0      	lsls	r0, r2, #31
 80071e2:	d404      	bmi.n	80071ee <_fflush_r+0x3a>
 80071e4:	0599      	lsls	r1, r3, #22
 80071e6:	d402      	bmi.n	80071ee <_fflush_r+0x3a>
 80071e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071ea:	f7ff fcf8 	bl	8006bde <__retarget_lock_acquire_recursive>
 80071ee:	4628      	mov	r0, r5
 80071f0:	4621      	mov	r1, r4
 80071f2:	f7ff ff59 	bl	80070a8 <__sflush_r>
 80071f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071f8:	07da      	lsls	r2, r3, #31
 80071fa:	4605      	mov	r5, r0
 80071fc:	d4e0      	bmi.n	80071c0 <_fflush_r+0xc>
 80071fe:	89a3      	ldrh	r3, [r4, #12]
 8007200:	059b      	lsls	r3, r3, #22
 8007202:	d4dd      	bmi.n	80071c0 <_fflush_r+0xc>
 8007204:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007206:	f7ff fceb 	bl	8006be0 <__retarget_lock_release_recursive>
 800720a:	e7d9      	b.n	80071c0 <_fflush_r+0xc>
 800720c:	4b05      	ldr	r3, [pc, #20]	; (8007224 <_fflush_r+0x70>)
 800720e:	429c      	cmp	r4, r3
 8007210:	d101      	bne.n	8007216 <_fflush_r+0x62>
 8007212:	68ac      	ldr	r4, [r5, #8]
 8007214:	e7df      	b.n	80071d6 <_fflush_r+0x22>
 8007216:	4b04      	ldr	r3, [pc, #16]	; (8007228 <_fflush_r+0x74>)
 8007218:	429c      	cmp	r4, r3
 800721a:	bf08      	it	eq
 800721c:	68ec      	ldreq	r4, [r5, #12]
 800721e:	e7da      	b.n	80071d6 <_fflush_r+0x22>
 8007220:	0800807c 	.word	0x0800807c
 8007224:	0800809c 	.word	0x0800809c
 8007228:	0800805c 	.word	0x0800805c

0800722c <std>:
 800722c:	2300      	movs	r3, #0
 800722e:	b510      	push	{r4, lr}
 8007230:	4604      	mov	r4, r0
 8007232:	e9c0 3300 	strd	r3, r3, [r0]
 8007236:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800723a:	6083      	str	r3, [r0, #8]
 800723c:	8181      	strh	r1, [r0, #12]
 800723e:	6643      	str	r3, [r0, #100]	; 0x64
 8007240:	81c2      	strh	r2, [r0, #14]
 8007242:	6183      	str	r3, [r0, #24]
 8007244:	4619      	mov	r1, r3
 8007246:	2208      	movs	r2, #8
 8007248:	305c      	adds	r0, #92	; 0x5c
 800724a:	f7fd fb65 	bl	8004918 <memset>
 800724e:	4b05      	ldr	r3, [pc, #20]	; (8007264 <std+0x38>)
 8007250:	6263      	str	r3, [r4, #36]	; 0x24
 8007252:	4b05      	ldr	r3, [pc, #20]	; (8007268 <std+0x3c>)
 8007254:	62a3      	str	r3, [r4, #40]	; 0x28
 8007256:	4b05      	ldr	r3, [pc, #20]	; (800726c <std+0x40>)
 8007258:	62e3      	str	r3, [r4, #44]	; 0x2c
 800725a:	4b05      	ldr	r3, [pc, #20]	; (8007270 <std+0x44>)
 800725c:	6224      	str	r4, [r4, #32]
 800725e:	6323      	str	r3, [r4, #48]	; 0x30
 8007260:	bd10      	pop	{r4, pc}
 8007262:	bf00      	nop
 8007264:	08007569 	.word	0x08007569
 8007268:	0800758b 	.word	0x0800758b
 800726c:	080075c3 	.word	0x080075c3
 8007270:	080075e7 	.word	0x080075e7

08007274 <_cleanup_r>:
 8007274:	4901      	ldr	r1, [pc, #4]	; (800727c <_cleanup_r+0x8>)
 8007276:	f000 b8af 	b.w	80073d8 <_fwalk_reent>
 800727a:	bf00      	nop
 800727c:	080071b5 	.word	0x080071b5

08007280 <__sfmoreglue>:
 8007280:	b570      	push	{r4, r5, r6, lr}
 8007282:	2268      	movs	r2, #104	; 0x68
 8007284:	1e4d      	subs	r5, r1, #1
 8007286:	4355      	muls	r5, r2
 8007288:	460e      	mov	r6, r1
 800728a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800728e:	f7fd fbb7 	bl	8004a00 <_malloc_r>
 8007292:	4604      	mov	r4, r0
 8007294:	b140      	cbz	r0, 80072a8 <__sfmoreglue+0x28>
 8007296:	2100      	movs	r1, #0
 8007298:	e9c0 1600 	strd	r1, r6, [r0]
 800729c:	300c      	adds	r0, #12
 800729e:	60a0      	str	r0, [r4, #8]
 80072a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80072a4:	f7fd fb38 	bl	8004918 <memset>
 80072a8:	4620      	mov	r0, r4
 80072aa:	bd70      	pop	{r4, r5, r6, pc}

080072ac <__sfp_lock_acquire>:
 80072ac:	4801      	ldr	r0, [pc, #4]	; (80072b4 <__sfp_lock_acquire+0x8>)
 80072ae:	f7ff bc96 	b.w	8006bde <__retarget_lock_acquire_recursive>
 80072b2:	bf00      	nop
 80072b4:	200008f5 	.word	0x200008f5

080072b8 <__sfp_lock_release>:
 80072b8:	4801      	ldr	r0, [pc, #4]	; (80072c0 <__sfp_lock_release+0x8>)
 80072ba:	f7ff bc91 	b.w	8006be0 <__retarget_lock_release_recursive>
 80072be:	bf00      	nop
 80072c0:	200008f5 	.word	0x200008f5

080072c4 <__sinit_lock_acquire>:
 80072c4:	4801      	ldr	r0, [pc, #4]	; (80072cc <__sinit_lock_acquire+0x8>)
 80072c6:	f7ff bc8a 	b.w	8006bde <__retarget_lock_acquire_recursive>
 80072ca:	bf00      	nop
 80072cc:	200008f6 	.word	0x200008f6

080072d0 <__sinit_lock_release>:
 80072d0:	4801      	ldr	r0, [pc, #4]	; (80072d8 <__sinit_lock_release+0x8>)
 80072d2:	f7ff bc85 	b.w	8006be0 <__retarget_lock_release_recursive>
 80072d6:	bf00      	nop
 80072d8:	200008f6 	.word	0x200008f6

080072dc <__sinit>:
 80072dc:	b510      	push	{r4, lr}
 80072de:	4604      	mov	r4, r0
 80072e0:	f7ff fff0 	bl	80072c4 <__sinit_lock_acquire>
 80072e4:	69a3      	ldr	r3, [r4, #24]
 80072e6:	b11b      	cbz	r3, 80072f0 <__sinit+0x14>
 80072e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072ec:	f7ff bff0 	b.w	80072d0 <__sinit_lock_release>
 80072f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80072f4:	6523      	str	r3, [r4, #80]	; 0x50
 80072f6:	4b13      	ldr	r3, [pc, #76]	; (8007344 <__sinit+0x68>)
 80072f8:	4a13      	ldr	r2, [pc, #76]	; (8007348 <__sinit+0x6c>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80072fe:	42a3      	cmp	r3, r4
 8007300:	bf04      	itt	eq
 8007302:	2301      	moveq	r3, #1
 8007304:	61a3      	streq	r3, [r4, #24]
 8007306:	4620      	mov	r0, r4
 8007308:	f000 f820 	bl	800734c <__sfp>
 800730c:	6060      	str	r0, [r4, #4]
 800730e:	4620      	mov	r0, r4
 8007310:	f000 f81c 	bl	800734c <__sfp>
 8007314:	60a0      	str	r0, [r4, #8]
 8007316:	4620      	mov	r0, r4
 8007318:	f000 f818 	bl	800734c <__sfp>
 800731c:	2200      	movs	r2, #0
 800731e:	60e0      	str	r0, [r4, #12]
 8007320:	2104      	movs	r1, #4
 8007322:	6860      	ldr	r0, [r4, #4]
 8007324:	f7ff ff82 	bl	800722c <std>
 8007328:	68a0      	ldr	r0, [r4, #8]
 800732a:	2201      	movs	r2, #1
 800732c:	2109      	movs	r1, #9
 800732e:	f7ff ff7d 	bl	800722c <std>
 8007332:	68e0      	ldr	r0, [r4, #12]
 8007334:	2202      	movs	r2, #2
 8007336:	2112      	movs	r1, #18
 8007338:	f7ff ff78 	bl	800722c <std>
 800733c:	2301      	movs	r3, #1
 800733e:	61a3      	str	r3, [r4, #24]
 8007340:	e7d2      	b.n	80072e8 <__sinit+0xc>
 8007342:	bf00      	nop
 8007344:	08007ce4 	.word	0x08007ce4
 8007348:	08007275 	.word	0x08007275

0800734c <__sfp>:
 800734c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800734e:	4607      	mov	r7, r0
 8007350:	f7ff ffac 	bl	80072ac <__sfp_lock_acquire>
 8007354:	4b1e      	ldr	r3, [pc, #120]	; (80073d0 <__sfp+0x84>)
 8007356:	681e      	ldr	r6, [r3, #0]
 8007358:	69b3      	ldr	r3, [r6, #24]
 800735a:	b913      	cbnz	r3, 8007362 <__sfp+0x16>
 800735c:	4630      	mov	r0, r6
 800735e:	f7ff ffbd 	bl	80072dc <__sinit>
 8007362:	3648      	adds	r6, #72	; 0x48
 8007364:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007368:	3b01      	subs	r3, #1
 800736a:	d503      	bpl.n	8007374 <__sfp+0x28>
 800736c:	6833      	ldr	r3, [r6, #0]
 800736e:	b30b      	cbz	r3, 80073b4 <__sfp+0x68>
 8007370:	6836      	ldr	r6, [r6, #0]
 8007372:	e7f7      	b.n	8007364 <__sfp+0x18>
 8007374:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007378:	b9d5      	cbnz	r5, 80073b0 <__sfp+0x64>
 800737a:	4b16      	ldr	r3, [pc, #88]	; (80073d4 <__sfp+0x88>)
 800737c:	60e3      	str	r3, [r4, #12]
 800737e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007382:	6665      	str	r5, [r4, #100]	; 0x64
 8007384:	f7ff fc2a 	bl	8006bdc <__retarget_lock_init_recursive>
 8007388:	f7ff ff96 	bl	80072b8 <__sfp_lock_release>
 800738c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007390:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007394:	6025      	str	r5, [r4, #0]
 8007396:	61a5      	str	r5, [r4, #24]
 8007398:	2208      	movs	r2, #8
 800739a:	4629      	mov	r1, r5
 800739c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80073a0:	f7fd faba 	bl	8004918 <memset>
 80073a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80073a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80073ac:	4620      	mov	r0, r4
 80073ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073b0:	3468      	adds	r4, #104	; 0x68
 80073b2:	e7d9      	b.n	8007368 <__sfp+0x1c>
 80073b4:	2104      	movs	r1, #4
 80073b6:	4638      	mov	r0, r7
 80073b8:	f7ff ff62 	bl	8007280 <__sfmoreglue>
 80073bc:	4604      	mov	r4, r0
 80073be:	6030      	str	r0, [r6, #0]
 80073c0:	2800      	cmp	r0, #0
 80073c2:	d1d5      	bne.n	8007370 <__sfp+0x24>
 80073c4:	f7ff ff78 	bl	80072b8 <__sfp_lock_release>
 80073c8:	230c      	movs	r3, #12
 80073ca:	603b      	str	r3, [r7, #0]
 80073cc:	e7ee      	b.n	80073ac <__sfp+0x60>
 80073ce:	bf00      	nop
 80073d0:	08007ce4 	.word	0x08007ce4
 80073d4:	ffff0001 	.word	0xffff0001

080073d8 <_fwalk_reent>:
 80073d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073dc:	4606      	mov	r6, r0
 80073de:	4688      	mov	r8, r1
 80073e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80073e4:	2700      	movs	r7, #0
 80073e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80073ea:	f1b9 0901 	subs.w	r9, r9, #1
 80073ee:	d505      	bpl.n	80073fc <_fwalk_reent+0x24>
 80073f0:	6824      	ldr	r4, [r4, #0]
 80073f2:	2c00      	cmp	r4, #0
 80073f4:	d1f7      	bne.n	80073e6 <_fwalk_reent+0xe>
 80073f6:	4638      	mov	r0, r7
 80073f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073fc:	89ab      	ldrh	r3, [r5, #12]
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d907      	bls.n	8007412 <_fwalk_reent+0x3a>
 8007402:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007406:	3301      	adds	r3, #1
 8007408:	d003      	beq.n	8007412 <_fwalk_reent+0x3a>
 800740a:	4629      	mov	r1, r5
 800740c:	4630      	mov	r0, r6
 800740e:	47c0      	blx	r8
 8007410:	4307      	orrs	r7, r0
 8007412:	3568      	adds	r5, #104	; 0x68
 8007414:	e7e9      	b.n	80073ea <_fwalk_reent+0x12>

08007416 <__swhatbuf_r>:
 8007416:	b570      	push	{r4, r5, r6, lr}
 8007418:	460e      	mov	r6, r1
 800741a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800741e:	2900      	cmp	r1, #0
 8007420:	b096      	sub	sp, #88	; 0x58
 8007422:	4614      	mov	r4, r2
 8007424:	461d      	mov	r5, r3
 8007426:	da08      	bge.n	800743a <__swhatbuf_r+0x24>
 8007428:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800742c:	2200      	movs	r2, #0
 800742e:	602a      	str	r2, [r5, #0]
 8007430:	061a      	lsls	r2, r3, #24
 8007432:	d410      	bmi.n	8007456 <__swhatbuf_r+0x40>
 8007434:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007438:	e00e      	b.n	8007458 <__swhatbuf_r+0x42>
 800743a:	466a      	mov	r2, sp
 800743c:	f000 f8fa 	bl	8007634 <_fstat_r>
 8007440:	2800      	cmp	r0, #0
 8007442:	dbf1      	blt.n	8007428 <__swhatbuf_r+0x12>
 8007444:	9a01      	ldr	r2, [sp, #4]
 8007446:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800744a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800744e:	425a      	negs	r2, r3
 8007450:	415a      	adcs	r2, r3
 8007452:	602a      	str	r2, [r5, #0]
 8007454:	e7ee      	b.n	8007434 <__swhatbuf_r+0x1e>
 8007456:	2340      	movs	r3, #64	; 0x40
 8007458:	2000      	movs	r0, #0
 800745a:	6023      	str	r3, [r4, #0]
 800745c:	b016      	add	sp, #88	; 0x58
 800745e:	bd70      	pop	{r4, r5, r6, pc}

08007460 <__smakebuf_r>:
 8007460:	898b      	ldrh	r3, [r1, #12]
 8007462:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007464:	079d      	lsls	r5, r3, #30
 8007466:	4606      	mov	r6, r0
 8007468:	460c      	mov	r4, r1
 800746a:	d507      	bpl.n	800747c <__smakebuf_r+0x1c>
 800746c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007470:	6023      	str	r3, [r4, #0]
 8007472:	6123      	str	r3, [r4, #16]
 8007474:	2301      	movs	r3, #1
 8007476:	6163      	str	r3, [r4, #20]
 8007478:	b002      	add	sp, #8
 800747a:	bd70      	pop	{r4, r5, r6, pc}
 800747c:	ab01      	add	r3, sp, #4
 800747e:	466a      	mov	r2, sp
 8007480:	f7ff ffc9 	bl	8007416 <__swhatbuf_r>
 8007484:	9900      	ldr	r1, [sp, #0]
 8007486:	4605      	mov	r5, r0
 8007488:	4630      	mov	r0, r6
 800748a:	f7fd fab9 	bl	8004a00 <_malloc_r>
 800748e:	b948      	cbnz	r0, 80074a4 <__smakebuf_r+0x44>
 8007490:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007494:	059a      	lsls	r2, r3, #22
 8007496:	d4ef      	bmi.n	8007478 <__smakebuf_r+0x18>
 8007498:	f023 0303 	bic.w	r3, r3, #3
 800749c:	f043 0302 	orr.w	r3, r3, #2
 80074a0:	81a3      	strh	r3, [r4, #12]
 80074a2:	e7e3      	b.n	800746c <__smakebuf_r+0xc>
 80074a4:	4b0d      	ldr	r3, [pc, #52]	; (80074dc <__smakebuf_r+0x7c>)
 80074a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80074a8:	89a3      	ldrh	r3, [r4, #12]
 80074aa:	6020      	str	r0, [r4, #0]
 80074ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074b0:	81a3      	strh	r3, [r4, #12]
 80074b2:	9b00      	ldr	r3, [sp, #0]
 80074b4:	6163      	str	r3, [r4, #20]
 80074b6:	9b01      	ldr	r3, [sp, #4]
 80074b8:	6120      	str	r0, [r4, #16]
 80074ba:	b15b      	cbz	r3, 80074d4 <__smakebuf_r+0x74>
 80074bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074c0:	4630      	mov	r0, r6
 80074c2:	f000 f8c9 	bl	8007658 <_isatty_r>
 80074c6:	b128      	cbz	r0, 80074d4 <__smakebuf_r+0x74>
 80074c8:	89a3      	ldrh	r3, [r4, #12]
 80074ca:	f023 0303 	bic.w	r3, r3, #3
 80074ce:	f043 0301 	orr.w	r3, r3, #1
 80074d2:	81a3      	strh	r3, [r4, #12]
 80074d4:	89a0      	ldrh	r0, [r4, #12]
 80074d6:	4305      	orrs	r5, r0
 80074d8:	81a5      	strh	r5, [r4, #12]
 80074da:	e7cd      	b.n	8007478 <__smakebuf_r+0x18>
 80074dc:	08007275 	.word	0x08007275

080074e0 <_raise_r>:
 80074e0:	291f      	cmp	r1, #31
 80074e2:	b538      	push	{r3, r4, r5, lr}
 80074e4:	4604      	mov	r4, r0
 80074e6:	460d      	mov	r5, r1
 80074e8:	d904      	bls.n	80074f4 <_raise_r+0x14>
 80074ea:	2316      	movs	r3, #22
 80074ec:	6003      	str	r3, [r0, #0]
 80074ee:	f04f 30ff 	mov.w	r0, #4294967295
 80074f2:	bd38      	pop	{r3, r4, r5, pc}
 80074f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80074f6:	b112      	cbz	r2, 80074fe <_raise_r+0x1e>
 80074f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80074fc:	b94b      	cbnz	r3, 8007512 <_raise_r+0x32>
 80074fe:	4620      	mov	r0, r4
 8007500:	f000 f830 	bl	8007564 <_getpid_r>
 8007504:	462a      	mov	r2, r5
 8007506:	4601      	mov	r1, r0
 8007508:	4620      	mov	r0, r4
 800750a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800750e:	f000 b817 	b.w	8007540 <_kill_r>
 8007512:	2b01      	cmp	r3, #1
 8007514:	d00a      	beq.n	800752c <_raise_r+0x4c>
 8007516:	1c59      	adds	r1, r3, #1
 8007518:	d103      	bne.n	8007522 <_raise_r+0x42>
 800751a:	2316      	movs	r3, #22
 800751c:	6003      	str	r3, [r0, #0]
 800751e:	2001      	movs	r0, #1
 8007520:	e7e7      	b.n	80074f2 <_raise_r+0x12>
 8007522:	2400      	movs	r4, #0
 8007524:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007528:	4628      	mov	r0, r5
 800752a:	4798      	blx	r3
 800752c:	2000      	movs	r0, #0
 800752e:	e7e0      	b.n	80074f2 <_raise_r+0x12>

08007530 <raise>:
 8007530:	4b02      	ldr	r3, [pc, #8]	; (800753c <raise+0xc>)
 8007532:	4601      	mov	r1, r0
 8007534:	6818      	ldr	r0, [r3, #0]
 8007536:	f7ff bfd3 	b.w	80074e0 <_raise_r>
 800753a:	bf00      	nop
 800753c:	200005e4 	.word	0x200005e4

08007540 <_kill_r>:
 8007540:	b538      	push	{r3, r4, r5, lr}
 8007542:	4d07      	ldr	r5, [pc, #28]	; (8007560 <_kill_r+0x20>)
 8007544:	2300      	movs	r3, #0
 8007546:	4604      	mov	r4, r0
 8007548:	4608      	mov	r0, r1
 800754a:	4611      	mov	r1, r2
 800754c:	602b      	str	r3, [r5, #0]
 800754e:	f7fa f851 	bl	80015f4 <_kill>
 8007552:	1c43      	adds	r3, r0, #1
 8007554:	d102      	bne.n	800755c <_kill_r+0x1c>
 8007556:	682b      	ldr	r3, [r5, #0]
 8007558:	b103      	cbz	r3, 800755c <_kill_r+0x1c>
 800755a:	6023      	str	r3, [r4, #0]
 800755c:	bd38      	pop	{r3, r4, r5, pc}
 800755e:	bf00      	nop
 8007560:	200008f0 	.word	0x200008f0

08007564 <_getpid_r>:
 8007564:	f7fa b83e 	b.w	80015e4 <_getpid>

08007568 <__sread>:
 8007568:	b510      	push	{r4, lr}
 800756a:	460c      	mov	r4, r1
 800756c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007570:	f000 f894 	bl	800769c <_read_r>
 8007574:	2800      	cmp	r0, #0
 8007576:	bfab      	itete	ge
 8007578:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800757a:	89a3      	ldrhlt	r3, [r4, #12]
 800757c:	181b      	addge	r3, r3, r0
 800757e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007582:	bfac      	ite	ge
 8007584:	6563      	strge	r3, [r4, #84]	; 0x54
 8007586:	81a3      	strhlt	r3, [r4, #12]
 8007588:	bd10      	pop	{r4, pc}

0800758a <__swrite>:
 800758a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800758e:	461f      	mov	r7, r3
 8007590:	898b      	ldrh	r3, [r1, #12]
 8007592:	05db      	lsls	r3, r3, #23
 8007594:	4605      	mov	r5, r0
 8007596:	460c      	mov	r4, r1
 8007598:	4616      	mov	r6, r2
 800759a:	d505      	bpl.n	80075a8 <__swrite+0x1e>
 800759c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075a0:	2302      	movs	r3, #2
 80075a2:	2200      	movs	r2, #0
 80075a4:	f000 f868 	bl	8007678 <_lseek_r>
 80075a8:	89a3      	ldrh	r3, [r4, #12]
 80075aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075b2:	81a3      	strh	r3, [r4, #12]
 80075b4:	4632      	mov	r2, r6
 80075b6:	463b      	mov	r3, r7
 80075b8:	4628      	mov	r0, r5
 80075ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075be:	f000 b817 	b.w	80075f0 <_write_r>

080075c2 <__sseek>:
 80075c2:	b510      	push	{r4, lr}
 80075c4:	460c      	mov	r4, r1
 80075c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075ca:	f000 f855 	bl	8007678 <_lseek_r>
 80075ce:	1c43      	adds	r3, r0, #1
 80075d0:	89a3      	ldrh	r3, [r4, #12]
 80075d2:	bf15      	itete	ne
 80075d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80075d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80075da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80075de:	81a3      	strheq	r3, [r4, #12]
 80075e0:	bf18      	it	ne
 80075e2:	81a3      	strhne	r3, [r4, #12]
 80075e4:	bd10      	pop	{r4, pc}

080075e6 <__sclose>:
 80075e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075ea:	f000 b813 	b.w	8007614 <_close_r>
	...

080075f0 <_write_r>:
 80075f0:	b538      	push	{r3, r4, r5, lr}
 80075f2:	4d07      	ldr	r5, [pc, #28]	; (8007610 <_write_r+0x20>)
 80075f4:	4604      	mov	r4, r0
 80075f6:	4608      	mov	r0, r1
 80075f8:	4611      	mov	r1, r2
 80075fa:	2200      	movs	r2, #0
 80075fc:	602a      	str	r2, [r5, #0]
 80075fe:	461a      	mov	r2, r3
 8007600:	f7fa f82f 	bl	8001662 <_write>
 8007604:	1c43      	adds	r3, r0, #1
 8007606:	d102      	bne.n	800760e <_write_r+0x1e>
 8007608:	682b      	ldr	r3, [r5, #0]
 800760a:	b103      	cbz	r3, 800760e <_write_r+0x1e>
 800760c:	6023      	str	r3, [r4, #0]
 800760e:	bd38      	pop	{r3, r4, r5, pc}
 8007610:	200008f0 	.word	0x200008f0

08007614 <_close_r>:
 8007614:	b538      	push	{r3, r4, r5, lr}
 8007616:	4d06      	ldr	r5, [pc, #24]	; (8007630 <_close_r+0x1c>)
 8007618:	2300      	movs	r3, #0
 800761a:	4604      	mov	r4, r0
 800761c:	4608      	mov	r0, r1
 800761e:	602b      	str	r3, [r5, #0]
 8007620:	f7fa f83b 	bl	800169a <_close>
 8007624:	1c43      	adds	r3, r0, #1
 8007626:	d102      	bne.n	800762e <_close_r+0x1a>
 8007628:	682b      	ldr	r3, [r5, #0]
 800762a:	b103      	cbz	r3, 800762e <_close_r+0x1a>
 800762c:	6023      	str	r3, [r4, #0]
 800762e:	bd38      	pop	{r3, r4, r5, pc}
 8007630:	200008f0 	.word	0x200008f0

08007634 <_fstat_r>:
 8007634:	b538      	push	{r3, r4, r5, lr}
 8007636:	4d07      	ldr	r5, [pc, #28]	; (8007654 <_fstat_r+0x20>)
 8007638:	2300      	movs	r3, #0
 800763a:	4604      	mov	r4, r0
 800763c:	4608      	mov	r0, r1
 800763e:	4611      	mov	r1, r2
 8007640:	602b      	str	r3, [r5, #0]
 8007642:	f7fa f836 	bl	80016b2 <_fstat>
 8007646:	1c43      	adds	r3, r0, #1
 8007648:	d102      	bne.n	8007650 <_fstat_r+0x1c>
 800764a:	682b      	ldr	r3, [r5, #0]
 800764c:	b103      	cbz	r3, 8007650 <_fstat_r+0x1c>
 800764e:	6023      	str	r3, [r4, #0]
 8007650:	bd38      	pop	{r3, r4, r5, pc}
 8007652:	bf00      	nop
 8007654:	200008f0 	.word	0x200008f0

08007658 <_isatty_r>:
 8007658:	b538      	push	{r3, r4, r5, lr}
 800765a:	4d06      	ldr	r5, [pc, #24]	; (8007674 <_isatty_r+0x1c>)
 800765c:	2300      	movs	r3, #0
 800765e:	4604      	mov	r4, r0
 8007660:	4608      	mov	r0, r1
 8007662:	602b      	str	r3, [r5, #0]
 8007664:	f7fa f835 	bl	80016d2 <_isatty>
 8007668:	1c43      	adds	r3, r0, #1
 800766a:	d102      	bne.n	8007672 <_isatty_r+0x1a>
 800766c:	682b      	ldr	r3, [r5, #0]
 800766e:	b103      	cbz	r3, 8007672 <_isatty_r+0x1a>
 8007670:	6023      	str	r3, [r4, #0]
 8007672:	bd38      	pop	{r3, r4, r5, pc}
 8007674:	200008f0 	.word	0x200008f0

08007678 <_lseek_r>:
 8007678:	b538      	push	{r3, r4, r5, lr}
 800767a:	4d07      	ldr	r5, [pc, #28]	; (8007698 <_lseek_r+0x20>)
 800767c:	4604      	mov	r4, r0
 800767e:	4608      	mov	r0, r1
 8007680:	4611      	mov	r1, r2
 8007682:	2200      	movs	r2, #0
 8007684:	602a      	str	r2, [r5, #0]
 8007686:	461a      	mov	r2, r3
 8007688:	f7fa f82e 	bl	80016e8 <_lseek>
 800768c:	1c43      	adds	r3, r0, #1
 800768e:	d102      	bne.n	8007696 <_lseek_r+0x1e>
 8007690:	682b      	ldr	r3, [r5, #0]
 8007692:	b103      	cbz	r3, 8007696 <_lseek_r+0x1e>
 8007694:	6023      	str	r3, [r4, #0]
 8007696:	bd38      	pop	{r3, r4, r5, pc}
 8007698:	200008f0 	.word	0x200008f0

0800769c <_read_r>:
 800769c:	b538      	push	{r3, r4, r5, lr}
 800769e:	4d07      	ldr	r5, [pc, #28]	; (80076bc <_read_r+0x20>)
 80076a0:	4604      	mov	r4, r0
 80076a2:	4608      	mov	r0, r1
 80076a4:	4611      	mov	r1, r2
 80076a6:	2200      	movs	r2, #0
 80076a8:	602a      	str	r2, [r5, #0]
 80076aa:	461a      	mov	r2, r3
 80076ac:	f7f9 ffbc 	bl	8001628 <_read>
 80076b0:	1c43      	adds	r3, r0, #1
 80076b2:	d102      	bne.n	80076ba <_read_r+0x1e>
 80076b4:	682b      	ldr	r3, [r5, #0]
 80076b6:	b103      	cbz	r3, 80076ba <_read_r+0x1e>
 80076b8:	6023      	str	r3, [r4, #0]
 80076ba:	bd38      	pop	{r3, r4, r5, pc}
 80076bc:	200008f0 	.word	0x200008f0

080076c0 <_init>:
 80076c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076c2:	bf00      	nop
 80076c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076c6:	bc08      	pop	{r3}
 80076c8:	469e      	mov	lr, r3
 80076ca:	4770      	bx	lr

080076cc <_fini>:
 80076cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ce:	bf00      	nop
 80076d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076d2:	bc08      	pop	{r3}
 80076d4:	469e      	mov	lr, r3
 80076d6:	4770      	bx	lr
