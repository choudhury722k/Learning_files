
004Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002540  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  08002710  08002710  00012710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002874  08002874  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08002874  08002874  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002874  08002874  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002874  08002874  00012874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002878  08002878  00012878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800287c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000078  080028f4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  080028f4  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002a0c  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000a9f  00000000  00000000  00022ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000348  00000000  00000000  00023558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002d0  00000000  00000000  000238a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00002669  00000000  00000000  00023b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00000e02  00000000  00000000  000261d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00026fdb  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001488  00000000  00000000  0002702c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080026f8 	.word	0x080026f8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	080026f8 	.word	0x080026f8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <GPIO_PeriClockControl>:
 *
 * @return          - none
 *
 * @Note            - none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	460b      	mov	r3, r1
 80002ba:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 80002bc:	78fb      	ldrb	r3, [r7, #3]
 80002be:	2b01      	cmp	r3, #1
 80002c0:	d157      	bne.n	8000372 <GPIO_PeriClockControl+0xc2>
		if(pGPIOx == GPIOA){
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	4a59      	ldr	r2, [pc, #356]	; (800042c <GPIO_PeriClockControl+0x17c>)
 80002c6:	4293      	cmp	r3, r2
 80002c8:	d106      	bne.n	80002d8 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80002ca:	4b59      	ldr	r3, [pc, #356]	; (8000430 <GPIO_PeriClockControl+0x180>)
 80002cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ce:	4a58      	ldr	r2, [pc, #352]	; (8000430 <GPIO_PeriClockControl+0x180>)
 80002d0:	f043 0301 	orr.w	r3, r3, #1
 80002d4:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOG_PCLK_DI();
		}else if(pGPIOx == GPIOH){
			GPIOH_PCLK_DI();
		}
	}
}
 80002d6:	e0a3      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOB){
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	4a56      	ldr	r2, [pc, #344]	; (8000434 <GPIO_PeriClockControl+0x184>)
 80002dc:	4293      	cmp	r3, r2
 80002de:	d106      	bne.n	80002ee <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80002e0:	4b53      	ldr	r3, [pc, #332]	; (8000430 <GPIO_PeriClockControl+0x180>)
 80002e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e4:	4a52      	ldr	r2, [pc, #328]	; (8000430 <GPIO_PeriClockControl+0x180>)
 80002e6:	f043 0302 	orr.w	r3, r3, #2
 80002ea:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ec:	e098      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOC){
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	4a51      	ldr	r2, [pc, #324]	; (8000438 <GPIO_PeriClockControl+0x188>)
 80002f2:	4293      	cmp	r3, r2
 80002f4:	d106      	bne.n	8000304 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80002f6:	4b4e      	ldr	r3, [pc, #312]	; (8000430 <GPIO_PeriClockControl+0x180>)
 80002f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002fa:	4a4d      	ldr	r2, [pc, #308]	; (8000430 <GPIO_PeriClockControl+0x180>)
 80002fc:	f043 0304 	orr.w	r3, r3, #4
 8000300:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000302:	e08d      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOD){
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	4a4d      	ldr	r2, [pc, #308]	; (800043c <GPIO_PeriClockControl+0x18c>)
 8000308:	4293      	cmp	r3, r2
 800030a:	d106      	bne.n	800031a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800030c:	4b48      	ldr	r3, [pc, #288]	; (8000430 <GPIO_PeriClockControl+0x180>)
 800030e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000310:	4a47      	ldr	r2, [pc, #284]	; (8000430 <GPIO_PeriClockControl+0x180>)
 8000312:	f043 0308 	orr.w	r3, r3, #8
 8000316:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000318:	e082      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOE){
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	4a48      	ldr	r2, [pc, #288]	; (8000440 <GPIO_PeriClockControl+0x190>)
 800031e:	4293      	cmp	r3, r2
 8000320:	d106      	bne.n	8000330 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000322:	4b43      	ldr	r3, [pc, #268]	; (8000430 <GPIO_PeriClockControl+0x180>)
 8000324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000326:	4a42      	ldr	r2, [pc, #264]	; (8000430 <GPIO_PeriClockControl+0x180>)
 8000328:	f043 0310 	orr.w	r3, r3, #16
 800032c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800032e:	e077      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOF){
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	4a44      	ldr	r2, [pc, #272]	; (8000444 <GPIO_PeriClockControl+0x194>)
 8000334:	4293      	cmp	r3, r2
 8000336:	d106      	bne.n	8000346 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000338:	4b3d      	ldr	r3, [pc, #244]	; (8000430 <GPIO_PeriClockControl+0x180>)
 800033a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033c:	4a3c      	ldr	r2, [pc, #240]	; (8000430 <GPIO_PeriClockControl+0x180>)
 800033e:	f043 0320 	orr.w	r3, r3, #32
 8000342:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000344:	e06c      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOG){
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	4a3f      	ldr	r2, [pc, #252]	; (8000448 <GPIO_PeriClockControl+0x198>)
 800034a:	4293      	cmp	r3, r2
 800034c:	d106      	bne.n	800035c <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800034e:	4b38      	ldr	r3, [pc, #224]	; (8000430 <GPIO_PeriClockControl+0x180>)
 8000350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000352:	4a37      	ldr	r2, [pc, #220]	; (8000430 <GPIO_PeriClockControl+0x180>)
 8000354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000358:	6313      	str	r3, [r2, #48]	; 0x30
}
 800035a:	e061      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOH){
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	4a3b      	ldr	r2, [pc, #236]	; (800044c <GPIO_PeriClockControl+0x19c>)
 8000360:	4293      	cmp	r3, r2
 8000362:	d15d      	bne.n	8000420 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 8000364:	4b32      	ldr	r3, [pc, #200]	; (8000430 <GPIO_PeriClockControl+0x180>)
 8000366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000368:	4a31      	ldr	r2, [pc, #196]	; (8000430 <GPIO_PeriClockControl+0x180>)
 800036a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800036e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000370:	e056      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA){
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	4a2d      	ldr	r2, [pc, #180]	; (800042c <GPIO_PeriClockControl+0x17c>)
 8000376:	4293      	cmp	r3, r2
 8000378:	d106      	bne.n	8000388 <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 800037a:	4b2d      	ldr	r3, [pc, #180]	; (8000430 <GPIO_PeriClockControl+0x180>)
 800037c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800037e:	4a2c      	ldr	r2, [pc, #176]	; (8000430 <GPIO_PeriClockControl+0x180>)
 8000380:	f023 0301 	bic.w	r3, r3, #1
 8000384:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000386:	e04b      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOB){
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	4a2a      	ldr	r2, [pc, #168]	; (8000434 <GPIO_PeriClockControl+0x184>)
 800038c:	4293      	cmp	r3, r2
 800038e:	d106      	bne.n	800039e <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 8000390:	4b27      	ldr	r3, [pc, #156]	; (8000430 <GPIO_PeriClockControl+0x180>)
 8000392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000394:	4a26      	ldr	r2, [pc, #152]	; (8000430 <GPIO_PeriClockControl+0x180>)
 8000396:	f023 0302 	bic.w	r3, r3, #2
 800039a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800039c:	e040      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOC){
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	4a25      	ldr	r2, [pc, #148]	; (8000438 <GPIO_PeriClockControl+0x188>)
 80003a2:	4293      	cmp	r3, r2
 80003a4:	d106      	bne.n	80003b4 <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 80003a6:	4b22      	ldr	r3, [pc, #136]	; (8000430 <GPIO_PeriClockControl+0x180>)
 80003a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003aa:	4a21      	ldr	r2, [pc, #132]	; (8000430 <GPIO_PeriClockControl+0x180>)
 80003ac:	f023 0304 	bic.w	r3, r3, #4
 80003b0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003b2:	e035      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOD){
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	4a21      	ldr	r2, [pc, #132]	; (800043c <GPIO_PeriClockControl+0x18c>)
 80003b8:	4293      	cmp	r3, r2
 80003ba:	d106      	bne.n	80003ca <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 80003bc:	4b1c      	ldr	r3, [pc, #112]	; (8000430 <GPIO_PeriClockControl+0x180>)
 80003be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c0:	4a1b      	ldr	r2, [pc, #108]	; (8000430 <GPIO_PeriClockControl+0x180>)
 80003c2:	f023 0308 	bic.w	r3, r3, #8
 80003c6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003c8:	e02a      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOE){
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	4a1c      	ldr	r2, [pc, #112]	; (8000440 <GPIO_PeriClockControl+0x190>)
 80003ce:	4293      	cmp	r3, r2
 80003d0:	d106      	bne.n	80003e0 <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 80003d2:	4b17      	ldr	r3, [pc, #92]	; (8000430 <GPIO_PeriClockControl+0x180>)
 80003d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d6:	4a16      	ldr	r2, [pc, #88]	; (8000430 <GPIO_PeriClockControl+0x180>)
 80003d8:	f023 0310 	bic.w	r3, r3, #16
 80003dc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003de:	e01f      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOF){
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	4a18      	ldr	r2, [pc, #96]	; (8000444 <GPIO_PeriClockControl+0x194>)
 80003e4:	4293      	cmp	r3, r2
 80003e6:	d106      	bne.n	80003f6 <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 80003e8:	4b11      	ldr	r3, [pc, #68]	; (8000430 <GPIO_PeriClockControl+0x180>)
 80003ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ec:	4a10      	ldr	r2, [pc, #64]	; (8000430 <GPIO_PeriClockControl+0x180>)
 80003ee:	f023 0320 	bic.w	r3, r3, #32
 80003f2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003f4:	e014      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOG){
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	4a13      	ldr	r2, [pc, #76]	; (8000448 <GPIO_PeriClockControl+0x198>)
 80003fa:	4293      	cmp	r3, r2
 80003fc:	d106      	bne.n	800040c <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 80003fe:	4b0c      	ldr	r3, [pc, #48]	; (8000430 <GPIO_PeriClockControl+0x180>)
 8000400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000402:	4a0b      	ldr	r2, [pc, #44]	; (8000430 <GPIO_PeriClockControl+0x180>)
 8000404:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000408:	6313      	str	r3, [r2, #48]	; 0x30
}
 800040a:	e009      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOH){
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	4a0f      	ldr	r2, [pc, #60]	; (800044c <GPIO_PeriClockControl+0x19c>)
 8000410:	4293      	cmp	r3, r2
 8000412:	d105      	bne.n	8000420 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 8000414:	4b06      	ldr	r3, [pc, #24]	; (8000430 <GPIO_PeriClockControl+0x180>)
 8000416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000418:	4a05      	ldr	r2, [pc, #20]	; (8000430 <GPIO_PeriClockControl+0x180>)
 800041a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800041e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000420:	bf00      	nop
 8000422:	370c      	adds	r7, #12
 8000424:	46bd      	mov	sp, r7
 8000426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042a:	4770      	bx	lr
 800042c:	40020000 	.word	0x40020000
 8000430:	40023800 	.word	0x40023800
 8000434:	40020400 	.word	0x40020400
 8000438:	40020800 	.word	0x40020800
 800043c:	40020c00 	.word	0x40020c00
 8000440:	40021000 	.word	0x40021000
 8000444:	40021400 	.word	0x40021400
 8000448:	40021800 	.word	0x40021800
 800044c:	40021c00 	.word	0x40021c00

08000450 <GPIO_Init>:
 *
 * @return          - none
 *
 * @Note            - none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000450:	b580      	push	{r7, lr}
 8000452:	b086      	sub	sp, #24
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8000458:	2300      	movs	r3, #0
 800045a:	617b      	str	r3, [r7, #20]

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	2101      	movs	r1, #1
 8000462:	4618      	mov	r0, r3
 8000464:	f7ff ff24 	bl	80002b0 <GPIO_PeriClockControl>

	// 1. configure the mode of GPIO pin
	if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	795b      	ldrb	r3, [r3, #5]
 800046c:	2b03      	cmp	r3, #3
 800046e:	d821      	bhi.n	80004b4 <GPIO_Init+0x64>
		// the non interrupt mode
		temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode << (2 *pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	795b      	ldrb	r3, [r3, #5]
 8000474:	461a      	mov	r2, r3
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	791b      	ldrb	r3, [r3, #4]
 800047a:	005b      	lsls	r3, r3, #1
 800047c:	fa02 f303 	lsl.w	r3, r2, r3
 8000480:	617b      	str	r3, [r7, #20]
		pGPIOHandle -> pGPIOx -> MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);   // Clearing
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	681a      	ldr	r2, [r3, #0]
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	791b      	ldrb	r3, [r3, #4]
 800048c:	4619      	mov	r1, r3
 800048e:	2303      	movs	r3, #3
 8000490:	408b      	lsls	r3, r1
 8000492:	43db      	mvns	r3, r3
 8000494:	4619      	mov	r1, r3
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	400a      	ands	r2, r1
 800049c:	601a      	str	r2, [r3, #0]
		pGPIOHandle -> pGPIOx -> MODER |= temp;                                                   // Setting
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	6819      	ldr	r1, [r3, #0]
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	697a      	ldr	r2, [r7, #20]
 80004aa:	430a      	orrs	r2, r1
 80004ac:	601a      	str	r2, [r3, #0]
		temp = 0;
 80004ae:	2300      	movs	r3, #0
 80004b0:	617b      	str	r3, [r7, #20]
 80004b2:	e0b8      	b.n	8000626 <GPIO_Init+0x1d6>
	}else{
		if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	795b      	ldrb	r3, [r3, #5]
 80004b8:	2b04      	cmp	r3, #4
 80004ba:	d117      	bne.n	80004ec <GPIO_Init+0x9c>
			// 1. Configure the FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004bc:	4b47      	ldr	r3, [pc, #284]	; (80005dc <GPIO_Init+0x18c>)
 80004be:	68db      	ldr	r3, [r3, #12]
 80004c0:	687a      	ldr	r2, [r7, #4]
 80004c2:	7912      	ldrb	r2, [r2, #4]
 80004c4:	4611      	mov	r1, r2
 80004c6:	2201      	movs	r2, #1
 80004c8:	408a      	lsls	r2, r1
 80004ca:	4611      	mov	r1, r2
 80004cc:	4a43      	ldr	r2, [pc, #268]	; (80005dc <GPIO_Init+0x18c>)
 80004ce:	430b      	orrs	r3, r1
 80004d0:	60d3      	str	r3, [r2, #12]
			// Clear the corresponding RTST BIT
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004d2:	4b42      	ldr	r3, [pc, #264]	; (80005dc <GPIO_Init+0x18c>)
 80004d4:	689b      	ldr	r3, [r3, #8]
 80004d6:	687a      	ldr	r2, [r7, #4]
 80004d8:	7912      	ldrb	r2, [r2, #4]
 80004da:	4611      	mov	r1, r2
 80004dc:	2201      	movs	r2, #1
 80004de:	408a      	lsls	r2, r1
 80004e0:	43d2      	mvns	r2, r2
 80004e2:	4611      	mov	r1, r2
 80004e4:	4a3d      	ldr	r2, [pc, #244]	; (80005dc <GPIO_Init+0x18c>)
 80004e6:	400b      	ands	r3, r1
 80004e8:	6093      	str	r3, [r2, #8]
 80004ea:	e035      	b.n	8000558 <GPIO_Init+0x108>
		}else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	795b      	ldrb	r3, [r3, #5]
 80004f0:	2b05      	cmp	r3, #5
 80004f2:	d117      	bne.n	8000524 <GPIO_Init+0xd4>
			// 1. Configure the RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004f4:	4b39      	ldr	r3, [pc, #228]	; (80005dc <GPIO_Init+0x18c>)
 80004f6:	689b      	ldr	r3, [r3, #8]
 80004f8:	687a      	ldr	r2, [r7, #4]
 80004fa:	7912      	ldrb	r2, [r2, #4]
 80004fc:	4611      	mov	r1, r2
 80004fe:	2201      	movs	r2, #1
 8000500:	408a      	lsls	r2, r1
 8000502:	4611      	mov	r1, r2
 8000504:	4a35      	ldr	r2, [pc, #212]	; (80005dc <GPIO_Init+0x18c>)
 8000506:	430b      	orrs	r3, r1
 8000508:	6093      	str	r3, [r2, #8]
			// Clear the corresponding FTST BIT
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800050a:	4b34      	ldr	r3, [pc, #208]	; (80005dc <GPIO_Init+0x18c>)
 800050c:	68db      	ldr	r3, [r3, #12]
 800050e:	687a      	ldr	r2, [r7, #4]
 8000510:	7912      	ldrb	r2, [r2, #4]
 8000512:	4611      	mov	r1, r2
 8000514:	2201      	movs	r2, #1
 8000516:	408a      	lsls	r2, r1
 8000518:	43d2      	mvns	r2, r2
 800051a:	4611      	mov	r1, r2
 800051c:	4a2f      	ldr	r2, [pc, #188]	; (80005dc <GPIO_Init+0x18c>)
 800051e:	400b      	ands	r3, r1
 8000520:	60d3      	str	r3, [r2, #12]
 8000522:	e019      	b.n	8000558 <GPIO_Init+0x108>
		}else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	795b      	ldrb	r3, [r3, #5]
 8000528:	2b06      	cmp	r3, #6
 800052a:	d115      	bne.n	8000558 <GPIO_Init+0x108>
			// 1. Configure both the FTSR and the RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800052c:	4b2b      	ldr	r3, [pc, #172]	; (80005dc <GPIO_Init+0x18c>)
 800052e:	68db      	ldr	r3, [r3, #12]
 8000530:	687a      	ldr	r2, [r7, #4]
 8000532:	7912      	ldrb	r2, [r2, #4]
 8000534:	4611      	mov	r1, r2
 8000536:	2201      	movs	r2, #1
 8000538:	408a      	lsls	r2, r1
 800053a:	4611      	mov	r1, r2
 800053c:	4a27      	ldr	r2, [pc, #156]	; (80005dc <GPIO_Init+0x18c>)
 800053e:	430b      	orrs	r3, r1
 8000540:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000542:	4b26      	ldr	r3, [pc, #152]	; (80005dc <GPIO_Init+0x18c>)
 8000544:	689b      	ldr	r3, [r3, #8]
 8000546:	687a      	ldr	r2, [r7, #4]
 8000548:	7912      	ldrb	r2, [r2, #4]
 800054a:	4611      	mov	r1, r2
 800054c:	2201      	movs	r2, #1
 800054e:	408a      	lsls	r2, r1
 8000550:	4611      	mov	r1, r2
 8000552:	4a22      	ldr	r2, [pc, #136]	; (80005dc <GPIO_Init+0x18c>)
 8000554:	430b      	orrs	r3, r1
 8000556:	6093      	str	r3, [r2, #8]
		}
		// 2. Configure the GPIO port selection in the SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber / 4;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	791b      	ldrb	r3, [r3, #4]
 800055c:	089b      	lsrs	r3, r3, #2
 800055e:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber % 4;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	791b      	ldrb	r3, [r3, #4]
 8000564:	f003 0303 	and.w	r3, r3, #3
 8000568:	74bb      	strb	r3, [r7, #18]
        uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4a1c      	ldr	r2, [pc, #112]	; (80005e0 <GPIO_Init+0x190>)
 8000570:	4293      	cmp	r3, r2
 8000572:	d03b      	beq.n	80005ec <GPIO_Init+0x19c>
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a1a      	ldr	r2, [pc, #104]	; (80005e4 <GPIO_Init+0x194>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d02b      	beq.n	80005d6 <GPIO_Init+0x186>
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a19      	ldr	r2, [pc, #100]	; (80005e8 <GPIO_Init+0x198>)
 8000584:	4293      	cmp	r3, r2
 8000586:	d024      	beq.n	80005d2 <GPIO_Init+0x182>
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a15      	ldr	r2, [pc, #84]	; (80005e4 <GPIO_Init+0x194>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d01d      	beq.n	80005ce <GPIO_Init+0x17e>
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a12      	ldr	r2, [pc, #72]	; (80005e0 <GPIO_Init+0x190>)
 8000598:	4293      	cmp	r3, r2
 800059a:	d016      	beq.n	80005ca <GPIO_Init+0x17a>
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a10      	ldr	r2, [pc, #64]	; (80005e4 <GPIO_Init+0x194>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d00f      	beq.n	80005c6 <GPIO_Init+0x176>
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4a0d      	ldr	r2, [pc, #52]	; (80005e0 <GPIO_Init+0x190>)
 80005ac:	4293      	cmp	r3, r2
 80005ae:	d008      	beq.n	80005c2 <GPIO_Init+0x172>
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a0b      	ldr	r2, [pc, #44]	; (80005e4 <GPIO_Init+0x194>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d101      	bne.n	80005be <GPIO_Init+0x16e>
 80005ba:	2307      	movs	r3, #7
 80005bc:	e017      	b.n	80005ee <GPIO_Init+0x19e>
 80005be:	2300      	movs	r3, #0
 80005c0:	e015      	b.n	80005ee <GPIO_Init+0x19e>
 80005c2:	2306      	movs	r3, #6
 80005c4:	e013      	b.n	80005ee <GPIO_Init+0x19e>
 80005c6:	2305      	movs	r3, #5
 80005c8:	e011      	b.n	80005ee <GPIO_Init+0x19e>
 80005ca:	2304      	movs	r3, #4
 80005cc:	e00f      	b.n	80005ee <GPIO_Init+0x19e>
 80005ce:	2303      	movs	r3, #3
 80005d0:	e00d      	b.n	80005ee <GPIO_Init+0x19e>
 80005d2:	2302      	movs	r3, #2
 80005d4:	e00b      	b.n	80005ee <GPIO_Init+0x19e>
 80005d6:	2301      	movs	r3, #1
 80005d8:	e009      	b.n	80005ee <GPIO_Init+0x19e>
 80005da:	bf00      	nop
 80005dc:	40013c00 	.word	0x40013c00
 80005e0:	40020000 	.word	0x40020000
 80005e4:	40020400 	.word	0x40020400
 80005e8:	40020800 	.word	0x40020800
 80005ec:	2300      	movs	r3, #0
 80005ee:	747b      	strb	r3, [r7, #17]
        SYSCFG_PCLK_EN();
 80005f0:	4b5c      	ldr	r3, [pc, #368]	; (8000764 <GPIO_Init+0x314>)
 80005f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005f4:	4a5b      	ldr	r2, [pc, #364]	; (8000764 <GPIO_Init+0x314>)
 80005f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005fa:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 80005fc:	7c7a      	ldrb	r2, [r7, #17]
 80005fe:	7cbb      	ldrb	r3, [r7, #18]
 8000600:	009b      	lsls	r3, r3, #2
 8000602:	fa02 f103 	lsl.w	r1, r2, r3
 8000606:	4a58      	ldr	r2, [pc, #352]	; (8000768 <GPIO_Init+0x318>)
 8000608:	7cfb      	ldrb	r3, [r7, #19]
 800060a:	3302      	adds	r3, #2
 800060c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		// 3. Enable delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000610:	4b56      	ldr	r3, [pc, #344]	; (800076c <GPIO_Init+0x31c>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	687a      	ldr	r2, [r7, #4]
 8000616:	7912      	ldrb	r2, [r2, #4]
 8000618:	4611      	mov	r1, r2
 800061a:	2201      	movs	r2, #1
 800061c:	408a      	lsls	r2, r1
 800061e:	4611      	mov	r1, r2
 8000620:	4a52      	ldr	r2, [pc, #328]	; (800076c <GPIO_Init+0x31c>)
 8000622:	430b      	orrs	r3, r1
 8000624:	6013      	str	r3, [r2, #0]
	}
	temp = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	617b      	str	r3, [r7, #20]

	// 2. configure the speed
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	799b      	ldrb	r3, [r3, #6]
 800062e:	461a      	mov	r2, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	791b      	ldrb	r3, [r3, #4]
 8000634:	005b      	lsls	r3, r3, #1
 8000636:	fa02 f303 	lsl.w	r3, r2, r3
 800063a:	617b      	str	r3, [r7, #20]
	pGPIOHandle -> pGPIOx -> OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	689a      	ldr	r2, [r3, #8]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	791b      	ldrb	r3, [r3, #4]
 8000646:	4619      	mov	r1, r3
 8000648:	2303      	movs	r3, #3
 800064a:	408b      	lsls	r3, r1
 800064c:	43db      	mvns	r3, r3
 800064e:	4619      	mov	r1, r3
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	400a      	ands	r2, r1
 8000656:	609a      	str	r2, [r3, #8]
	pGPIOHandle -> pGPIOx -> OSPEEDR |= temp;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	6899      	ldr	r1, [r3, #8]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	697a      	ldr	r2, [r7, #20]
 8000664:	430a      	orrs	r2, r1
 8000666:	609a      	str	r2, [r3, #8]
	temp = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]

	// 3. configure the pupd settings
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	79db      	ldrb	r3, [r3, #7]
 8000670:	461a      	mov	r2, r3
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	791b      	ldrb	r3, [r3, #4]
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	fa02 f303 	lsl.w	r3, r2, r3
 800067c:	617b      	str	r3, [r7, #20]
	pGPIOHandle -> pGPIOx -> PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	68da      	ldr	r2, [r3, #12]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	791b      	ldrb	r3, [r3, #4]
 8000688:	4619      	mov	r1, r3
 800068a:	2303      	movs	r3, #3
 800068c:	408b      	lsls	r3, r1
 800068e:	43db      	mvns	r3, r3
 8000690:	4619      	mov	r1, r3
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	400a      	ands	r2, r1
 8000698:	60da      	str	r2, [r3, #12]
	pGPIOHandle -> pGPIOx -> PUPDR |= temp;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	68d9      	ldr	r1, [r3, #12]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	697a      	ldr	r2, [r7, #20]
 80006a6:	430a      	orrs	r2, r1
 80006a8:	60da      	str	r2, [r3, #12]
	temp = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	617b      	str	r3, [r7, #20]

	// 4. configure the optype
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	7a1b      	ldrb	r3, [r3, #8]
 80006b2:	461a      	mov	r2, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	791b      	ldrb	r3, [r3, #4]
 80006b8:	fa02 f303 	lsl.w	r3, r2, r3
 80006bc:	617b      	str	r3, [r7, #20]
	pGPIOHandle -> pGPIOx -> OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	685a      	ldr	r2, [r3, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	791b      	ldrb	r3, [r3, #4]
 80006c8:	4619      	mov	r1, r3
 80006ca:	2301      	movs	r3, #1
 80006cc:	408b      	lsls	r3, r1
 80006ce:	43db      	mvns	r3, r3
 80006d0:	4619      	mov	r1, r3
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	400a      	ands	r2, r1
 80006d8:	605a      	str	r2, [r3, #4]
	pGPIOHandle -> pGPIOx -> OTYPER |= temp;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	6859      	ldr	r1, [r3, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	697a      	ldr	r2, [r7, #20]
 80006e6:	430a      	orrs	r2, r1
 80006e8:	605a      	str	r2, [r3, #4]
	temp = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]

	// 5. configure the alt functionality
	if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	795b      	ldrb	r3, [r3, #5]
 80006f2:	2b02      	cmp	r3, #2
 80006f4:	d131      	bne.n	800075a <GPIO_Init+0x30a>
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber / 8;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	791b      	ldrb	r3, [r3, #4]
 80006fa:	08db      	lsrs	r3, r3, #3
 80006fc:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber % 8;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	791b      	ldrb	r3, [r3, #4]
 8000702:	f003 0307 	and.w	r3, r3, #7
 8000706:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF <<  (4 * temp2));
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	7c3a      	ldrb	r2, [r7, #16]
 800070e:	3208      	adds	r2, #8
 8000710:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000714:	7bfb      	ldrb	r3, [r7, #15]
 8000716:	009b      	lsls	r3, r3, #2
 8000718:	220f      	movs	r2, #15
 800071a:	fa02 f303 	lsl.w	r3, r2, r3
 800071e:	43db      	mvns	r3, r3
 8000720:	4618      	mov	r0, r3
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	7c3a      	ldrb	r2, [r7, #16]
 8000728:	4001      	ands	r1, r0
 800072a:	3208      	adds	r2, #8
 800072c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode <<  (4 * temp2));
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	7c3a      	ldrb	r2, [r7, #16]
 8000736:	3208      	adds	r2, #8
 8000738:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	7a5b      	ldrb	r3, [r3, #9]
 8000740:	461a      	mov	r2, r3
 8000742:	7bfb      	ldrb	r3, [r7, #15]
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	fa02 f303 	lsl.w	r3, r2, r3
 800074a:	4618      	mov	r0, r3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	7c3a      	ldrb	r2, [r7, #16]
 8000752:	4301      	orrs	r1, r0
 8000754:	3208      	adds	r2, #8
 8000756:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 800075a:	bf00      	nop
 800075c:	3718      	adds	r7, #24
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800
 8000768:	40013800 	.word	0x40013800
 800076c:	40013c00 	.word	0x40013c00

08000770 <I2C_GenerateStartCondition>:
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle);

static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle );
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle );

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx){
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_START);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	601a      	str	r2, [r3, #0]
}
 8000784:	bf00      	nop
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr

08000790 <I2C_ExecuteAddressPhaseWrite>:
static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr){
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	460b      	mov	r3, r1
 800079a:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 800079c:	78fb      	ldrb	r3, [r7, #3]
 800079e:	005b      	lsls	r3, r3, #1
 80007a0:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); //SlaveAddr is Slave address + r/w bit=0
 80007a2:	78fb      	ldrb	r3, [r7, #3]
 80007a4:	f023 0301 	bic.w	r3, r3, #1
 80007a8:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 80007aa:	78fa      	ldrb	r2, [r7, #3]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	611a      	str	r2, [r3, #16]
}
 80007b0:	bf00      	nop
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr

080007bc <I2C_ExecuteAddressPhaseRead>:
static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr){
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	460b      	mov	r3, r1
 80007c6:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 80007c8:	78fb      	ldrb	r3, [r7, #3]
 80007ca:	005b      	lsls	r3, r3, #1
 80007cc:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1; //SlaveAddr is Slave address + r/nw bit=1
 80007ce:	78fb      	ldrb	r3, [r7, #3]
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 80007d6:	78fa      	ldrb	r2, [r7, #3]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	611a      	str	r2, [r3, #16]
}
 80007dc:	bf00      	nop
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <I2C_ClearADDRFlag>:

static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle){
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
	//check for device mode
	if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL)){
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	699b      	ldr	r3, [r3, #24]
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d01f      	beq.n	800083e <I2C_ClearADDRFlag+0x56>
		//device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX){
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	7f1b      	ldrb	r3, [r3, #28]
 8000802:	2b01      	cmp	r3, #1
 8000804:	d112      	bne.n	800082c <I2C_ClearADDRFlag+0x44>
			if(pI2CHandle->RxSize  == 1){
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	6a1b      	ldr	r3, [r3, #32]
 800080a:	2b01      	cmp	r3, #1
 800080c:	d11f      	bne.n	800084e <I2C_ClearADDRFlag+0x66>
				//first disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	2100      	movs	r1, #0
 8000814:	4618      	mov	r0, r3
 8000816:	f000 fa3e 	bl	8000c96 <I2C_ManageAcking>
				//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	695b      	ldr	r3, [r3, #20]
 8000820:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	60fb      	str	r3, [r7, #12]
		//clear the ADDR flag ( read SR1 , read SR2)
		dummy_read = pI2CHandle->pI2Cx->SR1;
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}
}
 800082a:	e010      	b.n	800084e <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	695b      	ldr	r3, [r3, #20]
 8000832:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	699b      	ldr	r3, [r3, #24]
 800083a:	60fb      	str	r3, [r7, #12]
}
 800083c:	e007      	b.n	800084e <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	695b      	ldr	r3, [r3, #20]
 8000844:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	60fb      	str	r3, [r7, #12]
}
 800084e:	bf00      	nop
 8000850:	3710      	adds	r7, #16
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <I2C_GenerateStopCondition>:

 void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx){
 8000856:	b480      	push	{r7}
 8000858:	b083      	sub	sp, #12
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_STOP);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	601a      	str	r2, [r3, #0]
}
 800086a:	bf00      	nop
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr

08000876 <I2C_PeripheralControl>:
			pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITBUFEN);
			pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITERREN);
	 }
 }

void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi){
 8000876:	b480      	push	{r7}
 8000878:	b083      	sub	sp, #12
 800087a:	af00      	add	r7, sp, #0
 800087c:	6078      	str	r0, [r7, #4]
 800087e:	460b      	mov	r3, r1
 8000880:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 8000882:	78fb      	ldrb	r3, [r7, #3]
 8000884:	2b01      	cmp	r3, #1
 8000886:	d106      	bne.n	8000896 <I2C_PeripheralControl+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f043 0201 	orr.w	r2, r3, #1
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	601a      	str	r2, [r3, #0]
		//pI2cBaseAddress->CR1 |= I2C_CR1_PE_Bit_Mask;
	}else{
		pI2Cx->CR1 &= ~(1 << 0);
	}
}
 8000894:	e005      	b.n	80008a2 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << 0);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	f023 0201 	bic.w	r2, r3, #1
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	601a      	str	r2, [r3, #0]
}
 80008a2:	bf00      	nop
 80008a4:	370c      	adds	r7, #12
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
	...

080008b0 <I2C_PeriClockControl>:

void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	460b      	mov	r3, r1
 80008ba:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 80008bc:	78fb      	ldrb	r3, [r7, #3]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d11f      	bne.n	8000902 <I2C_PeriClockControl+0x52>
		if(pI2Cx == I2C1){
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4a12      	ldr	r2, [pc, #72]	; (8000910 <I2C_PeriClockControl+0x60>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d106      	bne.n	80008d8 <I2C_PeriClockControl+0x28>
			I2C1_PCLK_EN();
 80008ca:	4b12      	ldr	r3, [pc, #72]	; (8000914 <I2C_PeriClockControl+0x64>)
 80008cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ce:	4a11      	ldr	r2, [pc, #68]	; (8000914 <I2C_PeriClockControl+0x64>)
 80008d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008d4:	6413      	str	r3, [r2, #64]	; 0x40
		}
	}
	else{
		//TODO
	}
}
 80008d6:	e014      	b.n	8000902 <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C2){
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	4a0f      	ldr	r2, [pc, #60]	; (8000918 <I2C_PeriClockControl+0x68>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d106      	bne.n	80008ee <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 80008e0:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <I2C_PeriClockControl+0x64>)
 80008e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e4:	4a0b      	ldr	r2, [pc, #44]	; (8000914 <I2C_PeriClockControl+0x64>)
 80008e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008ea:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008ec:	e009      	b.n	8000902 <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C3){
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4a0a      	ldr	r2, [pc, #40]	; (800091c <I2C_PeriClockControl+0x6c>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d105      	bne.n	8000902 <I2C_PeriClockControl+0x52>
			I2C3_PCLK_EN();
 80008f6:	4b07      	ldr	r3, [pc, #28]	; (8000914 <I2C_PeriClockControl+0x64>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fa:	4a06      	ldr	r2, [pc, #24]	; (8000914 <I2C_PeriClockControl+0x64>)
 80008fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000900:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000902:	bf00      	nop
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	40005400 	.word	0x40005400
 8000914:	40023800 	.word	0x40023800
 8000918:	40005800 	.word	0x40005800
 800091c:	40005c00 	.word	0x40005c00

08000920 <I2C_Init>:

void I2C_Init(I2C_Handle_t *pI2CHandle){
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0 ;
 8000928:	2300      	movs	r3, #0
 800092a:	60fb      	str	r3, [r7, #12]

	//enable the clock for the i2cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx,ENABLE);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2101      	movs	r1, #1
 8000932:	4618      	mov	r0, r3
 8000934:	f7ff ffbc 	bl	80008b0 <I2C_PeriClockControl>

	//ack control bit
	tempreg |= pI2CHandle->I2C_Config.I2C_AckControl << 10;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	7a5b      	ldrb	r3, [r3, #9]
 800093c:	029b      	lsls	r3, r3, #10
 800093e:	461a      	mov	r2, r3
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	4313      	orrs	r3, r2
 8000944:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	68fa      	ldr	r2, [r7, #12]
 800094c:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR2
	tempreg = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() /1000000U ;
 8000952:	f000 f9bd 	bl	8000cd0 <RCC_GetPCLK1Value>
 8000956:	4603      	mov	r3, r0
 8000958:	4a47      	ldr	r2, [pc, #284]	; (8000a78 <I2C_Init+0x158>)
 800095a:	fba2 2303 	umull	r2, r3, r2, r3
 800095e:	0c9b      	lsrs	r3, r3, #18
 8000960:	68fa      	ldr	r2, [r7, #12]
 8000962:	4313      	orrs	r3, r2
 8000964:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 =  (tempreg & 0x3F);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	68fa      	ldr	r2, [r7, #12]
 800096c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000970:	605a      	str	r2, [r3, #4]

   //program the device own address
	tempreg = 0;
 8000972:	2300      	movs	r3, #0
 8000974:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	7a1b      	ldrb	r3, [r3, #8]
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	461a      	mov	r2, r3
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	4313      	orrs	r3, r2
 8000982:	60fb      	str	r3, [r7, #12]
	tempreg |= ( 1 << 14);
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800098a:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	68fa      	ldr	r2, [r7, #12]
 8000992:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccr_value = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	4a36      	ldr	r2, [pc, #216]	; (8000a7c <I2C_Init+0x15c>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d80f      	bhi.n	80009c6 <I2C_Init+0xa6>
		//mode is standard mode
		ccr_value = (RCC_GetPCLK1Value() / ( 2 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 80009a6:	f000 f993 	bl	8000cd0 <RCC_GetPCLK1Value>
 80009aa:	4602      	mov	r2, r0
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b6:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 80009b8:	897b      	ldrh	r3, [r7, #10]
 80009ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80009be:	68fa      	ldr	r2, [r7, #12]
 80009c0:	4313      	orrs	r3, r2
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	e02d      	b.n	8000a22 <I2C_Init+0x102>
	}else{
		//mode is fast mode
		tempreg |= ( 1 << 15);
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009cc:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	7a9b      	ldrb	r3, [r3, #10]
 80009d2:	039b      	lsls	r3, r3, #14
 80009d4:	461a      	mov	r2, r3
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	4313      	orrs	r3, r2
 80009da:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2){
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	7a9b      	ldrb	r3, [r3, #10]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d10b      	bne.n	80009fc <I2C_Init+0xdc>
			ccr_value = (RCC_GetPCLK1Value() / ( 3 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 80009e4:	f000 f974 	bl	8000cd0 <RCC_GetPCLK1Value>
 80009e8:	4601      	mov	r1, r0
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	685a      	ldr	r2, [r3, #4]
 80009ee:	4613      	mov	r3, r2
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	4413      	add	r3, r2
 80009f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80009f8:	817b      	strh	r3, [r7, #10]
 80009fa:	e00c      	b.n	8000a16 <I2C_Init+0xf6>
		}else{
			ccr_value = (RCC_GetPCLK1Value() / ( 25 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 80009fc:	f000 f968 	bl	8000cd0 <RCC_GetPCLK1Value>
 8000a00:	4601      	mov	r1, r0
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	685a      	ldr	r2, [r3, #4]
 8000a06:	4613      	mov	r3, r2
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	4413      	add	r3, r2
 8000a0c:	009a      	lsls	r2, r3, #2
 8000a0e:	4413      	add	r3, r2
 8000a10:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a14:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 8000a16:	897b      	ldrh	r3, [r7, #10]
 8000a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000a1c:	68fa      	ldr	r2, [r7, #12]
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	68fa      	ldr	r2, [r7, #12]
 8000a28:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	4a13      	ldr	r2, [pc, #76]	; (8000a7c <I2C_Init+0x15c>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d809      	bhi.n	8000a48 <I2C_Init+0x128>
		//mode is standard mode
		tempreg = (RCC_GetPCLK1Value() /1000000U) + 1 ;
 8000a34:	f000 f94c 	bl	8000cd0 <RCC_GetPCLK1Value>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	4a0f      	ldr	r2, [pc, #60]	; (8000a78 <I2C_Init+0x158>)
 8000a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a40:	0c9b      	lsrs	r3, r3, #18
 8000a42:	3301      	adds	r3, #1
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	e00d      	b.n	8000a64 <I2C_Init+0x144>
	}else{
		//mode is fast mode
		tempreg = ( (RCC_GetPCLK1Value() * 300) / 1000000000U ) + 1;
 8000a48:	f000 f942 	bl	8000cd0 <RCC_GetPCLK1Value>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000a52:	fb02 f303 	mul.w	r3, r2, r3
 8000a56:	0a5b      	lsrs	r3, r3, #9
 8000a58:	4a09      	ldr	r2, [pc, #36]	; (8000a80 <I2C_Init+0x160>)
 8000a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a5e:	09db      	lsrs	r3, r3, #7
 8000a60:	3301      	adds	r3, #1
 8000a62:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	68fa      	ldr	r2, [r7, #12]
 8000a6a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000a6e:	621a      	str	r2, [r3, #32]
}
 8000a70:	bf00      	nop
 8000a72:	3710      	adds	r7, #16
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	431bde83 	.word	0x431bde83
 8000a7c:	000186a0 	.word	0x000186a0
 8000a80:	00044b83 	.word	0x00044b83

08000a84 <I2C_GetFlagStatus>:

void I2C_DeInit(I2C_RegDef_t *pI2Cx){

}

uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx , uint32_t FlagName){
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName){
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	695a      	ldr	r2, [r3, #20]
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	4013      	ands	r3, r2
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <I2C_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e000      	b.n	8000aa0 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000a9e:	2300      	movs	r3, #0
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <I2C_MasterSendData>:

void I2C_MasterSendData(I2C_Handle_t *pI2CHandle,uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr,uint8_t Sr){
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	607a      	str	r2, [r7, #4]
 8000ab8:	70fb      	strb	r3, [r7, #3]
	// 1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff fe56 	bl	8000770 <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB));
 8000ac4:	bf00      	nop
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	2101      	movs	r1, #1
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff ffd9 	bl	8000a84 <I2C_GetFlagStatus>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d0f6      	beq.n	8000ac6 <I2C_MasterSendData+0x1a>

	//3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits )
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx,SlaveAddr);
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	78fa      	ldrb	r2, [r7, #3]
 8000ade:	4611      	mov	r1, r2
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff fe55 	bl	8000790 <I2C_ExecuteAddressPhaseWrite>

	//4. Confirm that address phase is completed by checking the ADDR flag in teh SR1
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_ADDR));
 8000ae6:	bf00      	nop
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2102      	movs	r1, #2
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff ffc8 	bl	8000a84 <I2C_GetFlagStatus>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d0f6      	beq.n	8000ae8 <I2C_MasterSendData+0x3c>

	//5. clear the ADDR flag according to its software sequence
	//   Note: Until ADDR is cleared SCL will be stretched (pulled to LOW)
	I2C_ClearADDRFlag(pI2CHandle);
 8000afa:	68f8      	ldr	r0, [r7, #12]
 8000afc:	f7ff fe74 	bl	80007e8 <I2C_ClearADDRFlag>

	//6. send the data until len becomes 0
	while(Len > 0){
 8000b00:	e014      	b.n	8000b2c <I2C_MasterSendData+0x80>
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE) ); //Wait till TXE is set
 8000b02:	bf00      	nop
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2180      	movs	r1, #128	; 0x80
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff ffba 	bl	8000a84 <I2C_GetFlagStatus>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d0f6      	beq.n	8000b04 <I2C_MasterSendData+0x58>
		pI2CHandle->pI2Cx->DR = *pTxbuffer;
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	781a      	ldrb	r2, [r3, #0]
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	611a      	str	r2, [r3, #16]
		pTxbuffer++;
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	3301      	adds	r3, #1
 8000b24:	60bb      	str	r3, [r7, #8]
		Len--;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	3b01      	subs	r3, #1
 8000b2a:	607b      	str	r3, [r7, #4]
	while(Len > 0){
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d1e7      	bne.n	8000b02 <I2C_MasterSendData+0x56>
	}

	//7. when Len becomes zero wait for TXE=1 and BTF=1 before generating the STOP condition
	//   Note: TXE=1 , BTF=1 , means that both SR and DR are empty and next transmission should begin
	//   when BTF=1 SCL will be stretched (pulled to LOW)
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE));
 8000b32:	bf00      	nop
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2180      	movs	r1, #128	; 0x80
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff ffa2 	bl	8000a84 <I2C_GetFlagStatus>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d0f6      	beq.n	8000b34 <I2C_MasterSendData+0x88>
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_BTF));
 8000b46:	bf00      	nop
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2104      	movs	r1, #4
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff ff98 	bl	8000a84 <I2C_GetFlagStatus>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d0f6      	beq.n	8000b48 <I2C_MasterSendData+0x9c>

	//8. Generate STOP condition and master need not to wait for the completion of stop condition.
	//   Note: generating STOP, automatically clears the BTF
	if(Sr == I2C_DISABLE_SR )
 8000b5a:	7e3b      	ldrb	r3, [r7, #24]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d104      	bne.n	8000b6a <I2C_MasterSendData+0xbe>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff fe76 	bl	8000856 <I2C_GenerateStopCondition>
}
 8000b6a:	bf00      	nop
 8000b6c:	3710      	adds	r7, #16
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <I2C_MasterReceiveData>:

void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle,uint8_t *pRxBuffer, uint8_t Len, uint8_t SlaveAddr,uint8_t Sr){
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b086      	sub	sp, #24
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	60f8      	str	r0, [r7, #12]
 8000b7a:	60b9      	str	r1, [r7, #8]
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	461a      	mov	r2, r3
 8000b80:	460b      	mov	r3, r1
 8000b82:	71fb      	strb	r3, [r7, #7]
 8000b84:	4613      	mov	r3, r2
 8000b86:	71bb      	strb	r3, [r7, #6]
	//1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff fdef 	bl	8000770 <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB)   );
 8000b92:	bf00      	nop
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2101      	movs	r1, #1
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff ff72 	bl	8000a84 <I2C_GetFlagStatus>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d0f6      	beq.n	8000b94 <I2C_MasterReceiveData+0x22>

	//3. Send the address of the slave with r/nw bit set to R(1) (total 8 bits )
	I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx,SlaveAddr);
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	79ba      	ldrb	r2, [r7, #6]
 8000bac:	4611      	mov	r1, r2
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff fe04 	bl	80007bc <I2C_ExecuteAddressPhaseRead>

	//4. wait until address phase is completed by checking the ADDR flag in teh SR1
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_ADDR)   );
 8000bb4:	bf00      	nop
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	2102      	movs	r1, #2
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff ff61 	bl	8000a84 <I2C_GetFlagStatus>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d0f6      	beq.n	8000bb6 <I2C_MasterReceiveData+0x44>

	//procedure to read only 1 byte from slave
	if(Len == 1){
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d121      	bne.n	8000c12 <I2C_MasterReceiveData+0xa0>
		//Disable Acking
		I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_DISABLE);
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f000 f85e 	bl	8000c96 <I2C_ManageAcking>

		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 8000bda:	68f8      	ldr	r0, [r7, #12]
 8000bdc:	f7ff fe04 	bl	80007e8 <I2C_ClearADDRFlag>

		//wait until  RXNE becomes 1
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_RXNE) );
 8000be0:	bf00      	nop
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	2140      	movs	r1, #64	; 0x40
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff ff4b 	bl	8000a84 <I2C_GetFlagStatus>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d0f6      	beq.n	8000be2 <I2C_MasterReceiveData+0x70>

		//generate STOP condition
		if(Sr == I2C_DISABLE_SR )
 8000bf4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d104      	bne.n	8000c06 <I2C_MasterReceiveData+0x94>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff fe28 	bl	8000856 <I2C_GenerateStopCondition>

		//read data in to buffer
		*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	691b      	ldr	r3, [r3, #16]
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	701a      	strb	r2, [r3, #0]
	}
    //procedure to read data from slave when Len > 1
	if(Len > 1){
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d930      	bls.n	8000c7a <I2C_MasterReceiveData+0x108>
		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 8000c18:	68f8      	ldr	r0, [r7, #12]
 8000c1a:	f7ff fde5 	bl	80007e8 <I2C_ClearADDRFlag>

		//read the data until Len becomes zero
		for ( uint32_t i = Len ; i > 0 ; i--){
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	617b      	str	r3, [r7, #20]
 8000c22:	e027      	b.n	8000c74 <I2C_MasterReceiveData+0x102>
			//wait until RXNE becomes 1
			while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_RXNE));
 8000c24:	bf00      	nop
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	2140      	movs	r1, #64	; 0x40
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff ff29 	bl	8000a84 <I2C_GetFlagStatus>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d0f6      	beq.n	8000c26 <I2C_MasterReceiveData+0xb4>
			//if last 2 bytes are remaining
			if(i == 2){
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	2b02      	cmp	r3, #2
 8000c3c:	d10e      	bne.n	8000c5c <I2C_MasterReceiveData+0xea>
				//Disable Acking
				I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_DISABLE);
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2100      	movs	r1, #0
 8000c44:	4618      	mov	r0, r3
 8000c46:	f000 f826 	bl	8000c96 <I2C_ManageAcking>

				//generate STOP condition
				if(Sr == I2C_DISABLE_SR )
 8000c4a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d104      	bne.n	8000c5c <I2C_MasterReceiveData+0xea>
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff fdfd 	bl	8000856 <I2C_GenerateStopCondition>
			}
			//read the data from data register in to buffer
			*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	691b      	ldr	r3, [r3, #16]
 8000c62:	b2da      	uxtb	r2, r3
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	701a      	strb	r2, [r3, #0]
			//increment the buffer address
			pRxBuffer++;
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	60bb      	str	r3, [r7, #8]
		for ( uint32_t i = Len ; i > 0 ; i--){
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	3b01      	subs	r3, #1
 8000c72:	617b      	str	r3, [r7, #20]
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d1d4      	bne.n	8000c24 <I2C_MasterReceiveData+0xb2>
		}
	}
	//re-enable ACKing
	if(pI2CHandle->I2C_Config.I2C_AckControl == I2C_ACK_ENABLE)	{
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	7a5b      	ldrb	r3, [r3, #9]
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d105      	bne.n	8000c8e <I2C_MasterReceiveData+0x11c>
		I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_ENABLE);
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	2101      	movs	r1, #1
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f000 f804 	bl	8000c96 <I2C_ManageAcking>
	}
}
 8000c8e:	bf00      	nop
 8000c90:	3718      	adds	r7, #24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <I2C_ManageAcking>:

void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
 8000c96:	b480      	push	{r7}
 8000c98:	b083      	sub	sp, #12
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE){
 8000ca2:	78fb      	ldrb	r3, [r7, #3]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d106      	bne.n	8000cb6 <I2C_ManageAcking+0x20>
		//enable the ack
		pI2Cx->CR1 |= ( 1 << I2C_CR1_ACK);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	601a      	str	r2, [r3, #0]
	}else{
		//disable the ack
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
	}
}
 8000cb4:	e005      	b.n	8000cc2 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	601a      	str	r2, [r3, #0]
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
	...

08000cd0 <RCC_GetPCLK1Value>:
#include "rcc_driver.h"

uint16_t AHB_PreScaler[8] = {2,4,8,16,64,128,256,512};
uint8_t APB1_PreScaler[4] = { 2, 4 , 8, 16};

uint32_t RCC_GetPCLK1Value(void){
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;
	uint8_t clksrc,temp,ahbp,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 8000cd6:	4b25      	ldr	r3, [pc, #148]	; (8000d6c <RCC_GetPCLK1Value+0x9c>)
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	089b      	lsrs	r3, r3, #2
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	f003 0303 	and.w	r3, r3, #3
 8000ce2:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0 ){
 8000ce4:	7a7b      	ldrb	r3, [r7, #9]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d102      	bne.n	8000cf0 <RCC_GetPCLK1Value+0x20>
		SystemClk = 16000000;
 8000cea:	4b21      	ldr	r3, [pc, #132]	; (8000d70 <RCC_GetPCLK1Value+0xa0>)
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	e00b      	b.n	8000d08 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1){
 8000cf0:	7a7b      	ldrb	r3, [r7, #9]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d102      	bne.n	8000cfc <RCC_GetPCLK1Value+0x2c>
		SystemClk = 8000000;
 8000cf6:	4b1f      	ldr	r3, [pc, #124]	; (8000d74 <RCC_GetPCLK1Value+0xa4>)
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	e005      	b.n	8000d08 <RCC_GetPCLK1Value+0x38>
	}else if (clksrc == 2){
 8000cfc:	7a7b      	ldrb	r3, [r7, #9]
 8000cfe:	2b02      	cmp	r3, #2
 8000d00:	d102      	bne.n	8000d08 <RCC_GetPCLK1Value+0x38>
		SystemClk = RCC_GetPLLOutputClock();
 8000d02:	f000 f83d 	bl	8000d80 <RCC_GetPLLOutputClock>
 8000d06:	60f8      	str	r0, [r7, #12]
	}

	//for ahb
	temp = ((RCC->CFGR >> 4 ) & 0xF);
 8000d08:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <RCC_GetPCLK1Value+0x9c>)
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	091b      	lsrs	r3, r3, #4
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	f003 030f 	and.w	r3, r3, #15
 8000d14:	723b      	strb	r3, [r7, #8]

	if(temp < 8){
 8000d16:	7a3b      	ldrb	r3, [r7, #8]
 8000d18:	2b07      	cmp	r3, #7
 8000d1a:	d802      	bhi.n	8000d22 <RCC_GetPCLK1Value+0x52>
		ahbp = 1;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	72fb      	strb	r3, [r7, #11]
 8000d20:	e005      	b.n	8000d2e <RCC_GetPCLK1Value+0x5e>
	}else{
		ahbp = AHB_PreScaler[temp-8];
 8000d22:	7a3b      	ldrb	r3, [r7, #8]
 8000d24:	3b08      	subs	r3, #8
 8000d26:	4a14      	ldr	r2, [pc, #80]	; (8000d78 <RCC_GetPCLK1Value+0xa8>)
 8000d28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d2c:	72fb      	strb	r3, [r7, #11]
	}

	//apb1
	temp = ((RCC->CFGR >> 10 ) & 0x7);
 8000d2e:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <RCC_GetPCLK1Value+0x9c>)
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	0a9b      	lsrs	r3, r3, #10
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	f003 0307 	and.w	r3, r3, #7
 8000d3a:	723b      	strb	r3, [r7, #8]

	if(temp < 4){
 8000d3c:	7a3b      	ldrb	r3, [r7, #8]
 8000d3e:	2b03      	cmp	r3, #3
 8000d40:	d802      	bhi.n	8000d48 <RCC_GetPCLK1Value+0x78>
		apb1p = 1;
 8000d42:	2301      	movs	r3, #1
 8000d44:	72bb      	strb	r3, [r7, #10]
 8000d46:	e004      	b.n	8000d52 <RCC_GetPCLK1Value+0x82>
	}else{
		apb1p = APB1_PreScaler[temp-4];
 8000d48:	7a3b      	ldrb	r3, [r7, #8]
 8000d4a:	3b04      	subs	r3, #4
 8000d4c:	4a0b      	ldr	r2, [pc, #44]	; (8000d7c <RCC_GetPCLK1Value+0xac>)
 8000d4e:	5cd3      	ldrb	r3, [r2, r3]
 8000d50:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 =  (SystemClk / ahbp) /apb1p;
 8000d52:	7afb      	ldrb	r3, [r7, #11]
 8000d54:	68fa      	ldr	r2, [r7, #12]
 8000d56:	fbb2 f2f3 	udiv	r2, r2, r3
 8000d5a:	7abb      	ldrb	r3, [r7, #10]
 8000d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d60:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000d62:	687b      	ldr	r3, [r7, #4]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3710      	adds	r7, #16
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	00f42400 	.word	0x00f42400
 8000d74:	007a1200 	.word	0x007a1200
 8000d78:	20000000 	.word	0x20000000
 8000d7c:	20000010 	.word	0x20000010

08000d80 <RCC_GetPLLOutputClock>:
	pclk2 = (SystemClock / ahbp )/ apb2p;

	return pclk2;
}

uint32_t  RCC_GetPLLOutputClock(){
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
	return 0;
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <init_systick_timer>:
/* Enable this macro if you want to test RTC on LCD */
//#define PRINT_LCD


void init_systick_timer(uint32_t tick_hz)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b087      	sub	sp, #28
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 8000d98:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <init_systick_timer+0x60>)
 8000d9a:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 8000d9c:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <init_systick_timer+0x64>)
 8000d9e:	613b      	str	r3, [r7, #16]

    /* calculation of reload value */
    uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz)-1;
 8000da0:	4a15      	ldr	r2, [pc, #84]	; (8000df8 <init_systick_timer+0x68>)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000da8:	3b01      	subs	r3, #1
 8000daa:	60fb      	str	r3, [r7, #12]

    //Clear the value of SVR
    *pSRVR &= ~(0x00FFFFFFFF);
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]

    //load the value in to SVR
    *pSRVR |= count_value;
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	431a      	orrs	r2, r3
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	601a      	str	r2, [r3, #0]

    //do some settings
    *pSCSR |= ( 1 << 1); //Enables SysTick exception request:
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f043 0202 	orr.w	r2, r3, #2
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	601a      	str	r2, [r3, #0]
    *pSCSR |= ( 1 << 2);  //Indicates the clock source, processor clock source
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f043 0204 	orr.w	r2, r3, #4
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	601a      	str	r2, [r3, #0]

    //enable the systick
    *pSCSR |= ( 1 << 0); //enables the counter
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f043 0201 	orr.w	r2, r3, #1
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	601a      	str	r2, [r3, #0]

}
 8000de2:	bf00      	nop
 8000de4:	371c      	adds	r7, #28
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	e000e014 	.word	0xe000e014
 8000df4:	e000e010 	.word	0xe000e010
 8000df8:	00f42400 	.word	0x00f42400

08000dfc <get_day_of_week>:


char* get_day_of_week(uint8_t i)
{
 8000dfc:	b4b0      	push	{r4, r5, r7}
 8000dfe:	b08b      	sub	sp, #44	; 0x2c
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	71fb      	strb	r3, [r7, #7]
	char* days[] = { "Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
 8000e06:	4b0b      	ldr	r3, [pc, #44]	; (8000e34 <get_day_of_week+0x38>)
 8000e08:	f107 040c 	add.w	r4, r7, #12
 8000e0c:	461d      	mov	r5, r3
 8000e0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e12:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e16:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	return days[i-1];
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	3b01      	subs	r3, #1
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	3328      	adds	r3, #40	; 0x28
 8000e22:	443b      	add	r3, r7
 8000e24:	f853 3c1c 	ldr.w	r3, [r3, #-28]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	372c      	adds	r7, #44	; 0x2c
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bcb0      	pop	{r4, r5, r7}
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	08002754 	.word	0x08002754

08000e38 <number_to_string>:


void number_to_string(uint8_t num , char* buf)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	6039      	str	r1, [r7, #0]
 8000e42:	71fb      	strb	r3, [r7, #7]

	if(num < 10){
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	2b09      	cmp	r3, #9
 8000e48:	d809      	bhi.n	8000e5e <number_to_string+0x26>
		buf[0] = '0';
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	2230      	movs	r2, #48	; 0x30
 8000e4e:	701a      	strb	r2, [r3, #0]
		buf[1] = num+48;
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	3301      	adds	r3, #1
 8000e54:	79fa      	ldrb	r2, [r7, #7]
 8000e56:	3230      	adds	r2, #48	; 0x30
 8000e58:	b2d2      	uxtb	r2, r2
 8000e5a:	701a      	strb	r2, [r3, #0]
	}else if(num >= 10 && num < 99)
	{
		buf[0] = (num/10) + 48;
		buf[1]= (num % 10) + 48;
	}
}
 8000e5c:	e01f      	b.n	8000e9e <number_to_string+0x66>
	}else if(num >= 10 && num < 99)
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	2b09      	cmp	r3, #9
 8000e62:	d91c      	bls.n	8000e9e <number_to_string+0x66>
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	2b62      	cmp	r3, #98	; 0x62
 8000e68:	d819      	bhi.n	8000e9e <number_to_string+0x66>
		buf[0] = (num/10) + 48;
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	4a0f      	ldr	r2, [pc, #60]	; (8000eac <number_to_string+0x74>)
 8000e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e72:	08db      	lsrs	r3, r3, #3
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	3330      	adds	r3, #48	; 0x30
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	701a      	strb	r2, [r3, #0]
		buf[1]= (num % 10) + 48;
 8000e7e:	79fa      	ldrb	r2, [r7, #7]
 8000e80:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <number_to_string+0x74>)
 8000e82:	fba3 1302 	umull	r1, r3, r3, r2
 8000e86:	08d9      	lsrs	r1, r3, #3
 8000e88:	460b      	mov	r3, r1
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	440b      	add	r3, r1
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	b2da      	uxtb	r2, r3
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	3301      	adds	r3, #1
 8000e98:	3230      	adds	r2, #48	; 0x30
 8000e9a:	b2d2      	uxtb	r2, r2
 8000e9c:	701a      	strb	r2, [r3, #0]
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	cccccccd 	.word	0xcccccccd

08000eb0 <time_to_string>:



//hh:mm:ss
char* time_to_string(RTC_time_t *rtc_time)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	static char buf[9];

	buf[2]= ':';
 8000eb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <time_to_string+0x48>)
 8000eba:	223a      	movs	r2, #58	; 0x3a
 8000ebc:	709a      	strb	r2, [r3, #2]
	buf[5]= ':';
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <time_to_string+0x48>)
 8000ec0:	223a      	movs	r2, #58	; 0x3a
 8000ec2:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_time->hours,buf);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	789b      	ldrb	r3, [r3, #2]
 8000ec8:	490b      	ldr	r1, [pc, #44]	; (8000ef8 <time_to_string+0x48>)
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff ffb4 	bl	8000e38 <number_to_string>
	number_to_string(rtc_time->minutes,&buf[3]);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	785b      	ldrb	r3, [r3, #1]
 8000ed4:	4909      	ldr	r1, [pc, #36]	; (8000efc <time_to_string+0x4c>)
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff ffae 	bl	8000e38 <number_to_string>
	number_to_string(rtc_time->seconds,&buf[6]);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	4907      	ldr	r1, [pc, #28]	; (8000f00 <time_to_string+0x50>)
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff ffa8 	bl	8000e38 <number_to_string>

	buf[8] = '\0';
 8000ee8:	4b03      	ldr	r3, [pc, #12]	; (8000ef8 <time_to_string+0x48>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	721a      	strb	r2, [r3, #8]

	return buf;
 8000eee:	4b02      	ldr	r3, [pc, #8]	; (8000ef8 <time_to_string+0x48>)

}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000094 	.word	0x20000094
 8000efc:	20000097 	.word	0x20000097
 8000f00:	2000009a 	.word	0x2000009a

08000f04 <date_to_string>:

//dd/mm/yy
char* date_to_string(RTC_date_t *rtc_date)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
	static char buf[9];

	buf[2]= '/';
 8000f0c:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <date_to_string+0x48>)
 8000f0e:	222f      	movs	r2, #47	; 0x2f
 8000f10:	709a      	strb	r2, [r3, #2]
	buf[5]= '/';
 8000f12:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <date_to_string+0x48>)
 8000f14:	222f      	movs	r2, #47	; 0x2f
 8000f16:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_date->date,buf);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	490b      	ldr	r1, [pc, #44]	; (8000f4c <date_to_string+0x48>)
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff ff8a 	bl	8000e38 <number_to_string>
	number_to_string(rtc_date->month,&buf[3]);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	785b      	ldrb	r3, [r3, #1]
 8000f28:	4909      	ldr	r1, [pc, #36]	; (8000f50 <date_to_string+0x4c>)
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff ff84 	bl	8000e38 <number_to_string>
	number_to_string(rtc_date->year,&buf[6]);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	789b      	ldrb	r3, [r3, #2]
 8000f34:	4907      	ldr	r1, [pc, #28]	; (8000f54 <date_to_string+0x50>)
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff ff7e 	bl	8000e38 <number_to_string>

	buf[8]= '\0';
 8000f3c:	4b03      	ldr	r3, [pc, #12]	; (8000f4c <date_to_string+0x48>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	721a      	strb	r2, [r3, #8]

	return buf;
 8000f42:	4b02      	ldr	r3, [pc, #8]	; (8000f4c <date_to_string+0x48>)

}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	200000a0 	.word	0x200000a0
 8000f50:	200000a3 	.word	0x200000a3
 8000f54:	200000a6 	.word	0x200000a6

08000f58 <main>:
{
	for(uint32_t i=0 ; i < (cnt * 1000); i++);
}

int main(void)
{
 8000f58:	b590      	push	{r4, r7, lr}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0

	RTC_time_t current_time;
	RTC_date_t current_date;

#ifndef PRINT_LCD
	printf("RTC test\n");
 8000f5e:	4830      	ldr	r0, [pc, #192]	; (8001020 <main+0xc8>)
 8000f60:	f000 fc4c 	bl	80017fc <puts>

	lcd_display_clear();
	lcd_display_return_home();
#endif

	if(ds1307_init()){
 8000f64:	f000 f9aa 	bl	80012bc <ds1307_init>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d003      	beq.n	8000f76 <main+0x1e>
		printf("RTC init has failed\n");
 8000f6e:	482d      	ldr	r0, [pc, #180]	; (8001024 <main+0xcc>)
 8000f70:	f000 fc44 	bl	80017fc <puts>
		while(1);
 8000f74:	e7fe      	b.n	8000f74 <main+0x1c>
	}

	init_systick_timer(1);
 8000f76:	2001      	movs	r0, #1
 8000f78:	f7ff ff0a 	bl	8000d90 <init_systick_timer>

	current_date.day = FRIDAY;
 8000f7c:	2306      	movs	r3, #6
 8000f7e:	71fb      	strb	r3, [r7, #7]
	current_date.date = 15;
 8000f80:	230f      	movs	r3, #15
 8000f82:	713b      	strb	r3, [r7, #4]
	current_date.month = 1;
 8000f84:	2301      	movs	r3, #1
 8000f86:	717b      	strb	r3, [r7, #5]
	current_date.year = 21;
 8000f88:	2315      	movs	r3, #21
 8000f8a:	71bb      	strb	r3, [r7, #6]

	current_time.hours = 11;
 8000f8c:	230b      	movs	r3, #11
 8000f8e:	72bb      	strb	r3, [r7, #10]
	current_time.minutes = 59;
 8000f90:	233b      	movs	r3, #59	; 0x3b
 8000f92:	727b      	strb	r3, [r7, #9]
	current_time.seconds = 30;
 8000f94:	231e      	movs	r3, #30
 8000f96:	723b      	strb	r3, [r7, #8]
	current_time.time_format = TIME_FORMAT_12HRS_PM;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	72fb      	strb	r3, [r7, #11]

	ds1307_set_current_date(&current_date);
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 f9f3 	bl	800138a <ds1307_set_current_date>
	ds1307_set_current_time(&current_time);
 8000fa4:	f107 0308 	add.w	r3, r7, #8
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f000 f9a5 	bl	80012f8 <ds1307_set_current_time>

	ds1307_get_current_time(&current_time);
 8000fae:	f107 0308 	add.w	r3, r7, #8
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 fa19 	bl	80013ea <ds1307_get_current_time>
	ds1307_get_current_date(&current_date);
 8000fb8:	1d3b      	adds	r3, r7, #4
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 fa5e 	bl	800147c <ds1307_get_current_date>

	char *am_pm;
	if(current_time.time_format != TIME_FORMAT_24HRS){
 8000fc0:	7afb      	ldrb	r3, [r7, #11]
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d012      	beq.n	8000fec <main+0x94>
		am_pm = (current_time.time_format) ? "PM" : "AM";
 8000fc6:	7afb      	ldrb	r3, [r7, #11]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <main+0x78>
 8000fcc:	4b16      	ldr	r3, [pc, #88]	; (8001028 <main+0xd0>)
 8000fce:	e000      	b.n	8000fd2 <main+0x7a>
 8000fd0:	4b16      	ldr	r3, [pc, #88]	; (800102c <main+0xd4>)
 8000fd2:	60fb      	str	r3, [r7, #12]
#ifndef PRINT_LCD
		printf("Current time = %s %s\n",time_to_string(&current_time),am_pm); // 04:25:41 PM
 8000fd4:	f107 0308 	add.w	r3, r7, #8
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff ff69 	bl	8000eb0 <time_to_string>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	68fa      	ldr	r2, [r7, #12]
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4812      	ldr	r0, [pc, #72]	; (8001030 <main+0xd8>)
 8000fe6:	f000 fb83 	bl	80016f0 <iprintf>
 8000fea:	e009      	b.n	8001000 <main+0xa8>
		lcd_print_string(time_to_string(&current_time));
		lcd_print_string(am_pm);
#endif
	}else{
#ifndef PRINT_LCD
		printf("Current time = %s\n",time_to_string(&current_time)); // 04:25:41
 8000fec:	f107 0308 	add.w	r3, r7, #8
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff ff5d 	bl	8000eb0 <time_to_string>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	480e      	ldr	r0, [pc, #56]	; (8001034 <main+0xdc>)
 8000ffc:	f000 fb78 	bl	80016f0 <iprintf>
		lcd_print_string(time_to_string(&current_time));
#endif
	}

#ifndef PRINT_LCD
	printf("Current date = %s <%s>\n",date_to_string(&current_date), get_day_of_week(current_date.day));
 8001000:	1d3b      	adds	r3, r7, #4
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff ff7e 	bl	8000f04 <date_to_string>
 8001008:	4604      	mov	r4, r0
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff fef5 	bl	8000dfc <get_day_of_week>
 8001012:	4603      	mov	r3, r0
 8001014:	461a      	mov	r2, r3
 8001016:	4621      	mov	r1, r4
 8001018:	4807      	ldr	r0, [pc, #28]	; (8001038 <main+0xe0>)
 800101a:	f000 fb69 	bl	80016f0 <iprintf>
	lcd_set_cursor(2, 1);
	lcd_print_string(date_to_string(&current_date));
#endif


	while(1);
 800101e:	e7fe      	b.n	800101e <main+0xc6>
 8001020:	08002770 	.word	0x08002770
 8001024:	0800277c 	.word	0x0800277c
 8001028:	08002790 	.word	0x08002790
 800102c:	08002794 	.word	0x08002794
 8001030:	08002798 	.word	0x08002798
 8001034:	080027b0 	.word	0x080027b0
 8001038:	080027c4 	.word	0x080027c4

0800103c <SysTick_Handler>:
	return 0;
}


void SysTick_Handler(void)
{
 800103c:	b590      	push	{r4, r7, lr}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
	RTC_time_t current_time;
	RTC_date_t current_date;

	ds1307_get_current_time(&current_time);
 8001042:	f107 0308 	add.w	r3, r7, #8
 8001046:	4618      	mov	r0, r3
 8001048:	f000 f9cf 	bl	80013ea <ds1307_get_current_time>

	char *am_pm;
	if(current_time.time_format != TIME_FORMAT_24HRS){
 800104c:	7afb      	ldrb	r3, [r7, #11]
 800104e:	2b02      	cmp	r3, #2
 8001050:	d012      	beq.n	8001078 <SysTick_Handler+0x3c>
		am_pm = (current_time.time_format) ? "PM" : "AM";
 8001052:	7afb      	ldrb	r3, [r7, #11]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <SysTick_Handler+0x20>
 8001058:	4b18      	ldr	r3, [pc, #96]	; (80010bc <SysTick_Handler+0x80>)
 800105a:	e000      	b.n	800105e <SysTick_Handler+0x22>
 800105c:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <SysTick_Handler+0x84>)
 800105e:	60fb      	str	r3, [r7, #12]
#ifndef PRINT_LCD
		printf("Current time = %s %s\n",time_to_string(&current_time),am_pm); // 04:25:41 PM
 8001060:	f107 0308 	add.w	r3, r7, #8
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff ff23 	bl	8000eb0 <time_to_string>
 800106a:	4603      	mov	r3, r0
 800106c:	68fa      	ldr	r2, [r7, #12]
 800106e:	4619      	mov	r1, r3
 8001070:	4814      	ldr	r0, [pc, #80]	; (80010c4 <SysTick_Handler+0x88>)
 8001072:	f000 fb3d 	bl	80016f0 <iprintf>
 8001076:	e009      	b.n	800108c <SysTick_Handler+0x50>
		lcd_print_string(am_pm);
#endif

	}else{
#ifndef PRINT_LCD
		printf("Current time = %s\n",time_to_string(&current_time)); // 04:25:41
 8001078:	f107 0308 	add.w	r3, r7, #8
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ff17 	bl	8000eb0 <time_to_string>
 8001082:	4603      	mov	r3, r0
 8001084:	4619      	mov	r1, r3
 8001086:	4810      	ldr	r0, [pc, #64]	; (80010c8 <SysTick_Handler+0x8c>)
 8001088:	f000 fb32 	bl	80016f0 <iprintf>
		lcd_set_cursor(1, 1);
		lcd_print_string(time_to_string(&current_time));
#endif
	}

	ds1307_get_current_date(&current_date);
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	4618      	mov	r0, r3
 8001090:	f000 f9f4 	bl	800147c <ds1307_get_current_date>

#ifndef PRINT_LCD
	printf("Current date = %s <%s>\n",date_to_string(&current_date), get_day_of_week(current_date.day));
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff ff34 	bl	8000f04 <date_to_string>
 800109c:	4604      	mov	r4, r0
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff feab 	bl	8000dfc <get_day_of_week>
 80010a6:	4603      	mov	r3, r0
 80010a8:	461a      	mov	r2, r3
 80010aa:	4621      	mov	r1, r4
 80010ac:	4807      	ldr	r0, [pc, #28]	; (80010cc <SysTick_Handler+0x90>)
 80010ae:	f000 fb1f 	bl	80016f0 <iprintf>
	lcd_print_string(get_day_of_week(current_date.day));
	lcd_print_char('>');
#endif


}
 80010b2:	bf00      	nop
 80010b4:	3714      	adds	r7, #20
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd90      	pop	{r4, r7, pc}
 80010ba:	bf00      	nop
 80010bc:	08002790 	.word	0x08002790
 80010c0:	08002794 	.word	0x08002794
 80010c4:	08002798 	.word	0x08002798
 80010c8:	080027b0 	.word	0x080027b0
 80010cc:	080027c4 	.word	0x080027c4

080010d0 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80010da:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <ITM_SendChar+0x48>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a0e      	ldr	r2, [pc, #56]	; (8001118 <ITM_SendChar+0x48>)
 80010e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010e4:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80010e6:	4b0d      	ldr	r3, [pc, #52]	; (800111c <ITM_SendChar+0x4c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a0c      	ldr	r2, [pc, #48]	; (800111c <ITM_SendChar+0x4c>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80010f2:	bf00      	nop
 80010f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d0f8      	beq.n	80010f4 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8001102:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	6013      	str	r3, [r2, #0]
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	e000edfc 	.word	0xe000edfc
 800111c:	e0000e00 	.word	0xe0000e00

08001120 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
 8001130:	e00a      	b.n	8001148 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001132:	f3af 8000 	nop.w
 8001136:	4601      	mov	r1, r0
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	1c5a      	adds	r2, r3, #1
 800113c:	60ba      	str	r2, [r7, #8]
 800113e:	b2ca      	uxtb	r2, r1
 8001140:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	3301      	adds	r3, #1
 8001146:	617b      	str	r3, [r7, #20]
 8001148:	697a      	ldr	r2, [r7, #20]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	429a      	cmp	r2, r3
 800114e:	dbf0      	blt.n	8001132 <_read+0x12>
	}

return len;
 8001150:	687b      	ldr	r3, [r7, #4]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b086      	sub	sp, #24
 800115e:	af00      	add	r7, sp, #0
 8001160:	60f8      	str	r0, [r7, #12]
 8001162:	60b9      	str	r1, [r7, #8]
 8001164:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
 800116a:	e009      	b.n	8001180 <_write+0x26>
	{
//		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	1c5a      	adds	r2, r3, #1
 8001170:	60ba      	str	r2, [r7, #8]
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff ffab 	bl	80010d0 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	3301      	adds	r3, #1
 800117e:	617b      	str	r3, [r7, #20]
 8001180:	697a      	ldr	r2, [r7, #20]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	429a      	cmp	r2, r3
 8001186:	dbf1      	blt.n	800116c <_write+0x12>
	}
	return len;
 8001188:	687b      	ldr	r3, [r7, #4]
}
 800118a:	4618      	mov	r0, r3
 800118c:	3718      	adds	r7, #24
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <_close>:

int _close(int file)
{
 8001192:	b480      	push	{r7}
 8001194:	b083      	sub	sp, #12
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
	return -1;
 800119a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800119e:	4618      	mov	r0, r3
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011aa:	b480      	push	{r7}
 80011ac:	b083      	sub	sp, #12
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
 80011b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011ba:	605a      	str	r2, [r3, #4]
	return 0;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <_isatty>:

int _isatty(int file)
{
 80011ca:	b480      	push	{r7}
 80011cc:	b083      	sub	sp, #12
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
	return 1;
 80011d2:	2301      	movs	r3, #1
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
	return 0;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3714      	adds	r7, #20
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
	...

080011fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001204:	4a14      	ldr	r2, [pc, #80]	; (8001258 <_sbrk+0x5c>)
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <_sbrk+0x60>)
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001210:	4b13      	ldr	r3, [pc, #76]	; (8001260 <_sbrk+0x64>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d102      	bne.n	800121e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001218:	4b11      	ldr	r3, [pc, #68]	; (8001260 <_sbrk+0x64>)
 800121a:	4a12      	ldr	r2, [pc, #72]	; (8001264 <_sbrk+0x68>)
 800121c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800121e:	4b10      	ldr	r3, [pc, #64]	; (8001260 <_sbrk+0x64>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4413      	add	r3, r2
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	429a      	cmp	r2, r3
 800122a:	d207      	bcs.n	800123c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800122c:	f000 fa2e 	bl	800168c <__errno>
 8001230:	4603      	mov	r3, r0
 8001232:	220c      	movs	r2, #12
 8001234:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001236:	f04f 33ff 	mov.w	r3, #4294967295
 800123a:	e009      	b.n	8001250 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <_sbrk+0x64>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001242:	4b07      	ldr	r3, [pc, #28]	; (8001260 <_sbrk+0x64>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4413      	add	r3, r2
 800124a:	4a05      	ldr	r2, [pc, #20]	; (8001260 <_sbrk+0x64>)
 800124c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800124e:	68fb      	ldr	r3, [r7, #12]
}
 8001250:	4618      	mov	r0, r3
 8001252:	3718      	adds	r7, #24
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20020000 	.word	0x20020000
 800125c:	00000400 	.word	0x00000400
 8001260:	200000ac 	.word	0x200000ac
 8001264:	200000e8 	.word	0x200000e8

08001268 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001268:	480d      	ldr	r0, [pc, #52]	; (80012a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800126a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800126c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001270:	480c      	ldr	r0, [pc, #48]	; (80012a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001272:	490d      	ldr	r1, [pc, #52]	; (80012a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001274:	4a0d      	ldr	r2, [pc, #52]	; (80012ac <LoopForever+0xe>)
  movs r3, #0
 8001276:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001278:	e002      	b.n	8001280 <LoopCopyDataInit>

0800127a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800127a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800127c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800127e:	3304      	adds	r3, #4

08001280 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001280:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001282:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001284:	d3f9      	bcc.n	800127a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001286:	4a0a      	ldr	r2, [pc, #40]	; (80012b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001288:	4c0a      	ldr	r4, [pc, #40]	; (80012b4 <LoopForever+0x16>)
  movs r3, #0
 800128a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800128c:	e001      	b.n	8001292 <LoopFillZerobss>

0800128e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800128e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001290:	3204      	adds	r2, #4

08001292 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001292:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001294:	d3fb      	bcc.n	800128e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001296:	f000 f9ff 	bl	8001698 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800129a:	f7ff fe5d 	bl	8000f58 <main>

0800129e <LoopForever>:

LoopForever:
    b LoopForever
 800129e:	e7fe      	b.n	800129e <LoopForever>
  ldr   r0, =_estack
 80012a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012a8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80012ac:	0800287c 	.word	0x0800287c
  ldr r2, =_sbss
 80012b0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80012b4:	200000e8 	.word	0x200000e8

080012b8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012b8:	e7fe      	b.n	80012b8 <ADC_IRQHandler>
	...

080012bc <ds1307_init>:
I2C_Handle_t g_ds1307I2cHandle;

//returns 1 : CH = 1 ; init failed
//returns 0 : CH = 0 ; init success
uint8_t ds1307_init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0

	//1. init the i2c pins
	ds1307_i2c_pin_config();
 80012c2:	f000 f90f 	bl	80014e4 <ds1307_i2c_pin_config>

	//2. initialize the i2c peripheral
	ds1307_i2c_config();
 80012c6:	f000 f949 	bl	800155c <ds1307_i2c_config>

	//3. Enable the I2C peripheral
	I2C_PeripheralControl(DS1307_I2C, ENABLE);
 80012ca:	2101      	movs	r1, #1
 80012cc:	4809      	ldr	r0, [pc, #36]	; (80012f4 <ds1307_init+0x38>)
 80012ce:	f7ff fad2 	bl	8000876 <I2C_PeripheralControl>

	//4. Make clock halt = 0;
	ds1307_write(0x00,DS1307_ADDR_SEC);
 80012d2:	2100      	movs	r1, #0
 80012d4:	2000      	movs	r0, #0
 80012d6:	f000 f957 	bl	8001588 <ds1307_write>

	//5. Read back clock halt bit
	uint8_t clock_state = ds1307_read(DS1307_ADDR_SEC);
 80012da:	2000      	movs	r0, #0
 80012dc:	f000 f970 	bl	80015c0 <ds1307_read>
 80012e0:	4603      	mov	r3, r0
 80012e2:	71fb      	strb	r3, [r7, #7]

	return ((clock_state >> 7 ) & 0x1);
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	09db      	lsrs	r3, r3, #7
 80012e8:	b2db      	uxtb	r3, r3

}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40005400 	.word	0x40005400

080012f8 <ds1307_set_current_time>:


void ds1307_set_current_time(RTC_time_t *rtc_time)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
	uint8_t seconds, hrs;
	seconds = binary_to_bcd(rtc_time->seconds);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f000 f979 	bl	80015fc <binary_to_bcd>
 800130a:	4603      	mov	r3, r0
 800130c:	73bb      	strb	r3, [r7, #14]
	seconds &= ~( 1 << 7);
 800130e:	7bbb      	ldrb	r3, [r7, #14]
 8001310:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001314:	73bb      	strb	r3, [r7, #14]
	ds1307_write(seconds, DS1307_ADDR_SEC);
 8001316:	7bbb      	ldrb	r3, [r7, #14]
 8001318:	2100      	movs	r1, #0
 800131a:	4618      	mov	r0, r3
 800131c:	f000 f934 	bl	8001588 <ds1307_write>

	ds1307_write(binary_to_bcd(rtc_time->minutes), DS1307_ADDR_MIN);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	785b      	ldrb	r3, [r3, #1]
 8001324:	4618      	mov	r0, r3
 8001326:	f000 f969 	bl	80015fc <binary_to_bcd>
 800132a:	4603      	mov	r3, r0
 800132c:	2101      	movs	r1, #1
 800132e:	4618      	mov	r0, r3
 8001330:	f000 f92a 	bl	8001588 <ds1307_write>

	hrs = binary_to_bcd(rtc_time->hours);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	789b      	ldrb	r3, [r3, #2]
 8001338:	4618      	mov	r0, r3
 800133a:	f000 f95f 	bl	80015fc <binary_to_bcd>
 800133e:	4603      	mov	r3, r0
 8001340:	73fb      	strb	r3, [r7, #15]

	if(rtc_time->time_format == TIME_FORMAT_24HRS){
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	78db      	ldrb	r3, [r3, #3]
 8001346:	2b02      	cmp	r3, #2
 8001348:	d104      	bne.n	8001354 <ds1307_set_current_time+0x5c>
		hrs &= ~(1 << 6);
 800134a:	7bfb      	ldrb	r3, [r7, #15]
 800134c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001350:	73fb      	strb	r3, [r7, #15]
 8001352:	e011      	b.n	8001378 <ds1307_set_current_time+0x80>
	}else{
		hrs |= (1 << 6);
 8001354:	7bfb      	ldrb	r3, [r7, #15]
 8001356:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800135a:	73fb      	strb	r3, [r7, #15]
		hrs = (rtc_time->time_format  == TIME_FORMAT_12HRS_PM) ? hrs | ( 1 << 5) :  hrs & ~( 1 << 5) ;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	78db      	ldrb	r3, [r3, #3]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d104      	bne.n	800136e <ds1307_set_current_time+0x76>
 8001364:	7bfb      	ldrb	r3, [r7, #15]
 8001366:	f043 0320 	orr.w	r3, r3, #32
 800136a:	b2db      	uxtb	r3, r3
 800136c:	e003      	b.n	8001376 <ds1307_set_current_time+0x7e>
 800136e:	7bfb      	ldrb	r3, [r7, #15]
 8001370:	f023 0320 	bic.w	r3, r3, #32
 8001374:	b2db      	uxtb	r3, r3
 8001376:	73fb      	strb	r3, [r7, #15]
	}

	ds1307_write(hrs,DS1307_ADDR_HRS);
 8001378:	7bfb      	ldrb	r3, [r7, #15]
 800137a:	2102      	movs	r1, #2
 800137c:	4618      	mov	r0, r3
 800137e:	f000 f903 	bl	8001588 <ds1307_write>

}
 8001382:	bf00      	nop
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <ds1307_set_current_date>:

void ds1307_set_current_date(RTC_date_t *rtc_date)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b082      	sub	sp, #8
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
	ds1307_write(binary_to_bcd(rtc_date->date),DS1307_ADDR_DATE);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f000 f930 	bl	80015fc <binary_to_bcd>
 800139c:	4603      	mov	r3, r0
 800139e:	2104      	movs	r1, #4
 80013a0:	4618      	mov	r0, r3
 80013a2:	f000 f8f1 	bl	8001588 <ds1307_write>

	ds1307_write(binary_to_bcd(rtc_date->month),DS1307_ADDR_MONTH);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	785b      	ldrb	r3, [r3, #1]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f000 f926 	bl	80015fc <binary_to_bcd>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2105      	movs	r1, #5
 80013b4:	4618      	mov	r0, r3
 80013b6:	f000 f8e7 	bl	8001588 <ds1307_write>

	ds1307_write(binary_to_bcd(rtc_date->year),DS1307_ADDR_YEAR);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	789b      	ldrb	r3, [r3, #2]
 80013be:	4618      	mov	r0, r3
 80013c0:	f000 f91c 	bl	80015fc <binary_to_bcd>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2106      	movs	r1, #6
 80013c8:	4618      	mov	r0, r3
 80013ca:	f000 f8dd 	bl	8001588 <ds1307_write>

	ds1307_write(binary_to_bcd(rtc_date->day),DS1307_ADDR_DAY);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	78db      	ldrb	r3, [r3, #3]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f000 f912 	bl	80015fc <binary_to_bcd>
 80013d8:	4603      	mov	r3, r0
 80013da:	2103      	movs	r1, #3
 80013dc:	4618      	mov	r0, r3
 80013de:	f000 f8d3 	bl	8001588 <ds1307_write>

}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <ds1307_get_current_time>:

void ds1307_get_current_time(RTC_time_t *rtc_time)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b084      	sub	sp, #16
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]

	uint8_t seconds,hrs;

	seconds = ds1307_read(DS1307_ADDR_SEC);
 80013f2:	2000      	movs	r0, #0
 80013f4:	f000 f8e4 	bl	80015c0 <ds1307_read>
 80013f8:	4603      	mov	r3, r0
 80013fa:	73bb      	strb	r3, [r7, #14]

	seconds &= ~( 1 << 7);
 80013fc:	7bbb      	ldrb	r3, [r7, #14]
 80013fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001402:	73bb      	strb	r3, [r7, #14]

	rtc_time->seconds = bcd_to_binary(seconds);
 8001404:	7bbb      	ldrb	r3, [r7, #14]
 8001406:	4618      	mov	r0, r3
 8001408:	f000 f924 	bl	8001654 <bcd_to_binary>
 800140c:	4603      	mov	r3, r0
 800140e:	461a      	mov	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	701a      	strb	r2, [r3, #0]
	rtc_time->minutes = bcd_to_binary(ds1307_read(DS1307_ADDR_MIN));
 8001414:	2001      	movs	r0, #1
 8001416:	f000 f8d3 	bl	80015c0 <ds1307_read>
 800141a:	4603      	mov	r3, r0
 800141c:	4618      	mov	r0, r3
 800141e:	f000 f919 	bl	8001654 <bcd_to_binary>
 8001422:	4603      	mov	r3, r0
 8001424:	461a      	mov	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	705a      	strb	r2, [r3, #1]

	hrs = ds1307_read(DS1307_ADDR_HRS);
 800142a:	2002      	movs	r0, #2
 800142c:	f000 f8c8 	bl	80015c0 <ds1307_read>
 8001430:	4603      	mov	r3, r0
 8001432:	73fb      	strb	r3, [r7, #15]
	if(hrs & ( 1 << 6)){
 8001434:	7bfb      	ldrb	r3, [r7, #15]
 8001436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800143a:	2b00      	cmp	r3, #0
 800143c:	d00f      	beq.n	800145e <ds1307_get_current_time+0x74>
		//12 hr format
		rtc_time->time_format =  !((hrs & ( 1 << 5)) == 0) ;
 800143e:	7bfb      	ldrb	r3, [r7, #15]
 8001440:	f003 0320 	and.w	r3, r3, #32
 8001444:	2b00      	cmp	r3, #0
 8001446:	bf14      	ite	ne
 8001448:	2301      	movne	r3, #1
 800144a:	2300      	moveq	r3, #0
 800144c:	b2db      	uxtb	r3, r3
 800144e:	461a      	mov	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	70da      	strb	r2, [r3, #3]
		hrs &= ~(0x3 << 5);//Clear 6 and 5
 8001454:	7bfb      	ldrb	r3, [r7, #15]
 8001456:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800145a:	73fb      	strb	r3, [r7, #15]
 800145c:	e002      	b.n	8001464 <ds1307_get_current_time+0x7a>
	}else{
		//24 hr format
		rtc_time->time_format = TIME_FORMAT_24HRS;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2202      	movs	r2, #2
 8001462:	70da      	strb	r2, [r3, #3]
	}

	rtc_time->hours = bcd_to_binary(hrs);
 8001464:	7bfb      	ldrb	r3, [r7, #15]
 8001466:	4618      	mov	r0, r3
 8001468:	f000 f8f4 	bl	8001654 <bcd_to_binary>
 800146c:	4603      	mov	r3, r0
 800146e:	461a      	mov	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	709a      	strb	r2, [r3, #2]
}
 8001474:	bf00      	nop
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <ds1307_get_current_date>:

void ds1307_get_current_date(RTC_date_t *rtc_date)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
	rtc_date->day =  bcd_to_binary(ds1307_read(DS1307_ADDR_DAY));
 8001484:	2003      	movs	r0, #3
 8001486:	f000 f89b 	bl	80015c0 <ds1307_read>
 800148a:	4603      	mov	r3, r0
 800148c:	4618      	mov	r0, r3
 800148e:	f000 f8e1 	bl	8001654 <bcd_to_binary>
 8001492:	4603      	mov	r3, r0
 8001494:	461a      	mov	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	70da      	strb	r2, [r3, #3]
	rtc_date->date = bcd_to_binary(ds1307_read(DS1307_ADDR_DATE));
 800149a:	2004      	movs	r0, #4
 800149c:	f000 f890 	bl	80015c0 <ds1307_read>
 80014a0:	4603      	mov	r3, r0
 80014a2:	4618      	mov	r0, r3
 80014a4:	f000 f8d6 	bl	8001654 <bcd_to_binary>
 80014a8:	4603      	mov	r3, r0
 80014aa:	461a      	mov	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	701a      	strb	r2, [r3, #0]
	rtc_date->month = bcd_to_binary(ds1307_read(DS1307_ADDR_MONTH));
 80014b0:	2005      	movs	r0, #5
 80014b2:	f000 f885 	bl	80015c0 <ds1307_read>
 80014b6:	4603      	mov	r3, r0
 80014b8:	4618      	mov	r0, r3
 80014ba:	f000 f8cb 	bl	8001654 <bcd_to_binary>
 80014be:	4603      	mov	r3, r0
 80014c0:	461a      	mov	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	705a      	strb	r2, [r3, #1]
	rtc_date->year = bcd_to_binary(ds1307_read(DS1307_ADDR_YEAR));
 80014c6:	2006      	movs	r0, #6
 80014c8:	f000 f87a 	bl	80015c0 <ds1307_read>
 80014cc:	4603      	mov	r3, r0
 80014ce:	4618      	mov	r0, r3
 80014d0:	f000 f8c0 	bl	8001654 <bcd_to_binary>
 80014d4:	4603      	mov	r3, r0
 80014d6:	461a      	mov	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	709a      	strb	r2, [r3, #2]

}
 80014dc:	bf00      	nop
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <ds1307_i2c_pin_config>:

static void ds1307_i2c_pin_config(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
	GPIO_Handle_t i2c_sda,i2c_scl;

	memset(&i2c_sda,0,sizeof(i2c_sda));
 80014ea:	f107 030c 	add.w	r3, r7, #12
 80014ee:	220c      	movs	r2, #12
 80014f0:	2100      	movs	r1, #0
 80014f2:	4618      	mov	r0, r3
 80014f4:	f000 f8f4 	bl	80016e0 <memset>
	memset(&i2c_scl,0,sizeof(i2c_scl));
 80014f8:	463b      	mov	r3, r7
 80014fa:	220c      	movs	r2, #12
 80014fc:	2100      	movs	r1, #0
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 f8ee 	bl	80016e0 <memset>
	/*
	 * I2C1_SCL ==> PB6
	 * I2C1_SDA ==> PB7
	 */

	i2c_sda.pGPIOx = DS1307_I2C_GPIO_PORT;
 8001504:	4b14      	ldr	r3, [pc, #80]	; (8001558 <ds1307_i2c_pin_config+0x74>)
 8001506:	60fb      	str	r3, [r7, #12]
	i2c_sda.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8001508:	2304      	movs	r3, #4
 800150a:	757b      	strb	r3, [r7, #21]
	i2c_sda.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800150c:	2302      	movs	r3, #2
 800150e:	747b      	strb	r3, [r7, #17]
	i2c_sda.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SDA_PIN;
 8001510:	2307      	movs	r3, #7
 8001512:	743b      	strb	r3, [r7, #16]
	i2c_sda.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8001514:	2301      	movs	r3, #1
 8001516:	753b      	strb	r3, [r7, #20]
	i2c_sda.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 8001518:	2301      	movs	r3, #1
 800151a:	74fb      	strb	r3, [r7, #19]
	i2c_sda.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800151c:	2303      	movs	r3, #3
 800151e:	74bb      	strb	r3, [r7, #18]

	GPIO_Init(&i2c_sda);
 8001520:	f107 030c 	add.w	r3, r7, #12
 8001524:	4618      	mov	r0, r3
 8001526:	f7fe ff93 	bl	8000450 <GPIO_Init>


	i2c_scl.pGPIOx = DS1307_I2C_GPIO_PORT;
 800152a:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <ds1307_i2c_pin_config+0x74>)
 800152c:	603b      	str	r3, [r7, #0]
	i2c_scl.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 800152e:	2304      	movs	r3, #4
 8001530:	727b      	strb	r3, [r7, #9]
	i2c_scl.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8001532:	2302      	movs	r3, #2
 8001534:	717b      	strb	r3, [r7, #5]
	i2c_scl.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SCL_PIN;
 8001536:	2306      	movs	r3, #6
 8001538:	713b      	strb	r3, [r7, #4]
	i2c_scl.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 800153a:	2301      	movs	r3, #1
 800153c:	723b      	strb	r3, [r7, #8]
	i2c_scl.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 800153e:	2301      	movs	r3, #1
 8001540:	71fb      	strb	r3, [r7, #7]
	i2c_scl.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8001542:	2303      	movs	r3, #3
 8001544:	71bb      	strb	r3, [r7, #6]

	GPIO_Init(&i2c_scl);
 8001546:	463b      	mov	r3, r7
 8001548:	4618      	mov	r0, r3
 800154a:	f7fe ff81 	bl	8000450 <GPIO_Init>

}
 800154e:	bf00      	nop
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40020400 	.word	0x40020400

0800155c <ds1307_i2c_config>:


static void ds1307_i2c_config(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
	g_ds1307I2cHandle.pI2Cx = DS1307_I2C;
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <ds1307_i2c_config+0x20>)
 8001562:	4a07      	ldr	r2, [pc, #28]	; (8001580 <ds1307_i2c_config+0x24>)
 8001564:	601a      	str	r2, [r3, #0]
	g_ds1307I2cHandle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8001566:	4b05      	ldr	r3, [pc, #20]	; (800157c <ds1307_i2c_config+0x20>)
 8001568:	2201      	movs	r2, #1
 800156a:	725a      	strb	r2, [r3, #9]
	g_ds1307I2cHandle.I2C_Config.I2C_SCLSpeed = DS1307_I2C_SPEED;
 800156c:	4b03      	ldr	r3, [pc, #12]	; (800157c <ds1307_i2c_config+0x20>)
 800156e:	4a05      	ldr	r2, [pc, #20]	; (8001584 <ds1307_i2c_config+0x28>)
 8001570:	605a      	str	r2, [r3, #4]
	I2C_Init(&g_ds1307I2cHandle);
 8001572:	4802      	ldr	r0, [pc, #8]	; (800157c <ds1307_i2c_config+0x20>)
 8001574:	f7ff f9d4 	bl	8000920 <I2C_Init>
}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}
 800157c:	200000b0 	.word	0x200000b0
 8001580:	40005400 	.word	0x40005400
 8001584:	000186a0 	.word	0x000186a0

08001588 <ds1307_write>:


static void ds1307_write(uint8_t value,uint8_t reg_addr)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af02      	add	r7, sp, #8
 800158e:	4603      	mov	r3, r0
 8001590:	460a      	mov	r2, r1
 8001592:	71fb      	strb	r3, [r7, #7]
 8001594:	4613      	mov	r3, r2
 8001596:	71bb      	strb	r3, [r7, #6]
	uint8_t tx[2];
	tx[0] = reg_addr;
 8001598:	79bb      	ldrb	r3, [r7, #6]
 800159a:	733b      	strb	r3, [r7, #12]
	tx[1] = value;
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	737b      	strb	r3, [r7, #13]
	I2C_MasterSendData(&g_ds1307I2cHandle, tx, 2, DS1307_I2C_ADDRESS, 0);
 80015a0:	f107 010c 	add.w	r1, r7, #12
 80015a4:	2300      	movs	r3, #0
 80015a6:	9300      	str	r3, [sp, #0]
 80015a8:	2368      	movs	r3, #104	; 0x68
 80015aa:	2202      	movs	r2, #2
 80015ac:	4803      	ldr	r0, [pc, #12]	; (80015bc <ds1307_write+0x34>)
 80015ae:	f7ff fa7d 	bl	8000aac <I2C_MasterSendData>
}
 80015b2:	bf00      	nop
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	200000b0 	.word	0x200000b0

080015c0 <ds1307_read>:



static uint8_t ds1307_read(uint8_t reg_addr)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af02      	add	r7, sp, #8
 80015c6:	4603      	mov	r3, r0
 80015c8:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
    I2C_MasterSendData(&g_ds1307I2cHandle, &reg_addr, 1, DS1307_I2C_ADDRESS, 0);
 80015ca:	1df9      	adds	r1, r7, #7
 80015cc:	2300      	movs	r3, #0
 80015ce:	9300      	str	r3, [sp, #0]
 80015d0:	2368      	movs	r3, #104	; 0x68
 80015d2:	2201      	movs	r2, #1
 80015d4:	4808      	ldr	r0, [pc, #32]	; (80015f8 <ds1307_read+0x38>)
 80015d6:	f7ff fa69 	bl	8000aac <I2C_MasterSendData>
    I2C_MasterReceiveData(&g_ds1307I2cHandle, &data, 1, DS1307_I2C_ADDRESS, 0);
 80015da:	f107 010f 	add.w	r1, r7, #15
 80015de:	2300      	movs	r3, #0
 80015e0:	9300      	str	r3, [sp, #0]
 80015e2:	2368      	movs	r3, #104	; 0x68
 80015e4:	2201      	movs	r2, #1
 80015e6:	4804      	ldr	r0, [pc, #16]	; (80015f8 <ds1307_read+0x38>)
 80015e8:	f7ff fac3 	bl	8000b72 <I2C_MasterReceiveData>

    return data;
 80015ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	200000b0 	.word	0x200000b0

080015fc <binary_to_bcd>:



static uint8_t binary_to_bcd(uint8_t value)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	71fb      	strb	r3, [r7, #7]
	uint8_t m , n;
	uint8_t bcd;

	bcd = value;
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	73fb      	strb	r3, [r7, #15]
	if(value >= 10)
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	2b09      	cmp	r3, #9
 800160e:	d918      	bls.n	8001642 <binary_to_bcd+0x46>
	{
		m = value /10;
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	4a0f      	ldr	r2, [pc, #60]	; (8001650 <binary_to_bcd+0x54>)
 8001614:	fba2 2303 	umull	r2, r3, r2, r3
 8001618:	08db      	lsrs	r3, r3, #3
 800161a:	73bb      	strb	r3, [r7, #14]
		n = value % 10;
 800161c:	79fa      	ldrb	r2, [r7, #7]
 800161e:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <binary_to_bcd+0x54>)
 8001620:	fba3 1302 	umull	r1, r3, r3, r2
 8001624:	08d9      	lsrs	r1, r3, #3
 8001626:	460b      	mov	r3, r1
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	440b      	add	r3, r1
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	737b      	strb	r3, [r7, #13]
		bcd = (m << 4) | n ;
 8001632:	7bbb      	ldrb	r3, [r7, #14]
 8001634:	011b      	lsls	r3, r3, #4
 8001636:	b25a      	sxtb	r2, r3
 8001638:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800163c:	4313      	orrs	r3, r2
 800163e:	b25b      	sxtb	r3, r3
 8001640:	73fb      	strb	r3, [r7, #15]
	}

	return bcd;
 8001642:	7bfb      	ldrb	r3, [r7, #15]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	cccccccd 	.word	0xcccccccd

08001654 <bcd_to_binary>:

static uint8_t bcd_to_binary(uint8_t value)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	71fb      	strb	r3, [r7, #7]
	uint8_t m , n;
	m = (uint8_t) ((value >> 4 ) * 10);
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	091b      	lsrs	r3, r3, #4
 8001662:	b2db      	uxtb	r3, r3
 8001664:	461a      	mov	r2, r3
 8001666:	0092      	lsls	r2, r2, #2
 8001668:	4413      	add	r3, r2
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	73fb      	strb	r3, [r7, #15]
	n =  value & (uint8_t)0x0F;
 800166e:	79fb      	ldrb	r3, [r7, #7]
 8001670:	f003 030f 	and.w	r3, r3, #15
 8001674:	73bb      	strb	r3, [r7, #14]
	return (m+n);
 8001676:	7bfa      	ldrb	r2, [r7, #15]
 8001678:	7bbb      	ldrb	r3, [r7, #14]
 800167a:	4413      	add	r3, r2
 800167c:	b2db      	uxtb	r3, r3
}
 800167e:	4618      	mov	r0, r3
 8001680:	3714      	adds	r7, #20
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
	...

0800168c <__errno>:
 800168c:	4b01      	ldr	r3, [pc, #4]	; (8001694 <__errno+0x8>)
 800168e:	6818      	ldr	r0, [r3, #0]
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	20000014 	.word	0x20000014

08001698 <__libc_init_array>:
 8001698:	b570      	push	{r4, r5, r6, lr}
 800169a:	4d0d      	ldr	r5, [pc, #52]	; (80016d0 <__libc_init_array+0x38>)
 800169c:	4c0d      	ldr	r4, [pc, #52]	; (80016d4 <__libc_init_array+0x3c>)
 800169e:	1b64      	subs	r4, r4, r5
 80016a0:	10a4      	asrs	r4, r4, #2
 80016a2:	2600      	movs	r6, #0
 80016a4:	42a6      	cmp	r6, r4
 80016a6:	d109      	bne.n	80016bc <__libc_init_array+0x24>
 80016a8:	4d0b      	ldr	r5, [pc, #44]	; (80016d8 <__libc_init_array+0x40>)
 80016aa:	4c0c      	ldr	r4, [pc, #48]	; (80016dc <__libc_init_array+0x44>)
 80016ac:	f001 f824 	bl	80026f8 <_init>
 80016b0:	1b64      	subs	r4, r4, r5
 80016b2:	10a4      	asrs	r4, r4, #2
 80016b4:	2600      	movs	r6, #0
 80016b6:	42a6      	cmp	r6, r4
 80016b8:	d105      	bne.n	80016c6 <__libc_init_array+0x2e>
 80016ba:	bd70      	pop	{r4, r5, r6, pc}
 80016bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80016c0:	4798      	blx	r3
 80016c2:	3601      	adds	r6, #1
 80016c4:	e7ee      	b.n	80016a4 <__libc_init_array+0xc>
 80016c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80016ca:	4798      	blx	r3
 80016cc:	3601      	adds	r6, #1
 80016ce:	e7f2      	b.n	80016b6 <__libc_init_array+0x1e>
 80016d0:	08002874 	.word	0x08002874
 80016d4:	08002874 	.word	0x08002874
 80016d8:	08002874 	.word	0x08002874
 80016dc:	08002878 	.word	0x08002878

080016e0 <memset>:
 80016e0:	4402      	add	r2, r0
 80016e2:	4603      	mov	r3, r0
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d100      	bne.n	80016ea <memset+0xa>
 80016e8:	4770      	bx	lr
 80016ea:	f803 1b01 	strb.w	r1, [r3], #1
 80016ee:	e7f9      	b.n	80016e4 <memset+0x4>

080016f0 <iprintf>:
 80016f0:	b40f      	push	{r0, r1, r2, r3}
 80016f2:	4b0a      	ldr	r3, [pc, #40]	; (800171c <iprintf+0x2c>)
 80016f4:	b513      	push	{r0, r1, r4, lr}
 80016f6:	681c      	ldr	r4, [r3, #0]
 80016f8:	b124      	cbz	r4, 8001704 <iprintf+0x14>
 80016fa:	69a3      	ldr	r3, [r4, #24]
 80016fc:	b913      	cbnz	r3, 8001704 <iprintf+0x14>
 80016fe:	4620      	mov	r0, r4
 8001700:	f000 fa5e 	bl	8001bc0 <__sinit>
 8001704:	ab05      	add	r3, sp, #20
 8001706:	9a04      	ldr	r2, [sp, #16]
 8001708:	68a1      	ldr	r1, [r4, #8]
 800170a:	9301      	str	r3, [sp, #4]
 800170c:	4620      	mov	r0, r4
 800170e:	f000 fc67 	bl	8001fe0 <_vfiprintf_r>
 8001712:	b002      	add	sp, #8
 8001714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001718:	b004      	add	sp, #16
 800171a:	4770      	bx	lr
 800171c:	20000014 	.word	0x20000014

08001720 <_puts_r>:
 8001720:	b570      	push	{r4, r5, r6, lr}
 8001722:	460e      	mov	r6, r1
 8001724:	4605      	mov	r5, r0
 8001726:	b118      	cbz	r0, 8001730 <_puts_r+0x10>
 8001728:	6983      	ldr	r3, [r0, #24]
 800172a:	b90b      	cbnz	r3, 8001730 <_puts_r+0x10>
 800172c:	f000 fa48 	bl	8001bc0 <__sinit>
 8001730:	69ab      	ldr	r3, [r5, #24]
 8001732:	68ac      	ldr	r4, [r5, #8]
 8001734:	b913      	cbnz	r3, 800173c <_puts_r+0x1c>
 8001736:	4628      	mov	r0, r5
 8001738:	f000 fa42 	bl	8001bc0 <__sinit>
 800173c:	4b2c      	ldr	r3, [pc, #176]	; (80017f0 <_puts_r+0xd0>)
 800173e:	429c      	cmp	r4, r3
 8001740:	d120      	bne.n	8001784 <_puts_r+0x64>
 8001742:	686c      	ldr	r4, [r5, #4]
 8001744:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001746:	07db      	lsls	r3, r3, #31
 8001748:	d405      	bmi.n	8001756 <_puts_r+0x36>
 800174a:	89a3      	ldrh	r3, [r4, #12]
 800174c:	0598      	lsls	r0, r3, #22
 800174e:	d402      	bmi.n	8001756 <_puts_r+0x36>
 8001750:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001752:	f000 fad3 	bl	8001cfc <__retarget_lock_acquire_recursive>
 8001756:	89a3      	ldrh	r3, [r4, #12]
 8001758:	0719      	lsls	r1, r3, #28
 800175a:	d51d      	bpl.n	8001798 <_puts_r+0x78>
 800175c:	6923      	ldr	r3, [r4, #16]
 800175e:	b1db      	cbz	r3, 8001798 <_puts_r+0x78>
 8001760:	3e01      	subs	r6, #1
 8001762:	68a3      	ldr	r3, [r4, #8]
 8001764:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001768:	3b01      	subs	r3, #1
 800176a:	60a3      	str	r3, [r4, #8]
 800176c:	bb39      	cbnz	r1, 80017be <_puts_r+0x9e>
 800176e:	2b00      	cmp	r3, #0
 8001770:	da38      	bge.n	80017e4 <_puts_r+0xc4>
 8001772:	4622      	mov	r2, r4
 8001774:	210a      	movs	r1, #10
 8001776:	4628      	mov	r0, r5
 8001778:	f000 f848 	bl	800180c <__swbuf_r>
 800177c:	3001      	adds	r0, #1
 800177e:	d011      	beq.n	80017a4 <_puts_r+0x84>
 8001780:	250a      	movs	r5, #10
 8001782:	e011      	b.n	80017a8 <_puts_r+0x88>
 8001784:	4b1b      	ldr	r3, [pc, #108]	; (80017f4 <_puts_r+0xd4>)
 8001786:	429c      	cmp	r4, r3
 8001788:	d101      	bne.n	800178e <_puts_r+0x6e>
 800178a:	68ac      	ldr	r4, [r5, #8]
 800178c:	e7da      	b.n	8001744 <_puts_r+0x24>
 800178e:	4b1a      	ldr	r3, [pc, #104]	; (80017f8 <_puts_r+0xd8>)
 8001790:	429c      	cmp	r4, r3
 8001792:	bf08      	it	eq
 8001794:	68ec      	ldreq	r4, [r5, #12]
 8001796:	e7d5      	b.n	8001744 <_puts_r+0x24>
 8001798:	4621      	mov	r1, r4
 800179a:	4628      	mov	r0, r5
 800179c:	f000 f888 	bl	80018b0 <__swsetup_r>
 80017a0:	2800      	cmp	r0, #0
 80017a2:	d0dd      	beq.n	8001760 <_puts_r+0x40>
 80017a4:	f04f 35ff 	mov.w	r5, #4294967295
 80017a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80017aa:	07da      	lsls	r2, r3, #31
 80017ac:	d405      	bmi.n	80017ba <_puts_r+0x9a>
 80017ae:	89a3      	ldrh	r3, [r4, #12]
 80017b0:	059b      	lsls	r3, r3, #22
 80017b2:	d402      	bmi.n	80017ba <_puts_r+0x9a>
 80017b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80017b6:	f000 faa2 	bl	8001cfe <__retarget_lock_release_recursive>
 80017ba:	4628      	mov	r0, r5
 80017bc:	bd70      	pop	{r4, r5, r6, pc}
 80017be:	2b00      	cmp	r3, #0
 80017c0:	da04      	bge.n	80017cc <_puts_r+0xac>
 80017c2:	69a2      	ldr	r2, [r4, #24]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	dc06      	bgt.n	80017d6 <_puts_r+0xb6>
 80017c8:	290a      	cmp	r1, #10
 80017ca:	d004      	beq.n	80017d6 <_puts_r+0xb6>
 80017cc:	6823      	ldr	r3, [r4, #0]
 80017ce:	1c5a      	adds	r2, r3, #1
 80017d0:	6022      	str	r2, [r4, #0]
 80017d2:	7019      	strb	r1, [r3, #0]
 80017d4:	e7c5      	b.n	8001762 <_puts_r+0x42>
 80017d6:	4622      	mov	r2, r4
 80017d8:	4628      	mov	r0, r5
 80017da:	f000 f817 	bl	800180c <__swbuf_r>
 80017de:	3001      	adds	r0, #1
 80017e0:	d1bf      	bne.n	8001762 <_puts_r+0x42>
 80017e2:	e7df      	b.n	80017a4 <_puts_r+0x84>
 80017e4:	6823      	ldr	r3, [r4, #0]
 80017e6:	250a      	movs	r5, #10
 80017e8:	1c5a      	adds	r2, r3, #1
 80017ea:	6022      	str	r2, [r4, #0]
 80017ec:	701d      	strb	r5, [r3, #0]
 80017ee:	e7db      	b.n	80017a8 <_puts_r+0x88>
 80017f0:	08002800 	.word	0x08002800
 80017f4:	08002820 	.word	0x08002820
 80017f8:	080027e0 	.word	0x080027e0

080017fc <puts>:
 80017fc:	4b02      	ldr	r3, [pc, #8]	; (8001808 <puts+0xc>)
 80017fe:	4601      	mov	r1, r0
 8001800:	6818      	ldr	r0, [r3, #0]
 8001802:	f7ff bf8d 	b.w	8001720 <_puts_r>
 8001806:	bf00      	nop
 8001808:	20000014 	.word	0x20000014

0800180c <__swbuf_r>:
 800180c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800180e:	460e      	mov	r6, r1
 8001810:	4614      	mov	r4, r2
 8001812:	4605      	mov	r5, r0
 8001814:	b118      	cbz	r0, 800181e <__swbuf_r+0x12>
 8001816:	6983      	ldr	r3, [r0, #24]
 8001818:	b90b      	cbnz	r3, 800181e <__swbuf_r+0x12>
 800181a:	f000 f9d1 	bl	8001bc0 <__sinit>
 800181e:	4b21      	ldr	r3, [pc, #132]	; (80018a4 <__swbuf_r+0x98>)
 8001820:	429c      	cmp	r4, r3
 8001822:	d12b      	bne.n	800187c <__swbuf_r+0x70>
 8001824:	686c      	ldr	r4, [r5, #4]
 8001826:	69a3      	ldr	r3, [r4, #24]
 8001828:	60a3      	str	r3, [r4, #8]
 800182a:	89a3      	ldrh	r3, [r4, #12]
 800182c:	071a      	lsls	r2, r3, #28
 800182e:	d52f      	bpl.n	8001890 <__swbuf_r+0x84>
 8001830:	6923      	ldr	r3, [r4, #16]
 8001832:	b36b      	cbz	r3, 8001890 <__swbuf_r+0x84>
 8001834:	6923      	ldr	r3, [r4, #16]
 8001836:	6820      	ldr	r0, [r4, #0]
 8001838:	1ac0      	subs	r0, r0, r3
 800183a:	6963      	ldr	r3, [r4, #20]
 800183c:	b2f6      	uxtb	r6, r6
 800183e:	4283      	cmp	r3, r0
 8001840:	4637      	mov	r7, r6
 8001842:	dc04      	bgt.n	800184e <__swbuf_r+0x42>
 8001844:	4621      	mov	r1, r4
 8001846:	4628      	mov	r0, r5
 8001848:	f000 f926 	bl	8001a98 <_fflush_r>
 800184c:	bb30      	cbnz	r0, 800189c <__swbuf_r+0x90>
 800184e:	68a3      	ldr	r3, [r4, #8]
 8001850:	3b01      	subs	r3, #1
 8001852:	60a3      	str	r3, [r4, #8]
 8001854:	6823      	ldr	r3, [r4, #0]
 8001856:	1c5a      	adds	r2, r3, #1
 8001858:	6022      	str	r2, [r4, #0]
 800185a:	701e      	strb	r6, [r3, #0]
 800185c:	6963      	ldr	r3, [r4, #20]
 800185e:	3001      	adds	r0, #1
 8001860:	4283      	cmp	r3, r0
 8001862:	d004      	beq.n	800186e <__swbuf_r+0x62>
 8001864:	89a3      	ldrh	r3, [r4, #12]
 8001866:	07db      	lsls	r3, r3, #31
 8001868:	d506      	bpl.n	8001878 <__swbuf_r+0x6c>
 800186a:	2e0a      	cmp	r6, #10
 800186c:	d104      	bne.n	8001878 <__swbuf_r+0x6c>
 800186e:	4621      	mov	r1, r4
 8001870:	4628      	mov	r0, r5
 8001872:	f000 f911 	bl	8001a98 <_fflush_r>
 8001876:	b988      	cbnz	r0, 800189c <__swbuf_r+0x90>
 8001878:	4638      	mov	r0, r7
 800187a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800187c:	4b0a      	ldr	r3, [pc, #40]	; (80018a8 <__swbuf_r+0x9c>)
 800187e:	429c      	cmp	r4, r3
 8001880:	d101      	bne.n	8001886 <__swbuf_r+0x7a>
 8001882:	68ac      	ldr	r4, [r5, #8]
 8001884:	e7cf      	b.n	8001826 <__swbuf_r+0x1a>
 8001886:	4b09      	ldr	r3, [pc, #36]	; (80018ac <__swbuf_r+0xa0>)
 8001888:	429c      	cmp	r4, r3
 800188a:	bf08      	it	eq
 800188c:	68ec      	ldreq	r4, [r5, #12]
 800188e:	e7ca      	b.n	8001826 <__swbuf_r+0x1a>
 8001890:	4621      	mov	r1, r4
 8001892:	4628      	mov	r0, r5
 8001894:	f000 f80c 	bl	80018b0 <__swsetup_r>
 8001898:	2800      	cmp	r0, #0
 800189a:	d0cb      	beq.n	8001834 <__swbuf_r+0x28>
 800189c:	f04f 37ff 	mov.w	r7, #4294967295
 80018a0:	e7ea      	b.n	8001878 <__swbuf_r+0x6c>
 80018a2:	bf00      	nop
 80018a4:	08002800 	.word	0x08002800
 80018a8:	08002820 	.word	0x08002820
 80018ac:	080027e0 	.word	0x080027e0

080018b0 <__swsetup_r>:
 80018b0:	4b32      	ldr	r3, [pc, #200]	; (800197c <__swsetup_r+0xcc>)
 80018b2:	b570      	push	{r4, r5, r6, lr}
 80018b4:	681d      	ldr	r5, [r3, #0]
 80018b6:	4606      	mov	r6, r0
 80018b8:	460c      	mov	r4, r1
 80018ba:	b125      	cbz	r5, 80018c6 <__swsetup_r+0x16>
 80018bc:	69ab      	ldr	r3, [r5, #24]
 80018be:	b913      	cbnz	r3, 80018c6 <__swsetup_r+0x16>
 80018c0:	4628      	mov	r0, r5
 80018c2:	f000 f97d 	bl	8001bc0 <__sinit>
 80018c6:	4b2e      	ldr	r3, [pc, #184]	; (8001980 <__swsetup_r+0xd0>)
 80018c8:	429c      	cmp	r4, r3
 80018ca:	d10f      	bne.n	80018ec <__swsetup_r+0x3c>
 80018cc:	686c      	ldr	r4, [r5, #4]
 80018ce:	89a3      	ldrh	r3, [r4, #12]
 80018d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80018d4:	0719      	lsls	r1, r3, #28
 80018d6:	d42c      	bmi.n	8001932 <__swsetup_r+0x82>
 80018d8:	06dd      	lsls	r5, r3, #27
 80018da:	d411      	bmi.n	8001900 <__swsetup_r+0x50>
 80018dc:	2309      	movs	r3, #9
 80018de:	6033      	str	r3, [r6, #0]
 80018e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80018e4:	81a3      	strh	r3, [r4, #12]
 80018e6:	f04f 30ff 	mov.w	r0, #4294967295
 80018ea:	e03e      	b.n	800196a <__swsetup_r+0xba>
 80018ec:	4b25      	ldr	r3, [pc, #148]	; (8001984 <__swsetup_r+0xd4>)
 80018ee:	429c      	cmp	r4, r3
 80018f0:	d101      	bne.n	80018f6 <__swsetup_r+0x46>
 80018f2:	68ac      	ldr	r4, [r5, #8]
 80018f4:	e7eb      	b.n	80018ce <__swsetup_r+0x1e>
 80018f6:	4b24      	ldr	r3, [pc, #144]	; (8001988 <__swsetup_r+0xd8>)
 80018f8:	429c      	cmp	r4, r3
 80018fa:	bf08      	it	eq
 80018fc:	68ec      	ldreq	r4, [r5, #12]
 80018fe:	e7e6      	b.n	80018ce <__swsetup_r+0x1e>
 8001900:	0758      	lsls	r0, r3, #29
 8001902:	d512      	bpl.n	800192a <__swsetup_r+0x7a>
 8001904:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001906:	b141      	cbz	r1, 800191a <__swsetup_r+0x6a>
 8001908:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800190c:	4299      	cmp	r1, r3
 800190e:	d002      	beq.n	8001916 <__swsetup_r+0x66>
 8001910:	4630      	mov	r0, r6
 8001912:	f000 fa5b 	bl	8001dcc <_free_r>
 8001916:	2300      	movs	r3, #0
 8001918:	6363      	str	r3, [r4, #52]	; 0x34
 800191a:	89a3      	ldrh	r3, [r4, #12]
 800191c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001920:	81a3      	strh	r3, [r4, #12]
 8001922:	2300      	movs	r3, #0
 8001924:	6063      	str	r3, [r4, #4]
 8001926:	6923      	ldr	r3, [r4, #16]
 8001928:	6023      	str	r3, [r4, #0]
 800192a:	89a3      	ldrh	r3, [r4, #12]
 800192c:	f043 0308 	orr.w	r3, r3, #8
 8001930:	81a3      	strh	r3, [r4, #12]
 8001932:	6923      	ldr	r3, [r4, #16]
 8001934:	b94b      	cbnz	r3, 800194a <__swsetup_r+0x9a>
 8001936:	89a3      	ldrh	r3, [r4, #12]
 8001938:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800193c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001940:	d003      	beq.n	800194a <__swsetup_r+0x9a>
 8001942:	4621      	mov	r1, r4
 8001944:	4630      	mov	r0, r6
 8001946:	f000 fa01 	bl	8001d4c <__smakebuf_r>
 800194a:	89a0      	ldrh	r0, [r4, #12]
 800194c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001950:	f010 0301 	ands.w	r3, r0, #1
 8001954:	d00a      	beq.n	800196c <__swsetup_r+0xbc>
 8001956:	2300      	movs	r3, #0
 8001958:	60a3      	str	r3, [r4, #8]
 800195a:	6963      	ldr	r3, [r4, #20]
 800195c:	425b      	negs	r3, r3
 800195e:	61a3      	str	r3, [r4, #24]
 8001960:	6923      	ldr	r3, [r4, #16]
 8001962:	b943      	cbnz	r3, 8001976 <__swsetup_r+0xc6>
 8001964:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001968:	d1ba      	bne.n	80018e0 <__swsetup_r+0x30>
 800196a:	bd70      	pop	{r4, r5, r6, pc}
 800196c:	0781      	lsls	r1, r0, #30
 800196e:	bf58      	it	pl
 8001970:	6963      	ldrpl	r3, [r4, #20]
 8001972:	60a3      	str	r3, [r4, #8]
 8001974:	e7f4      	b.n	8001960 <__swsetup_r+0xb0>
 8001976:	2000      	movs	r0, #0
 8001978:	e7f7      	b.n	800196a <__swsetup_r+0xba>
 800197a:	bf00      	nop
 800197c:	20000014 	.word	0x20000014
 8001980:	08002800 	.word	0x08002800
 8001984:	08002820 	.word	0x08002820
 8001988:	080027e0 	.word	0x080027e0

0800198c <__sflush_r>:
 800198c:	898a      	ldrh	r2, [r1, #12]
 800198e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001992:	4605      	mov	r5, r0
 8001994:	0710      	lsls	r0, r2, #28
 8001996:	460c      	mov	r4, r1
 8001998:	d458      	bmi.n	8001a4c <__sflush_r+0xc0>
 800199a:	684b      	ldr	r3, [r1, #4]
 800199c:	2b00      	cmp	r3, #0
 800199e:	dc05      	bgt.n	80019ac <__sflush_r+0x20>
 80019a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	dc02      	bgt.n	80019ac <__sflush_r+0x20>
 80019a6:	2000      	movs	r0, #0
 80019a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80019ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80019ae:	2e00      	cmp	r6, #0
 80019b0:	d0f9      	beq.n	80019a6 <__sflush_r+0x1a>
 80019b2:	2300      	movs	r3, #0
 80019b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80019b8:	682f      	ldr	r7, [r5, #0]
 80019ba:	602b      	str	r3, [r5, #0]
 80019bc:	d032      	beq.n	8001a24 <__sflush_r+0x98>
 80019be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80019c0:	89a3      	ldrh	r3, [r4, #12]
 80019c2:	075a      	lsls	r2, r3, #29
 80019c4:	d505      	bpl.n	80019d2 <__sflush_r+0x46>
 80019c6:	6863      	ldr	r3, [r4, #4]
 80019c8:	1ac0      	subs	r0, r0, r3
 80019ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80019cc:	b10b      	cbz	r3, 80019d2 <__sflush_r+0x46>
 80019ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019d0:	1ac0      	subs	r0, r0, r3
 80019d2:	2300      	movs	r3, #0
 80019d4:	4602      	mov	r2, r0
 80019d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80019d8:	6a21      	ldr	r1, [r4, #32]
 80019da:	4628      	mov	r0, r5
 80019dc:	47b0      	blx	r6
 80019de:	1c43      	adds	r3, r0, #1
 80019e0:	89a3      	ldrh	r3, [r4, #12]
 80019e2:	d106      	bne.n	80019f2 <__sflush_r+0x66>
 80019e4:	6829      	ldr	r1, [r5, #0]
 80019e6:	291d      	cmp	r1, #29
 80019e8:	d82c      	bhi.n	8001a44 <__sflush_r+0xb8>
 80019ea:	4a2a      	ldr	r2, [pc, #168]	; (8001a94 <__sflush_r+0x108>)
 80019ec:	40ca      	lsrs	r2, r1
 80019ee:	07d6      	lsls	r6, r2, #31
 80019f0:	d528      	bpl.n	8001a44 <__sflush_r+0xb8>
 80019f2:	2200      	movs	r2, #0
 80019f4:	6062      	str	r2, [r4, #4]
 80019f6:	04d9      	lsls	r1, r3, #19
 80019f8:	6922      	ldr	r2, [r4, #16]
 80019fa:	6022      	str	r2, [r4, #0]
 80019fc:	d504      	bpl.n	8001a08 <__sflush_r+0x7c>
 80019fe:	1c42      	adds	r2, r0, #1
 8001a00:	d101      	bne.n	8001a06 <__sflush_r+0x7a>
 8001a02:	682b      	ldr	r3, [r5, #0]
 8001a04:	b903      	cbnz	r3, 8001a08 <__sflush_r+0x7c>
 8001a06:	6560      	str	r0, [r4, #84]	; 0x54
 8001a08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001a0a:	602f      	str	r7, [r5, #0]
 8001a0c:	2900      	cmp	r1, #0
 8001a0e:	d0ca      	beq.n	80019a6 <__sflush_r+0x1a>
 8001a10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001a14:	4299      	cmp	r1, r3
 8001a16:	d002      	beq.n	8001a1e <__sflush_r+0x92>
 8001a18:	4628      	mov	r0, r5
 8001a1a:	f000 f9d7 	bl	8001dcc <_free_r>
 8001a1e:	2000      	movs	r0, #0
 8001a20:	6360      	str	r0, [r4, #52]	; 0x34
 8001a22:	e7c1      	b.n	80019a8 <__sflush_r+0x1c>
 8001a24:	6a21      	ldr	r1, [r4, #32]
 8001a26:	2301      	movs	r3, #1
 8001a28:	4628      	mov	r0, r5
 8001a2a:	47b0      	blx	r6
 8001a2c:	1c41      	adds	r1, r0, #1
 8001a2e:	d1c7      	bne.n	80019c0 <__sflush_r+0x34>
 8001a30:	682b      	ldr	r3, [r5, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d0c4      	beq.n	80019c0 <__sflush_r+0x34>
 8001a36:	2b1d      	cmp	r3, #29
 8001a38:	d001      	beq.n	8001a3e <__sflush_r+0xb2>
 8001a3a:	2b16      	cmp	r3, #22
 8001a3c:	d101      	bne.n	8001a42 <__sflush_r+0xb6>
 8001a3e:	602f      	str	r7, [r5, #0]
 8001a40:	e7b1      	b.n	80019a6 <__sflush_r+0x1a>
 8001a42:	89a3      	ldrh	r3, [r4, #12]
 8001a44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a48:	81a3      	strh	r3, [r4, #12]
 8001a4a:	e7ad      	b.n	80019a8 <__sflush_r+0x1c>
 8001a4c:	690f      	ldr	r7, [r1, #16]
 8001a4e:	2f00      	cmp	r7, #0
 8001a50:	d0a9      	beq.n	80019a6 <__sflush_r+0x1a>
 8001a52:	0793      	lsls	r3, r2, #30
 8001a54:	680e      	ldr	r6, [r1, #0]
 8001a56:	bf08      	it	eq
 8001a58:	694b      	ldreq	r3, [r1, #20]
 8001a5a:	600f      	str	r7, [r1, #0]
 8001a5c:	bf18      	it	ne
 8001a5e:	2300      	movne	r3, #0
 8001a60:	eba6 0807 	sub.w	r8, r6, r7
 8001a64:	608b      	str	r3, [r1, #8]
 8001a66:	f1b8 0f00 	cmp.w	r8, #0
 8001a6a:	dd9c      	ble.n	80019a6 <__sflush_r+0x1a>
 8001a6c:	6a21      	ldr	r1, [r4, #32]
 8001a6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001a70:	4643      	mov	r3, r8
 8001a72:	463a      	mov	r2, r7
 8001a74:	4628      	mov	r0, r5
 8001a76:	47b0      	blx	r6
 8001a78:	2800      	cmp	r0, #0
 8001a7a:	dc06      	bgt.n	8001a8a <__sflush_r+0xfe>
 8001a7c:	89a3      	ldrh	r3, [r4, #12]
 8001a7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a82:	81a3      	strh	r3, [r4, #12]
 8001a84:	f04f 30ff 	mov.w	r0, #4294967295
 8001a88:	e78e      	b.n	80019a8 <__sflush_r+0x1c>
 8001a8a:	4407      	add	r7, r0
 8001a8c:	eba8 0800 	sub.w	r8, r8, r0
 8001a90:	e7e9      	b.n	8001a66 <__sflush_r+0xda>
 8001a92:	bf00      	nop
 8001a94:	20400001 	.word	0x20400001

08001a98 <_fflush_r>:
 8001a98:	b538      	push	{r3, r4, r5, lr}
 8001a9a:	690b      	ldr	r3, [r1, #16]
 8001a9c:	4605      	mov	r5, r0
 8001a9e:	460c      	mov	r4, r1
 8001aa0:	b913      	cbnz	r3, 8001aa8 <_fflush_r+0x10>
 8001aa2:	2500      	movs	r5, #0
 8001aa4:	4628      	mov	r0, r5
 8001aa6:	bd38      	pop	{r3, r4, r5, pc}
 8001aa8:	b118      	cbz	r0, 8001ab2 <_fflush_r+0x1a>
 8001aaa:	6983      	ldr	r3, [r0, #24]
 8001aac:	b90b      	cbnz	r3, 8001ab2 <_fflush_r+0x1a>
 8001aae:	f000 f887 	bl	8001bc0 <__sinit>
 8001ab2:	4b14      	ldr	r3, [pc, #80]	; (8001b04 <_fflush_r+0x6c>)
 8001ab4:	429c      	cmp	r4, r3
 8001ab6:	d11b      	bne.n	8001af0 <_fflush_r+0x58>
 8001ab8:	686c      	ldr	r4, [r5, #4]
 8001aba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d0ef      	beq.n	8001aa2 <_fflush_r+0xa>
 8001ac2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001ac4:	07d0      	lsls	r0, r2, #31
 8001ac6:	d404      	bmi.n	8001ad2 <_fflush_r+0x3a>
 8001ac8:	0599      	lsls	r1, r3, #22
 8001aca:	d402      	bmi.n	8001ad2 <_fflush_r+0x3a>
 8001acc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001ace:	f000 f915 	bl	8001cfc <__retarget_lock_acquire_recursive>
 8001ad2:	4628      	mov	r0, r5
 8001ad4:	4621      	mov	r1, r4
 8001ad6:	f7ff ff59 	bl	800198c <__sflush_r>
 8001ada:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001adc:	07da      	lsls	r2, r3, #31
 8001ade:	4605      	mov	r5, r0
 8001ae0:	d4e0      	bmi.n	8001aa4 <_fflush_r+0xc>
 8001ae2:	89a3      	ldrh	r3, [r4, #12]
 8001ae4:	059b      	lsls	r3, r3, #22
 8001ae6:	d4dd      	bmi.n	8001aa4 <_fflush_r+0xc>
 8001ae8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001aea:	f000 f908 	bl	8001cfe <__retarget_lock_release_recursive>
 8001aee:	e7d9      	b.n	8001aa4 <_fflush_r+0xc>
 8001af0:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <_fflush_r+0x70>)
 8001af2:	429c      	cmp	r4, r3
 8001af4:	d101      	bne.n	8001afa <_fflush_r+0x62>
 8001af6:	68ac      	ldr	r4, [r5, #8]
 8001af8:	e7df      	b.n	8001aba <_fflush_r+0x22>
 8001afa:	4b04      	ldr	r3, [pc, #16]	; (8001b0c <_fflush_r+0x74>)
 8001afc:	429c      	cmp	r4, r3
 8001afe:	bf08      	it	eq
 8001b00:	68ec      	ldreq	r4, [r5, #12]
 8001b02:	e7da      	b.n	8001aba <_fflush_r+0x22>
 8001b04:	08002800 	.word	0x08002800
 8001b08:	08002820 	.word	0x08002820
 8001b0c:	080027e0 	.word	0x080027e0

08001b10 <std>:
 8001b10:	2300      	movs	r3, #0
 8001b12:	b510      	push	{r4, lr}
 8001b14:	4604      	mov	r4, r0
 8001b16:	e9c0 3300 	strd	r3, r3, [r0]
 8001b1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001b1e:	6083      	str	r3, [r0, #8]
 8001b20:	8181      	strh	r1, [r0, #12]
 8001b22:	6643      	str	r3, [r0, #100]	; 0x64
 8001b24:	81c2      	strh	r2, [r0, #14]
 8001b26:	6183      	str	r3, [r0, #24]
 8001b28:	4619      	mov	r1, r3
 8001b2a:	2208      	movs	r2, #8
 8001b2c:	305c      	adds	r0, #92	; 0x5c
 8001b2e:	f7ff fdd7 	bl	80016e0 <memset>
 8001b32:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <std+0x38>)
 8001b34:	6263      	str	r3, [r4, #36]	; 0x24
 8001b36:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <std+0x3c>)
 8001b38:	62a3      	str	r3, [r4, #40]	; 0x28
 8001b3a:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <std+0x40>)
 8001b3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001b3e:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <std+0x44>)
 8001b40:	6224      	str	r4, [r4, #32]
 8001b42:	6323      	str	r3, [r4, #48]	; 0x30
 8001b44:	bd10      	pop	{r4, pc}
 8001b46:	bf00      	nop
 8001b48:	08002589 	.word	0x08002589
 8001b4c:	080025ab 	.word	0x080025ab
 8001b50:	080025e3 	.word	0x080025e3
 8001b54:	08002607 	.word	0x08002607

08001b58 <_cleanup_r>:
 8001b58:	4901      	ldr	r1, [pc, #4]	; (8001b60 <_cleanup_r+0x8>)
 8001b5a:	f000 b8af 	b.w	8001cbc <_fwalk_reent>
 8001b5e:	bf00      	nop
 8001b60:	08001a99 	.word	0x08001a99

08001b64 <__sfmoreglue>:
 8001b64:	b570      	push	{r4, r5, r6, lr}
 8001b66:	2268      	movs	r2, #104	; 0x68
 8001b68:	1e4d      	subs	r5, r1, #1
 8001b6a:	4355      	muls	r5, r2
 8001b6c:	460e      	mov	r6, r1
 8001b6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001b72:	f000 f997 	bl	8001ea4 <_malloc_r>
 8001b76:	4604      	mov	r4, r0
 8001b78:	b140      	cbz	r0, 8001b8c <__sfmoreglue+0x28>
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	e9c0 1600 	strd	r1, r6, [r0]
 8001b80:	300c      	adds	r0, #12
 8001b82:	60a0      	str	r0, [r4, #8]
 8001b84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001b88:	f7ff fdaa 	bl	80016e0 <memset>
 8001b8c:	4620      	mov	r0, r4
 8001b8e:	bd70      	pop	{r4, r5, r6, pc}

08001b90 <__sfp_lock_acquire>:
 8001b90:	4801      	ldr	r0, [pc, #4]	; (8001b98 <__sfp_lock_acquire+0x8>)
 8001b92:	f000 b8b3 	b.w	8001cfc <__retarget_lock_acquire_recursive>
 8001b96:	bf00      	nop
 8001b98:	200000d9 	.word	0x200000d9

08001b9c <__sfp_lock_release>:
 8001b9c:	4801      	ldr	r0, [pc, #4]	; (8001ba4 <__sfp_lock_release+0x8>)
 8001b9e:	f000 b8ae 	b.w	8001cfe <__retarget_lock_release_recursive>
 8001ba2:	bf00      	nop
 8001ba4:	200000d9 	.word	0x200000d9

08001ba8 <__sinit_lock_acquire>:
 8001ba8:	4801      	ldr	r0, [pc, #4]	; (8001bb0 <__sinit_lock_acquire+0x8>)
 8001baa:	f000 b8a7 	b.w	8001cfc <__retarget_lock_acquire_recursive>
 8001bae:	bf00      	nop
 8001bb0:	200000da 	.word	0x200000da

08001bb4 <__sinit_lock_release>:
 8001bb4:	4801      	ldr	r0, [pc, #4]	; (8001bbc <__sinit_lock_release+0x8>)
 8001bb6:	f000 b8a2 	b.w	8001cfe <__retarget_lock_release_recursive>
 8001bba:	bf00      	nop
 8001bbc:	200000da 	.word	0x200000da

08001bc0 <__sinit>:
 8001bc0:	b510      	push	{r4, lr}
 8001bc2:	4604      	mov	r4, r0
 8001bc4:	f7ff fff0 	bl	8001ba8 <__sinit_lock_acquire>
 8001bc8:	69a3      	ldr	r3, [r4, #24]
 8001bca:	b11b      	cbz	r3, 8001bd4 <__sinit+0x14>
 8001bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001bd0:	f7ff bff0 	b.w	8001bb4 <__sinit_lock_release>
 8001bd4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001bd8:	6523      	str	r3, [r4, #80]	; 0x50
 8001bda:	4b13      	ldr	r3, [pc, #76]	; (8001c28 <__sinit+0x68>)
 8001bdc:	4a13      	ldr	r2, [pc, #76]	; (8001c2c <__sinit+0x6c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	62a2      	str	r2, [r4, #40]	; 0x28
 8001be2:	42a3      	cmp	r3, r4
 8001be4:	bf04      	itt	eq
 8001be6:	2301      	moveq	r3, #1
 8001be8:	61a3      	streq	r3, [r4, #24]
 8001bea:	4620      	mov	r0, r4
 8001bec:	f000 f820 	bl	8001c30 <__sfp>
 8001bf0:	6060      	str	r0, [r4, #4]
 8001bf2:	4620      	mov	r0, r4
 8001bf4:	f000 f81c 	bl	8001c30 <__sfp>
 8001bf8:	60a0      	str	r0, [r4, #8]
 8001bfa:	4620      	mov	r0, r4
 8001bfc:	f000 f818 	bl	8001c30 <__sfp>
 8001c00:	2200      	movs	r2, #0
 8001c02:	60e0      	str	r0, [r4, #12]
 8001c04:	2104      	movs	r1, #4
 8001c06:	6860      	ldr	r0, [r4, #4]
 8001c08:	f7ff ff82 	bl	8001b10 <std>
 8001c0c:	68a0      	ldr	r0, [r4, #8]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	2109      	movs	r1, #9
 8001c12:	f7ff ff7d 	bl	8001b10 <std>
 8001c16:	68e0      	ldr	r0, [r4, #12]
 8001c18:	2202      	movs	r2, #2
 8001c1a:	2112      	movs	r1, #18
 8001c1c:	f7ff ff78 	bl	8001b10 <std>
 8001c20:	2301      	movs	r3, #1
 8001c22:	61a3      	str	r3, [r4, #24]
 8001c24:	e7d2      	b.n	8001bcc <__sinit+0xc>
 8001c26:	bf00      	nop
 8001c28:	080027dc 	.word	0x080027dc
 8001c2c:	08001b59 	.word	0x08001b59

08001c30 <__sfp>:
 8001c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c32:	4607      	mov	r7, r0
 8001c34:	f7ff ffac 	bl	8001b90 <__sfp_lock_acquire>
 8001c38:	4b1e      	ldr	r3, [pc, #120]	; (8001cb4 <__sfp+0x84>)
 8001c3a:	681e      	ldr	r6, [r3, #0]
 8001c3c:	69b3      	ldr	r3, [r6, #24]
 8001c3e:	b913      	cbnz	r3, 8001c46 <__sfp+0x16>
 8001c40:	4630      	mov	r0, r6
 8001c42:	f7ff ffbd 	bl	8001bc0 <__sinit>
 8001c46:	3648      	adds	r6, #72	; 0x48
 8001c48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	d503      	bpl.n	8001c58 <__sfp+0x28>
 8001c50:	6833      	ldr	r3, [r6, #0]
 8001c52:	b30b      	cbz	r3, 8001c98 <__sfp+0x68>
 8001c54:	6836      	ldr	r6, [r6, #0]
 8001c56:	e7f7      	b.n	8001c48 <__sfp+0x18>
 8001c58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001c5c:	b9d5      	cbnz	r5, 8001c94 <__sfp+0x64>
 8001c5e:	4b16      	ldr	r3, [pc, #88]	; (8001cb8 <__sfp+0x88>)
 8001c60:	60e3      	str	r3, [r4, #12]
 8001c62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001c66:	6665      	str	r5, [r4, #100]	; 0x64
 8001c68:	f000 f847 	bl	8001cfa <__retarget_lock_init_recursive>
 8001c6c:	f7ff ff96 	bl	8001b9c <__sfp_lock_release>
 8001c70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001c74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001c78:	6025      	str	r5, [r4, #0]
 8001c7a:	61a5      	str	r5, [r4, #24]
 8001c7c:	2208      	movs	r2, #8
 8001c7e:	4629      	mov	r1, r5
 8001c80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001c84:	f7ff fd2c 	bl	80016e0 <memset>
 8001c88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001c8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001c90:	4620      	mov	r0, r4
 8001c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c94:	3468      	adds	r4, #104	; 0x68
 8001c96:	e7d9      	b.n	8001c4c <__sfp+0x1c>
 8001c98:	2104      	movs	r1, #4
 8001c9a:	4638      	mov	r0, r7
 8001c9c:	f7ff ff62 	bl	8001b64 <__sfmoreglue>
 8001ca0:	4604      	mov	r4, r0
 8001ca2:	6030      	str	r0, [r6, #0]
 8001ca4:	2800      	cmp	r0, #0
 8001ca6:	d1d5      	bne.n	8001c54 <__sfp+0x24>
 8001ca8:	f7ff ff78 	bl	8001b9c <__sfp_lock_release>
 8001cac:	230c      	movs	r3, #12
 8001cae:	603b      	str	r3, [r7, #0]
 8001cb0:	e7ee      	b.n	8001c90 <__sfp+0x60>
 8001cb2:	bf00      	nop
 8001cb4:	080027dc 	.word	0x080027dc
 8001cb8:	ffff0001 	.word	0xffff0001

08001cbc <_fwalk_reent>:
 8001cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001cc0:	4606      	mov	r6, r0
 8001cc2:	4688      	mov	r8, r1
 8001cc4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001cc8:	2700      	movs	r7, #0
 8001cca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001cce:	f1b9 0901 	subs.w	r9, r9, #1
 8001cd2:	d505      	bpl.n	8001ce0 <_fwalk_reent+0x24>
 8001cd4:	6824      	ldr	r4, [r4, #0]
 8001cd6:	2c00      	cmp	r4, #0
 8001cd8:	d1f7      	bne.n	8001cca <_fwalk_reent+0xe>
 8001cda:	4638      	mov	r0, r7
 8001cdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001ce0:	89ab      	ldrh	r3, [r5, #12]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d907      	bls.n	8001cf6 <_fwalk_reent+0x3a>
 8001ce6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001cea:	3301      	adds	r3, #1
 8001cec:	d003      	beq.n	8001cf6 <_fwalk_reent+0x3a>
 8001cee:	4629      	mov	r1, r5
 8001cf0:	4630      	mov	r0, r6
 8001cf2:	47c0      	blx	r8
 8001cf4:	4307      	orrs	r7, r0
 8001cf6:	3568      	adds	r5, #104	; 0x68
 8001cf8:	e7e9      	b.n	8001cce <_fwalk_reent+0x12>

08001cfa <__retarget_lock_init_recursive>:
 8001cfa:	4770      	bx	lr

08001cfc <__retarget_lock_acquire_recursive>:
 8001cfc:	4770      	bx	lr

08001cfe <__retarget_lock_release_recursive>:
 8001cfe:	4770      	bx	lr

08001d00 <__swhatbuf_r>:
 8001d00:	b570      	push	{r4, r5, r6, lr}
 8001d02:	460e      	mov	r6, r1
 8001d04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d08:	2900      	cmp	r1, #0
 8001d0a:	b096      	sub	sp, #88	; 0x58
 8001d0c:	4614      	mov	r4, r2
 8001d0e:	461d      	mov	r5, r3
 8001d10:	da08      	bge.n	8001d24 <__swhatbuf_r+0x24>
 8001d12:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001d16:	2200      	movs	r2, #0
 8001d18:	602a      	str	r2, [r5, #0]
 8001d1a:	061a      	lsls	r2, r3, #24
 8001d1c:	d410      	bmi.n	8001d40 <__swhatbuf_r+0x40>
 8001d1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d22:	e00e      	b.n	8001d42 <__swhatbuf_r+0x42>
 8001d24:	466a      	mov	r2, sp
 8001d26:	f000 fc95 	bl	8002654 <_fstat_r>
 8001d2a:	2800      	cmp	r0, #0
 8001d2c:	dbf1      	blt.n	8001d12 <__swhatbuf_r+0x12>
 8001d2e:	9a01      	ldr	r2, [sp, #4]
 8001d30:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001d34:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001d38:	425a      	negs	r2, r3
 8001d3a:	415a      	adcs	r2, r3
 8001d3c:	602a      	str	r2, [r5, #0]
 8001d3e:	e7ee      	b.n	8001d1e <__swhatbuf_r+0x1e>
 8001d40:	2340      	movs	r3, #64	; 0x40
 8001d42:	2000      	movs	r0, #0
 8001d44:	6023      	str	r3, [r4, #0]
 8001d46:	b016      	add	sp, #88	; 0x58
 8001d48:	bd70      	pop	{r4, r5, r6, pc}
	...

08001d4c <__smakebuf_r>:
 8001d4c:	898b      	ldrh	r3, [r1, #12]
 8001d4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001d50:	079d      	lsls	r5, r3, #30
 8001d52:	4606      	mov	r6, r0
 8001d54:	460c      	mov	r4, r1
 8001d56:	d507      	bpl.n	8001d68 <__smakebuf_r+0x1c>
 8001d58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001d5c:	6023      	str	r3, [r4, #0]
 8001d5e:	6123      	str	r3, [r4, #16]
 8001d60:	2301      	movs	r3, #1
 8001d62:	6163      	str	r3, [r4, #20]
 8001d64:	b002      	add	sp, #8
 8001d66:	bd70      	pop	{r4, r5, r6, pc}
 8001d68:	ab01      	add	r3, sp, #4
 8001d6a:	466a      	mov	r2, sp
 8001d6c:	f7ff ffc8 	bl	8001d00 <__swhatbuf_r>
 8001d70:	9900      	ldr	r1, [sp, #0]
 8001d72:	4605      	mov	r5, r0
 8001d74:	4630      	mov	r0, r6
 8001d76:	f000 f895 	bl	8001ea4 <_malloc_r>
 8001d7a:	b948      	cbnz	r0, 8001d90 <__smakebuf_r+0x44>
 8001d7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d80:	059a      	lsls	r2, r3, #22
 8001d82:	d4ef      	bmi.n	8001d64 <__smakebuf_r+0x18>
 8001d84:	f023 0303 	bic.w	r3, r3, #3
 8001d88:	f043 0302 	orr.w	r3, r3, #2
 8001d8c:	81a3      	strh	r3, [r4, #12]
 8001d8e:	e7e3      	b.n	8001d58 <__smakebuf_r+0xc>
 8001d90:	4b0d      	ldr	r3, [pc, #52]	; (8001dc8 <__smakebuf_r+0x7c>)
 8001d92:	62b3      	str	r3, [r6, #40]	; 0x28
 8001d94:	89a3      	ldrh	r3, [r4, #12]
 8001d96:	6020      	str	r0, [r4, #0]
 8001d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d9c:	81a3      	strh	r3, [r4, #12]
 8001d9e:	9b00      	ldr	r3, [sp, #0]
 8001da0:	6163      	str	r3, [r4, #20]
 8001da2:	9b01      	ldr	r3, [sp, #4]
 8001da4:	6120      	str	r0, [r4, #16]
 8001da6:	b15b      	cbz	r3, 8001dc0 <__smakebuf_r+0x74>
 8001da8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001dac:	4630      	mov	r0, r6
 8001dae:	f000 fc63 	bl	8002678 <_isatty_r>
 8001db2:	b128      	cbz	r0, 8001dc0 <__smakebuf_r+0x74>
 8001db4:	89a3      	ldrh	r3, [r4, #12]
 8001db6:	f023 0303 	bic.w	r3, r3, #3
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	81a3      	strh	r3, [r4, #12]
 8001dc0:	89a0      	ldrh	r0, [r4, #12]
 8001dc2:	4305      	orrs	r5, r0
 8001dc4:	81a5      	strh	r5, [r4, #12]
 8001dc6:	e7cd      	b.n	8001d64 <__smakebuf_r+0x18>
 8001dc8:	08001b59 	.word	0x08001b59

08001dcc <_free_r>:
 8001dcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001dce:	2900      	cmp	r1, #0
 8001dd0:	d044      	beq.n	8001e5c <_free_r+0x90>
 8001dd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001dd6:	9001      	str	r0, [sp, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	f1a1 0404 	sub.w	r4, r1, #4
 8001dde:	bfb8      	it	lt
 8001de0:	18e4      	addlt	r4, r4, r3
 8001de2:	f000 fc6b 	bl	80026bc <__malloc_lock>
 8001de6:	4a1e      	ldr	r2, [pc, #120]	; (8001e60 <_free_r+0x94>)
 8001de8:	9801      	ldr	r0, [sp, #4]
 8001dea:	6813      	ldr	r3, [r2, #0]
 8001dec:	b933      	cbnz	r3, 8001dfc <_free_r+0x30>
 8001dee:	6063      	str	r3, [r4, #4]
 8001df0:	6014      	str	r4, [r2, #0]
 8001df2:	b003      	add	sp, #12
 8001df4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001df8:	f000 bc66 	b.w	80026c8 <__malloc_unlock>
 8001dfc:	42a3      	cmp	r3, r4
 8001dfe:	d908      	bls.n	8001e12 <_free_r+0x46>
 8001e00:	6825      	ldr	r5, [r4, #0]
 8001e02:	1961      	adds	r1, r4, r5
 8001e04:	428b      	cmp	r3, r1
 8001e06:	bf01      	itttt	eq
 8001e08:	6819      	ldreq	r1, [r3, #0]
 8001e0a:	685b      	ldreq	r3, [r3, #4]
 8001e0c:	1949      	addeq	r1, r1, r5
 8001e0e:	6021      	streq	r1, [r4, #0]
 8001e10:	e7ed      	b.n	8001dee <_free_r+0x22>
 8001e12:	461a      	mov	r2, r3
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	b10b      	cbz	r3, 8001e1c <_free_r+0x50>
 8001e18:	42a3      	cmp	r3, r4
 8001e1a:	d9fa      	bls.n	8001e12 <_free_r+0x46>
 8001e1c:	6811      	ldr	r1, [r2, #0]
 8001e1e:	1855      	adds	r5, r2, r1
 8001e20:	42a5      	cmp	r5, r4
 8001e22:	d10b      	bne.n	8001e3c <_free_r+0x70>
 8001e24:	6824      	ldr	r4, [r4, #0]
 8001e26:	4421      	add	r1, r4
 8001e28:	1854      	adds	r4, r2, r1
 8001e2a:	42a3      	cmp	r3, r4
 8001e2c:	6011      	str	r1, [r2, #0]
 8001e2e:	d1e0      	bne.n	8001df2 <_free_r+0x26>
 8001e30:	681c      	ldr	r4, [r3, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	6053      	str	r3, [r2, #4]
 8001e36:	4421      	add	r1, r4
 8001e38:	6011      	str	r1, [r2, #0]
 8001e3a:	e7da      	b.n	8001df2 <_free_r+0x26>
 8001e3c:	d902      	bls.n	8001e44 <_free_r+0x78>
 8001e3e:	230c      	movs	r3, #12
 8001e40:	6003      	str	r3, [r0, #0]
 8001e42:	e7d6      	b.n	8001df2 <_free_r+0x26>
 8001e44:	6825      	ldr	r5, [r4, #0]
 8001e46:	1961      	adds	r1, r4, r5
 8001e48:	428b      	cmp	r3, r1
 8001e4a:	bf04      	itt	eq
 8001e4c:	6819      	ldreq	r1, [r3, #0]
 8001e4e:	685b      	ldreq	r3, [r3, #4]
 8001e50:	6063      	str	r3, [r4, #4]
 8001e52:	bf04      	itt	eq
 8001e54:	1949      	addeq	r1, r1, r5
 8001e56:	6021      	streq	r1, [r4, #0]
 8001e58:	6054      	str	r4, [r2, #4]
 8001e5a:	e7ca      	b.n	8001df2 <_free_r+0x26>
 8001e5c:	b003      	add	sp, #12
 8001e5e:	bd30      	pop	{r4, r5, pc}
 8001e60:	200000dc 	.word	0x200000dc

08001e64 <sbrk_aligned>:
 8001e64:	b570      	push	{r4, r5, r6, lr}
 8001e66:	4e0e      	ldr	r6, [pc, #56]	; (8001ea0 <sbrk_aligned+0x3c>)
 8001e68:	460c      	mov	r4, r1
 8001e6a:	6831      	ldr	r1, [r6, #0]
 8001e6c:	4605      	mov	r5, r0
 8001e6e:	b911      	cbnz	r1, 8001e76 <sbrk_aligned+0x12>
 8001e70:	f000 fb7a 	bl	8002568 <_sbrk_r>
 8001e74:	6030      	str	r0, [r6, #0]
 8001e76:	4621      	mov	r1, r4
 8001e78:	4628      	mov	r0, r5
 8001e7a:	f000 fb75 	bl	8002568 <_sbrk_r>
 8001e7e:	1c43      	adds	r3, r0, #1
 8001e80:	d00a      	beq.n	8001e98 <sbrk_aligned+0x34>
 8001e82:	1cc4      	adds	r4, r0, #3
 8001e84:	f024 0403 	bic.w	r4, r4, #3
 8001e88:	42a0      	cmp	r0, r4
 8001e8a:	d007      	beq.n	8001e9c <sbrk_aligned+0x38>
 8001e8c:	1a21      	subs	r1, r4, r0
 8001e8e:	4628      	mov	r0, r5
 8001e90:	f000 fb6a 	bl	8002568 <_sbrk_r>
 8001e94:	3001      	adds	r0, #1
 8001e96:	d101      	bne.n	8001e9c <sbrk_aligned+0x38>
 8001e98:	f04f 34ff 	mov.w	r4, #4294967295
 8001e9c:	4620      	mov	r0, r4
 8001e9e:	bd70      	pop	{r4, r5, r6, pc}
 8001ea0:	200000e0 	.word	0x200000e0

08001ea4 <_malloc_r>:
 8001ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ea8:	1ccd      	adds	r5, r1, #3
 8001eaa:	f025 0503 	bic.w	r5, r5, #3
 8001eae:	3508      	adds	r5, #8
 8001eb0:	2d0c      	cmp	r5, #12
 8001eb2:	bf38      	it	cc
 8001eb4:	250c      	movcc	r5, #12
 8001eb6:	2d00      	cmp	r5, #0
 8001eb8:	4607      	mov	r7, r0
 8001eba:	db01      	blt.n	8001ec0 <_malloc_r+0x1c>
 8001ebc:	42a9      	cmp	r1, r5
 8001ebe:	d905      	bls.n	8001ecc <_malloc_r+0x28>
 8001ec0:	230c      	movs	r3, #12
 8001ec2:	603b      	str	r3, [r7, #0]
 8001ec4:	2600      	movs	r6, #0
 8001ec6:	4630      	mov	r0, r6
 8001ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ecc:	4e2e      	ldr	r6, [pc, #184]	; (8001f88 <_malloc_r+0xe4>)
 8001ece:	f000 fbf5 	bl	80026bc <__malloc_lock>
 8001ed2:	6833      	ldr	r3, [r6, #0]
 8001ed4:	461c      	mov	r4, r3
 8001ed6:	bb34      	cbnz	r4, 8001f26 <_malloc_r+0x82>
 8001ed8:	4629      	mov	r1, r5
 8001eda:	4638      	mov	r0, r7
 8001edc:	f7ff ffc2 	bl	8001e64 <sbrk_aligned>
 8001ee0:	1c43      	adds	r3, r0, #1
 8001ee2:	4604      	mov	r4, r0
 8001ee4:	d14d      	bne.n	8001f82 <_malloc_r+0xde>
 8001ee6:	6834      	ldr	r4, [r6, #0]
 8001ee8:	4626      	mov	r6, r4
 8001eea:	2e00      	cmp	r6, #0
 8001eec:	d140      	bne.n	8001f70 <_malloc_r+0xcc>
 8001eee:	6823      	ldr	r3, [r4, #0]
 8001ef0:	4631      	mov	r1, r6
 8001ef2:	4638      	mov	r0, r7
 8001ef4:	eb04 0803 	add.w	r8, r4, r3
 8001ef8:	f000 fb36 	bl	8002568 <_sbrk_r>
 8001efc:	4580      	cmp	r8, r0
 8001efe:	d13a      	bne.n	8001f76 <_malloc_r+0xd2>
 8001f00:	6821      	ldr	r1, [r4, #0]
 8001f02:	3503      	adds	r5, #3
 8001f04:	1a6d      	subs	r5, r5, r1
 8001f06:	f025 0503 	bic.w	r5, r5, #3
 8001f0a:	3508      	adds	r5, #8
 8001f0c:	2d0c      	cmp	r5, #12
 8001f0e:	bf38      	it	cc
 8001f10:	250c      	movcc	r5, #12
 8001f12:	4629      	mov	r1, r5
 8001f14:	4638      	mov	r0, r7
 8001f16:	f7ff ffa5 	bl	8001e64 <sbrk_aligned>
 8001f1a:	3001      	adds	r0, #1
 8001f1c:	d02b      	beq.n	8001f76 <_malloc_r+0xd2>
 8001f1e:	6823      	ldr	r3, [r4, #0]
 8001f20:	442b      	add	r3, r5
 8001f22:	6023      	str	r3, [r4, #0]
 8001f24:	e00e      	b.n	8001f44 <_malloc_r+0xa0>
 8001f26:	6822      	ldr	r2, [r4, #0]
 8001f28:	1b52      	subs	r2, r2, r5
 8001f2a:	d41e      	bmi.n	8001f6a <_malloc_r+0xc6>
 8001f2c:	2a0b      	cmp	r2, #11
 8001f2e:	d916      	bls.n	8001f5e <_malloc_r+0xba>
 8001f30:	1961      	adds	r1, r4, r5
 8001f32:	42a3      	cmp	r3, r4
 8001f34:	6025      	str	r5, [r4, #0]
 8001f36:	bf18      	it	ne
 8001f38:	6059      	strne	r1, [r3, #4]
 8001f3a:	6863      	ldr	r3, [r4, #4]
 8001f3c:	bf08      	it	eq
 8001f3e:	6031      	streq	r1, [r6, #0]
 8001f40:	5162      	str	r2, [r4, r5]
 8001f42:	604b      	str	r3, [r1, #4]
 8001f44:	4638      	mov	r0, r7
 8001f46:	f104 060b 	add.w	r6, r4, #11
 8001f4a:	f000 fbbd 	bl	80026c8 <__malloc_unlock>
 8001f4e:	f026 0607 	bic.w	r6, r6, #7
 8001f52:	1d23      	adds	r3, r4, #4
 8001f54:	1af2      	subs	r2, r6, r3
 8001f56:	d0b6      	beq.n	8001ec6 <_malloc_r+0x22>
 8001f58:	1b9b      	subs	r3, r3, r6
 8001f5a:	50a3      	str	r3, [r4, r2]
 8001f5c:	e7b3      	b.n	8001ec6 <_malloc_r+0x22>
 8001f5e:	6862      	ldr	r2, [r4, #4]
 8001f60:	42a3      	cmp	r3, r4
 8001f62:	bf0c      	ite	eq
 8001f64:	6032      	streq	r2, [r6, #0]
 8001f66:	605a      	strne	r2, [r3, #4]
 8001f68:	e7ec      	b.n	8001f44 <_malloc_r+0xa0>
 8001f6a:	4623      	mov	r3, r4
 8001f6c:	6864      	ldr	r4, [r4, #4]
 8001f6e:	e7b2      	b.n	8001ed6 <_malloc_r+0x32>
 8001f70:	4634      	mov	r4, r6
 8001f72:	6876      	ldr	r6, [r6, #4]
 8001f74:	e7b9      	b.n	8001eea <_malloc_r+0x46>
 8001f76:	230c      	movs	r3, #12
 8001f78:	603b      	str	r3, [r7, #0]
 8001f7a:	4638      	mov	r0, r7
 8001f7c:	f000 fba4 	bl	80026c8 <__malloc_unlock>
 8001f80:	e7a1      	b.n	8001ec6 <_malloc_r+0x22>
 8001f82:	6025      	str	r5, [r4, #0]
 8001f84:	e7de      	b.n	8001f44 <_malloc_r+0xa0>
 8001f86:	bf00      	nop
 8001f88:	200000dc 	.word	0x200000dc

08001f8c <__sfputc_r>:
 8001f8c:	6893      	ldr	r3, [r2, #8]
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	b410      	push	{r4}
 8001f94:	6093      	str	r3, [r2, #8]
 8001f96:	da08      	bge.n	8001faa <__sfputc_r+0x1e>
 8001f98:	6994      	ldr	r4, [r2, #24]
 8001f9a:	42a3      	cmp	r3, r4
 8001f9c:	db01      	blt.n	8001fa2 <__sfputc_r+0x16>
 8001f9e:	290a      	cmp	r1, #10
 8001fa0:	d103      	bne.n	8001faa <__sfputc_r+0x1e>
 8001fa2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001fa6:	f7ff bc31 	b.w	800180c <__swbuf_r>
 8001faa:	6813      	ldr	r3, [r2, #0]
 8001fac:	1c58      	adds	r0, r3, #1
 8001fae:	6010      	str	r0, [r2, #0]
 8001fb0:	7019      	strb	r1, [r3, #0]
 8001fb2:	4608      	mov	r0, r1
 8001fb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <__sfputs_r>:
 8001fba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fbc:	4606      	mov	r6, r0
 8001fbe:	460f      	mov	r7, r1
 8001fc0:	4614      	mov	r4, r2
 8001fc2:	18d5      	adds	r5, r2, r3
 8001fc4:	42ac      	cmp	r4, r5
 8001fc6:	d101      	bne.n	8001fcc <__sfputs_r+0x12>
 8001fc8:	2000      	movs	r0, #0
 8001fca:	e007      	b.n	8001fdc <__sfputs_r+0x22>
 8001fcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001fd0:	463a      	mov	r2, r7
 8001fd2:	4630      	mov	r0, r6
 8001fd4:	f7ff ffda 	bl	8001f8c <__sfputc_r>
 8001fd8:	1c43      	adds	r3, r0, #1
 8001fda:	d1f3      	bne.n	8001fc4 <__sfputs_r+0xa>
 8001fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001fe0 <_vfiprintf_r>:
 8001fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fe4:	460d      	mov	r5, r1
 8001fe6:	b09d      	sub	sp, #116	; 0x74
 8001fe8:	4614      	mov	r4, r2
 8001fea:	4698      	mov	r8, r3
 8001fec:	4606      	mov	r6, r0
 8001fee:	b118      	cbz	r0, 8001ff8 <_vfiprintf_r+0x18>
 8001ff0:	6983      	ldr	r3, [r0, #24]
 8001ff2:	b90b      	cbnz	r3, 8001ff8 <_vfiprintf_r+0x18>
 8001ff4:	f7ff fde4 	bl	8001bc0 <__sinit>
 8001ff8:	4b89      	ldr	r3, [pc, #548]	; (8002220 <_vfiprintf_r+0x240>)
 8001ffa:	429d      	cmp	r5, r3
 8001ffc:	d11b      	bne.n	8002036 <_vfiprintf_r+0x56>
 8001ffe:	6875      	ldr	r5, [r6, #4]
 8002000:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002002:	07d9      	lsls	r1, r3, #31
 8002004:	d405      	bmi.n	8002012 <_vfiprintf_r+0x32>
 8002006:	89ab      	ldrh	r3, [r5, #12]
 8002008:	059a      	lsls	r2, r3, #22
 800200a:	d402      	bmi.n	8002012 <_vfiprintf_r+0x32>
 800200c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800200e:	f7ff fe75 	bl	8001cfc <__retarget_lock_acquire_recursive>
 8002012:	89ab      	ldrh	r3, [r5, #12]
 8002014:	071b      	lsls	r3, r3, #28
 8002016:	d501      	bpl.n	800201c <_vfiprintf_r+0x3c>
 8002018:	692b      	ldr	r3, [r5, #16]
 800201a:	b9eb      	cbnz	r3, 8002058 <_vfiprintf_r+0x78>
 800201c:	4629      	mov	r1, r5
 800201e:	4630      	mov	r0, r6
 8002020:	f7ff fc46 	bl	80018b0 <__swsetup_r>
 8002024:	b1c0      	cbz	r0, 8002058 <_vfiprintf_r+0x78>
 8002026:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002028:	07dc      	lsls	r4, r3, #31
 800202a:	d50e      	bpl.n	800204a <_vfiprintf_r+0x6a>
 800202c:	f04f 30ff 	mov.w	r0, #4294967295
 8002030:	b01d      	add	sp, #116	; 0x74
 8002032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002036:	4b7b      	ldr	r3, [pc, #492]	; (8002224 <_vfiprintf_r+0x244>)
 8002038:	429d      	cmp	r5, r3
 800203a:	d101      	bne.n	8002040 <_vfiprintf_r+0x60>
 800203c:	68b5      	ldr	r5, [r6, #8]
 800203e:	e7df      	b.n	8002000 <_vfiprintf_r+0x20>
 8002040:	4b79      	ldr	r3, [pc, #484]	; (8002228 <_vfiprintf_r+0x248>)
 8002042:	429d      	cmp	r5, r3
 8002044:	bf08      	it	eq
 8002046:	68f5      	ldreq	r5, [r6, #12]
 8002048:	e7da      	b.n	8002000 <_vfiprintf_r+0x20>
 800204a:	89ab      	ldrh	r3, [r5, #12]
 800204c:	0598      	lsls	r0, r3, #22
 800204e:	d4ed      	bmi.n	800202c <_vfiprintf_r+0x4c>
 8002050:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002052:	f7ff fe54 	bl	8001cfe <__retarget_lock_release_recursive>
 8002056:	e7e9      	b.n	800202c <_vfiprintf_r+0x4c>
 8002058:	2300      	movs	r3, #0
 800205a:	9309      	str	r3, [sp, #36]	; 0x24
 800205c:	2320      	movs	r3, #32
 800205e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002062:	f8cd 800c 	str.w	r8, [sp, #12]
 8002066:	2330      	movs	r3, #48	; 0x30
 8002068:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800222c <_vfiprintf_r+0x24c>
 800206c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002070:	f04f 0901 	mov.w	r9, #1
 8002074:	4623      	mov	r3, r4
 8002076:	469a      	mov	sl, r3
 8002078:	f813 2b01 	ldrb.w	r2, [r3], #1
 800207c:	b10a      	cbz	r2, 8002082 <_vfiprintf_r+0xa2>
 800207e:	2a25      	cmp	r2, #37	; 0x25
 8002080:	d1f9      	bne.n	8002076 <_vfiprintf_r+0x96>
 8002082:	ebba 0b04 	subs.w	fp, sl, r4
 8002086:	d00b      	beq.n	80020a0 <_vfiprintf_r+0xc0>
 8002088:	465b      	mov	r3, fp
 800208a:	4622      	mov	r2, r4
 800208c:	4629      	mov	r1, r5
 800208e:	4630      	mov	r0, r6
 8002090:	f7ff ff93 	bl	8001fba <__sfputs_r>
 8002094:	3001      	adds	r0, #1
 8002096:	f000 80aa 	beq.w	80021ee <_vfiprintf_r+0x20e>
 800209a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800209c:	445a      	add	r2, fp
 800209e:	9209      	str	r2, [sp, #36]	; 0x24
 80020a0:	f89a 3000 	ldrb.w	r3, [sl]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f000 80a2 	beq.w	80021ee <_vfiprintf_r+0x20e>
 80020aa:	2300      	movs	r3, #0
 80020ac:	f04f 32ff 	mov.w	r2, #4294967295
 80020b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80020b4:	f10a 0a01 	add.w	sl, sl, #1
 80020b8:	9304      	str	r3, [sp, #16]
 80020ba:	9307      	str	r3, [sp, #28]
 80020bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80020c0:	931a      	str	r3, [sp, #104]	; 0x68
 80020c2:	4654      	mov	r4, sl
 80020c4:	2205      	movs	r2, #5
 80020c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80020ca:	4858      	ldr	r0, [pc, #352]	; (800222c <_vfiprintf_r+0x24c>)
 80020cc:	f7fe f8a0 	bl	8000210 <memchr>
 80020d0:	9a04      	ldr	r2, [sp, #16]
 80020d2:	b9d8      	cbnz	r0, 800210c <_vfiprintf_r+0x12c>
 80020d4:	06d1      	lsls	r1, r2, #27
 80020d6:	bf44      	itt	mi
 80020d8:	2320      	movmi	r3, #32
 80020da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80020de:	0713      	lsls	r3, r2, #28
 80020e0:	bf44      	itt	mi
 80020e2:	232b      	movmi	r3, #43	; 0x2b
 80020e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80020e8:	f89a 3000 	ldrb.w	r3, [sl]
 80020ec:	2b2a      	cmp	r3, #42	; 0x2a
 80020ee:	d015      	beq.n	800211c <_vfiprintf_r+0x13c>
 80020f0:	9a07      	ldr	r2, [sp, #28]
 80020f2:	4654      	mov	r4, sl
 80020f4:	2000      	movs	r0, #0
 80020f6:	f04f 0c0a 	mov.w	ip, #10
 80020fa:	4621      	mov	r1, r4
 80020fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002100:	3b30      	subs	r3, #48	; 0x30
 8002102:	2b09      	cmp	r3, #9
 8002104:	d94e      	bls.n	80021a4 <_vfiprintf_r+0x1c4>
 8002106:	b1b0      	cbz	r0, 8002136 <_vfiprintf_r+0x156>
 8002108:	9207      	str	r2, [sp, #28]
 800210a:	e014      	b.n	8002136 <_vfiprintf_r+0x156>
 800210c:	eba0 0308 	sub.w	r3, r0, r8
 8002110:	fa09 f303 	lsl.w	r3, r9, r3
 8002114:	4313      	orrs	r3, r2
 8002116:	9304      	str	r3, [sp, #16]
 8002118:	46a2      	mov	sl, r4
 800211a:	e7d2      	b.n	80020c2 <_vfiprintf_r+0xe2>
 800211c:	9b03      	ldr	r3, [sp, #12]
 800211e:	1d19      	adds	r1, r3, #4
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	9103      	str	r1, [sp, #12]
 8002124:	2b00      	cmp	r3, #0
 8002126:	bfbb      	ittet	lt
 8002128:	425b      	neglt	r3, r3
 800212a:	f042 0202 	orrlt.w	r2, r2, #2
 800212e:	9307      	strge	r3, [sp, #28]
 8002130:	9307      	strlt	r3, [sp, #28]
 8002132:	bfb8      	it	lt
 8002134:	9204      	strlt	r2, [sp, #16]
 8002136:	7823      	ldrb	r3, [r4, #0]
 8002138:	2b2e      	cmp	r3, #46	; 0x2e
 800213a:	d10c      	bne.n	8002156 <_vfiprintf_r+0x176>
 800213c:	7863      	ldrb	r3, [r4, #1]
 800213e:	2b2a      	cmp	r3, #42	; 0x2a
 8002140:	d135      	bne.n	80021ae <_vfiprintf_r+0x1ce>
 8002142:	9b03      	ldr	r3, [sp, #12]
 8002144:	1d1a      	adds	r2, r3, #4
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	9203      	str	r2, [sp, #12]
 800214a:	2b00      	cmp	r3, #0
 800214c:	bfb8      	it	lt
 800214e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002152:	3402      	adds	r4, #2
 8002154:	9305      	str	r3, [sp, #20]
 8002156:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800223c <_vfiprintf_r+0x25c>
 800215a:	7821      	ldrb	r1, [r4, #0]
 800215c:	2203      	movs	r2, #3
 800215e:	4650      	mov	r0, sl
 8002160:	f7fe f856 	bl	8000210 <memchr>
 8002164:	b140      	cbz	r0, 8002178 <_vfiprintf_r+0x198>
 8002166:	2340      	movs	r3, #64	; 0x40
 8002168:	eba0 000a 	sub.w	r0, r0, sl
 800216c:	fa03 f000 	lsl.w	r0, r3, r0
 8002170:	9b04      	ldr	r3, [sp, #16]
 8002172:	4303      	orrs	r3, r0
 8002174:	3401      	adds	r4, #1
 8002176:	9304      	str	r3, [sp, #16]
 8002178:	f814 1b01 	ldrb.w	r1, [r4], #1
 800217c:	482c      	ldr	r0, [pc, #176]	; (8002230 <_vfiprintf_r+0x250>)
 800217e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002182:	2206      	movs	r2, #6
 8002184:	f7fe f844 	bl	8000210 <memchr>
 8002188:	2800      	cmp	r0, #0
 800218a:	d03f      	beq.n	800220c <_vfiprintf_r+0x22c>
 800218c:	4b29      	ldr	r3, [pc, #164]	; (8002234 <_vfiprintf_r+0x254>)
 800218e:	bb1b      	cbnz	r3, 80021d8 <_vfiprintf_r+0x1f8>
 8002190:	9b03      	ldr	r3, [sp, #12]
 8002192:	3307      	adds	r3, #7
 8002194:	f023 0307 	bic.w	r3, r3, #7
 8002198:	3308      	adds	r3, #8
 800219a:	9303      	str	r3, [sp, #12]
 800219c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800219e:	443b      	add	r3, r7
 80021a0:	9309      	str	r3, [sp, #36]	; 0x24
 80021a2:	e767      	b.n	8002074 <_vfiprintf_r+0x94>
 80021a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80021a8:	460c      	mov	r4, r1
 80021aa:	2001      	movs	r0, #1
 80021ac:	e7a5      	b.n	80020fa <_vfiprintf_r+0x11a>
 80021ae:	2300      	movs	r3, #0
 80021b0:	3401      	adds	r4, #1
 80021b2:	9305      	str	r3, [sp, #20]
 80021b4:	4619      	mov	r1, r3
 80021b6:	f04f 0c0a 	mov.w	ip, #10
 80021ba:	4620      	mov	r0, r4
 80021bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80021c0:	3a30      	subs	r2, #48	; 0x30
 80021c2:	2a09      	cmp	r2, #9
 80021c4:	d903      	bls.n	80021ce <_vfiprintf_r+0x1ee>
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d0c5      	beq.n	8002156 <_vfiprintf_r+0x176>
 80021ca:	9105      	str	r1, [sp, #20]
 80021cc:	e7c3      	b.n	8002156 <_vfiprintf_r+0x176>
 80021ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80021d2:	4604      	mov	r4, r0
 80021d4:	2301      	movs	r3, #1
 80021d6:	e7f0      	b.n	80021ba <_vfiprintf_r+0x1da>
 80021d8:	ab03      	add	r3, sp, #12
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	462a      	mov	r2, r5
 80021de:	4b16      	ldr	r3, [pc, #88]	; (8002238 <_vfiprintf_r+0x258>)
 80021e0:	a904      	add	r1, sp, #16
 80021e2:	4630      	mov	r0, r6
 80021e4:	f3af 8000 	nop.w
 80021e8:	4607      	mov	r7, r0
 80021ea:	1c78      	adds	r0, r7, #1
 80021ec:	d1d6      	bne.n	800219c <_vfiprintf_r+0x1bc>
 80021ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80021f0:	07d9      	lsls	r1, r3, #31
 80021f2:	d405      	bmi.n	8002200 <_vfiprintf_r+0x220>
 80021f4:	89ab      	ldrh	r3, [r5, #12]
 80021f6:	059a      	lsls	r2, r3, #22
 80021f8:	d402      	bmi.n	8002200 <_vfiprintf_r+0x220>
 80021fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80021fc:	f7ff fd7f 	bl	8001cfe <__retarget_lock_release_recursive>
 8002200:	89ab      	ldrh	r3, [r5, #12]
 8002202:	065b      	lsls	r3, r3, #25
 8002204:	f53f af12 	bmi.w	800202c <_vfiprintf_r+0x4c>
 8002208:	9809      	ldr	r0, [sp, #36]	; 0x24
 800220a:	e711      	b.n	8002030 <_vfiprintf_r+0x50>
 800220c:	ab03      	add	r3, sp, #12
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	462a      	mov	r2, r5
 8002212:	4b09      	ldr	r3, [pc, #36]	; (8002238 <_vfiprintf_r+0x258>)
 8002214:	a904      	add	r1, sp, #16
 8002216:	4630      	mov	r0, r6
 8002218:	f000 f880 	bl	800231c <_printf_i>
 800221c:	e7e4      	b.n	80021e8 <_vfiprintf_r+0x208>
 800221e:	bf00      	nop
 8002220:	08002800 	.word	0x08002800
 8002224:	08002820 	.word	0x08002820
 8002228:	080027e0 	.word	0x080027e0
 800222c:	08002840 	.word	0x08002840
 8002230:	0800284a 	.word	0x0800284a
 8002234:	00000000 	.word	0x00000000
 8002238:	08001fbb 	.word	0x08001fbb
 800223c:	08002846 	.word	0x08002846

08002240 <_printf_common>:
 8002240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002244:	4616      	mov	r6, r2
 8002246:	4699      	mov	r9, r3
 8002248:	688a      	ldr	r2, [r1, #8]
 800224a:	690b      	ldr	r3, [r1, #16]
 800224c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002250:	4293      	cmp	r3, r2
 8002252:	bfb8      	it	lt
 8002254:	4613      	movlt	r3, r2
 8002256:	6033      	str	r3, [r6, #0]
 8002258:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800225c:	4607      	mov	r7, r0
 800225e:	460c      	mov	r4, r1
 8002260:	b10a      	cbz	r2, 8002266 <_printf_common+0x26>
 8002262:	3301      	adds	r3, #1
 8002264:	6033      	str	r3, [r6, #0]
 8002266:	6823      	ldr	r3, [r4, #0]
 8002268:	0699      	lsls	r1, r3, #26
 800226a:	bf42      	ittt	mi
 800226c:	6833      	ldrmi	r3, [r6, #0]
 800226e:	3302      	addmi	r3, #2
 8002270:	6033      	strmi	r3, [r6, #0]
 8002272:	6825      	ldr	r5, [r4, #0]
 8002274:	f015 0506 	ands.w	r5, r5, #6
 8002278:	d106      	bne.n	8002288 <_printf_common+0x48>
 800227a:	f104 0a19 	add.w	sl, r4, #25
 800227e:	68e3      	ldr	r3, [r4, #12]
 8002280:	6832      	ldr	r2, [r6, #0]
 8002282:	1a9b      	subs	r3, r3, r2
 8002284:	42ab      	cmp	r3, r5
 8002286:	dc26      	bgt.n	80022d6 <_printf_common+0x96>
 8002288:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800228c:	1e13      	subs	r3, r2, #0
 800228e:	6822      	ldr	r2, [r4, #0]
 8002290:	bf18      	it	ne
 8002292:	2301      	movne	r3, #1
 8002294:	0692      	lsls	r2, r2, #26
 8002296:	d42b      	bmi.n	80022f0 <_printf_common+0xb0>
 8002298:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800229c:	4649      	mov	r1, r9
 800229e:	4638      	mov	r0, r7
 80022a0:	47c0      	blx	r8
 80022a2:	3001      	adds	r0, #1
 80022a4:	d01e      	beq.n	80022e4 <_printf_common+0xa4>
 80022a6:	6823      	ldr	r3, [r4, #0]
 80022a8:	68e5      	ldr	r5, [r4, #12]
 80022aa:	6832      	ldr	r2, [r6, #0]
 80022ac:	f003 0306 	and.w	r3, r3, #6
 80022b0:	2b04      	cmp	r3, #4
 80022b2:	bf08      	it	eq
 80022b4:	1aad      	subeq	r5, r5, r2
 80022b6:	68a3      	ldr	r3, [r4, #8]
 80022b8:	6922      	ldr	r2, [r4, #16]
 80022ba:	bf0c      	ite	eq
 80022bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80022c0:	2500      	movne	r5, #0
 80022c2:	4293      	cmp	r3, r2
 80022c4:	bfc4      	itt	gt
 80022c6:	1a9b      	subgt	r3, r3, r2
 80022c8:	18ed      	addgt	r5, r5, r3
 80022ca:	2600      	movs	r6, #0
 80022cc:	341a      	adds	r4, #26
 80022ce:	42b5      	cmp	r5, r6
 80022d0:	d11a      	bne.n	8002308 <_printf_common+0xc8>
 80022d2:	2000      	movs	r0, #0
 80022d4:	e008      	b.n	80022e8 <_printf_common+0xa8>
 80022d6:	2301      	movs	r3, #1
 80022d8:	4652      	mov	r2, sl
 80022da:	4649      	mov	r1, r9
 80022dc:	4638      	mov	r0, r7
 80022de:	47c0      	blx	r8
 80022e0:	3001      	adds	r0, #1
 80022e2:	d103      	bne.n	80022ec <_printf_common+0xac>
 80022e4:	f04f 30ff 	mov.w	r0, #4294967295
 80022e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022ec:	3501      	adds	r5, #1
 80022ee:	e7c6      	b.n	800227e <_printf_common+0x3e>
 80022f0:	18e1      	adds	r1, r4, r3
 80022f2:	1c5a      	adds	r2, r3, #1
 80022f4:	2030      	movs	r0, #48	; 0x30
 80022f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80022fa:	4422      	add	r2, r4
 80022fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002300:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002304:	3302      	adds	r3, #2
 8002306:	e7c7      	b.n	8002298 <_printf_common+0x58>
 8002308:	2301      	movs	r3, #1
 800230a:	4622      	mov	r2, r4
 800230c:	4649      	mov	r1, r9
 800230e:	4638      	mov	r0, r7
 8002310:	47c0      	blx	r8
 8002312:	3001      	adds	r0, #1
 8002314:	d0e6      	beq.n	80022e4 <_printf_common+0xa4>
 8002316:	3601      	adds	r6, #1
 8002318:	e7d9      	b.n	80022ce <_printf_common+0x8e>
	...

0800231c <_printf_i>:
 800231c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002320:	7e0f      	ldrb	r7, [r1, #24]
 8002322:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002324:	2f78      	cmp	r7, #120	; 0x78
 8002326:	4691      	mov	r9, r2
 8002328:	4680      	mov	r8, r0
 800232a:	460c      	mov	r4, r1
 800232c:	469a      	mov	sl, r3
 800232e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002332:	d807      	bhi.n	8002344 <_printf_i+0x28>
 8002334:	2f62      	cmp	r7, #98	; 0x62
 8002336:	d80a      	bhi.n	800234e <_printf_i+0x32>
 8002338:	2f00      	cmp	r7, #0
 800233a:	f000 80d8 	beq.w	80024ee <_printf_i+0x1d2>
 800233e:	2f58      	cmp	r7, #88	; 0x58
 8002340:	f000 80a3 	beq.w	800248a <_printf_i+0x16e>
 8002344:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002348:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800234c:	e03a      	b.n	80023c4 <_printf_i+0xa8>
 800234e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002352:	2b15      	cmp	r3, #21
 8002354:	d8f6      	bhi.n	8002344 <_printf_i+0x28>
 8002356:	a101      	add	r1, pc, #4	; (adr r1, 800235c <_printf_i+0x40>)
 8002358:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800235c:	080023b5 	.word	0x080023b5
 8002360:	080023c9 	.word	0x080023c9
 8002364:	08002345 	.word	0x08002345
 8002368:	08002345 	.word	0x08002345
 800236c:	08002345 	.word	0x08002345
 8002370:	08002345 	.word	0x08002345
 8002374:	080023c9 	.word	0x080023c9
 8002378:	08002345 	.word	0x08002345
 800237c:	08002345 	.word	0x08002345
 8002380:	08002345 	.word	0x08002345
 8002384:	08002345 	.word	0x08002345
 8002388:	080024d5 	.word	0x080024d5
 800238c:	080023f9 	.word	0x080023f9
 8002390:	080024b7 	.word	0x080024b7
 8002394:	08002345 	.word	0x08002345
 8002398:	08002345 	.word	0x08002345
 800239c:	080024f7 	.word	0x080024f7
 80023a0:	08002345 	.word	0x08002345
 80023a4:	080023f9 	.word	0x080023f9
 80023a8:	08002345 	.word	0x08002345
 80023ac:	08002345 	.word	0x08002345
 80023b0:	080024bf 	.word	0x080024bf
 80023b4:	682b      	ldr	r3, [r5, #0]
 80023b6:	1d1a      	adds	r2, r3, #4
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	602a      	str	r2, [r5, #0]
 80023bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80023c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80023c4:	2301      	movs	r3, #1
 80023c6:	e0a3      	b.n	8002510 <_printf_i+0x1f4>
 80023c8:	6820      	ldr	r0, [r4, #0]
 80023ca:	6829      	ldr	r1, [r5, #0]
 80023cc:	0606      	lsls	r6, r0, #24
 80023ce:	f101 0304 	add.w	r3, r1, #4
 80023d2:	d50a      	bpl.n	80023ea <_printf_i+0xce>
 80023d4:	680e      	ldr	r6, [r1, #0]
 80023d6:	602b      	str	r3, [r5, #0]
 80023d8:	2e00      	cmp	r6, #0
 80023da:	da03      	bge.n	80023e4 <_printf_i+0xc8>
 80023dc:	232d      	movs	r3, #45	; 0x2d
 80023de:	4276      	negs	r6, r6
 80023e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80023e4:	485e      	ldr	r0, [pc, #376]	; (8002560 <_printf_i+0x244>)
 80023e6:	230a      	movs	r3, #10
 80023e8:	e019      	b.n	800241e <_printf_i+0x102>
 80023ea:	680e      	ldr	r6, [r1, #0]
 80023ec:	602b      	str	r3, [r5, #0]
 80023ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80023f2:	bf18      	it	ne
 80023f4:	b236      	sxthne	r6, r6
 80023f6:	e7ef      	b.n	80023d8 <_printf_i+0xbc>
 80023f8:	682b      	ldr	r3, [r5, #0]
 80023fa:	6820      	ldr	r0, [r4, #0]
 80023fc:	1d19      	adds	r1, r3, #4
 80023fe:	6029      	str	r1, [r5, #0]
 8002400:	0601      	lsls	r1, r0, #24
 8002402:	d501      	bpl.n	8002408 <_printf_i+0xec>
 8002404:	681e      	ldr	r6, [r3, #0]
 8002406:	e002      	b.n	800240e <_printf_i+0xf2>
 8002408:	0646      	lsls	r6, r0, #25
 800240a:	d5fb      	bpl.n	8002404 <_printf_i+0xe8>
 800240c:	881e      	ldrh	r6, [r3, #0]
 800240e:	4854      	ldr	r0, [pc, #336]	; (8002560 <_printf_i+0x244>)
 8002410:	2f6f      	cmp	r7, #111	; 0x6f
 8002412:	bf0c      	ite	eq
 8002414:	2308      	moveq	r3, #8
 8002416:	230a      	movne	r3, #10
 8002418:	2100      	movs	r1, #0
 800241a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800241e:	6865      	ldr	r5, [r4, #4]
 8002420:	60a5      	str	r5, [r4, #8]
 8002422:	2d00      	cmp	r5, #0
 8002424:	bfa2      	ittt	ge
 8002426:	6821      	ldrge	r1, [r4, #0]
 8002428:	f021 0104 	bicge.w	r1, r1, #4
 800242c:	6021      	strge	r1, [r4, #0]
 800242e:	b90e      	cbnz	r6, 8002434 <_printf_i+0x118>
 8002430:	2d00      	cmp	r5, #0
 8002432:	d04d      	beq.n	80024d0 <_printf_i+0x1b4>
 8002434:	4615      	mov	r5, r2
 8002436:	fbb6 f1f3 	udiv	r1, r6, r3
 800243a:	fb03 6711 	mls	r7, r3, r1, r6
 800243e:	5dc7      	ldrb	r7, [r0, r7]
 8002440:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002444:	4637      	mov	r7, r6
 8002446:	42bb      	cmp	r3, r7
 8002448:	460e      	mov	r6, r1
 800244a:	d9f4      	bls.n	8002436 <_printf_i+0x11a>
 800244c:	2b08      	cmp	r3, #8
 800244e:	d10b      	bne.n	8002468 <_printf_i+0x14c>
 8002450:	6823      	ldr	r3, [r4, #0]
 8002452:	07de      	lsls	r6, r3, #31
 8002454:	d508      	bpl.n	8002468 <_printf_i+0x14c>
 8002456:	6923      	ldr	r3, [r4, #16]
 8002458:	6861      	ldr	r1, [r4, #4]
 800245a:	4299      	cmp	r1, r3
 800245c:	bfde      	ittt	le
 800245e:	2330      	movle	r3, #48	; 0x30
 8002460:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002464:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002468:	1b52      	subs	r2, r2, r5
 800246a:	6122      	str	r2, [r4, #16]
 800246c:	f8cd a000 	str.w	sl, [sp]
 8002470:	464b      	mov	r3, r9
 8002472:	aa03      	add	r2, sp, #12
 8002474:	4621      	mov	r1, r4
 8002476:	4640      	mov	r0, r8
 8002478:	f7ff fee2 	bl	8002240 <_printf_common>
 800247c:	3001      	adds	r0, #1
 800247e:	d14c      	bne.n	800251a <_printf_i+0x1fe>
 8002480:	f04f 30ff 	mov.w	r0, #4294967295
 8002484:	b004      	add	sp, #16
 8002486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800248a:	4835      	ldr	r0, [pc, #212]	; (8002560 <_printf_i+0x244>)
 800248c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002490:	6829      	ldr	r1, [r5, #0]
 8002492:	6823      	ldr	r3, [r4, #0]
 8002494:	f851 6b04 	ldr.w	r6, [r1], #4
 8002498:	6029      	str	r1, [r5, #0]
 800249a:	061d      	lsls	r5, r3, #24
 800249c:	d514      	bpl.n	80024c8 <_printf_i+0x1ac>
 800249e:	07df      	lsls	r7, r3, #31
 80024a0:	bf44      	itt	mi
 80024a2:	f043 0320 	orrmi.w	r3, r3, #32
 80024a6:	6023      	strmi	r3, [r4, #0]
 80024a8:	b91e      	cbnz	r6, 80024b2 <_printf_i+0x196>
 80024aa:	6823      	ldr	r3, [r4, #0]
 80024ac:	f023 0320 	bic.w	r3, r3, #32
 80024b0:	6023      	str	r3, [r4, #0]
 80024b2:	2310      	movs	r3, #16
 80024b4:	e7b0      	b.n	8002418 <_printf_i+0xfc>
 80024b6:	6823      	ldr	r3, [r4, #0]
 80024b8:	f043 0320 	orr.w	r3, r3, #32
 80024bc:	6023      	str	r3, [r4, #0]
 80024be:	2378      	movs	r3, #120	; 0x78
 80024c0:	4828      	ldr	r0, [pc, #160]	; (8002564 <_printf_i+0x248>)
 80024c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80024c6:	e7e3      	b.n	8002490 <_printf_i+0x174>
 80024c8:	0659      	lsls	r1, r3, #25
 80024ca:	bf48      	it	mi
 80024cc:	b2b6      	uxthmi	r6, r6
 80024ce:	e7e6      	b.n	800249e <_printf_i+0x182>
 80024d0:	4615      	mov	r5, r2
 80024d2:	e7bb      	b.n	800244c <_printf_i+0x130>
 80024d4:	682b      	ldr	r3, [r5, #0]
 80024d6:	6826      	ldr	r6, [r4, #0]
 80024d8:	6961      	ldr	r1, [r4, #20]
 80024da:	1d18      	adds	r0, r3, #4
 80024dc:	6028      	str	r0, [r5, #0]
 80024de:	0635      	lsls	r5, r6, #24
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	d501      	bpl.n	80024e8 <_printf_i+0x1cc>
 80024e4:	6019      	str	r1, [r3, #0]
 80024e6:	e002      	b.n	80024ee <_printf_i+0x1d2>
 80024e8:	0670      	lsls	r0, r6, #25
 80024ea:	d5fb      	bpl.n	80024e4 <_printf_i+0x1c8>
 80024ec:	8019      	strh	r1, [r3, #0]
 80024ee:	2300      	movs	r3, #0
 80024f0:	6123      	str	r3, [r4, #16]
 80024f2:	4615      	mov	r5, r2
 80024f4:	e7ba      	b.n	800246c <_printf_i+0x150>
 80024f6:	682b      	ldr	r3, [r5, #0]
 80024f8:	1d1a      	adds	r2, r3, #4
 80024fa:	602a      	str	r2, [r5, #0]
 80024fc:	681d      	ldr	r5, [r3, #0]
 80024fe:	6862      	ldr	r2, [r4, #4]
 8002500:	2100      	movs	r1, #0
 8002502:	4628      	mov	r0, r5
 8002504:	f7fd fe84 	bl	8000210 <memchr>
 8002508:	b108      	cbz	r0, 800250e <_printf_i+0x1f2>
 800250a:	1b40      	subs	r0, r0, r5
 800250c:	6060      	str	r0, [r4, #4]
 800250e:	6863      	ldr	r3, [r4, #4]
 8002510:	6123      	str	r3, [r4, #16]
 8002512:	2300      	movs	r3, #0
 8002514:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002518:	e7a8      	b.n	800246c <_printf_i+0x150>
 800251a:	6923      	ldr	r3, [r4, #16]
 800251c:	462a      	mov	r2, r5
 800251e:	4649      	mov	r1, r9
 8002520:	4640      	mov	r0, r8
 8002522:	47d0      	blx	sl
 8002524:	3001      	adds	r0, #1
 8002526:	d0ab      	beq.n	8002480 <_printf_i+0x164>
 8002528:	6823      	ldr	r3, [r4, #0]
 800252a:	079b      	lsls	r3, r3, #30
 800252c:	d413      	bmi.n	8002556 <_printf_i+0x23a>
 800252e:	68e0      	ldr	r0, [r4, #12]
 8002530:	9b03      	ldr	r3, [sp, #12]
 8002532:	4298      	cmp	r0, r3
 8002534:	bfb8      	it	lt
 8002536:	4618      	movlt	r0, r3
 8002538:	e7a4      	b.n	8002484 <_printf_i+0x168>
 800253a:	2301      	movs	r3, #1
 800253c:	4632      	mov	r2, r6
 800253e:	4649      	mov	r1, r9
 8002540:	4640      	mov	r0, r8
 8002542:	47d0      	blx	sl
 8002544:	3001      	adds	r0, #1
 8002546:	d09b      	beq.n	8002480 <_printf_i+0x164>
 8002548:	3501      	adds	r5, #1
 800254a:	68e3      	ldr	r3, [r4, #12]
 800254c:	9903      	ldr	r1, [sp, #12]
 800254e:	1a5b      	subs	r3, r3, r1
 8002550:	42ab      	cmp	r3, r5
 8002552:	dcf2      	bgt.n	800253a <_printf_i+0x21e>
 8002554:	e7eb      	b.n	800252e <_printf_i+0x212>
 8002556:	2500      	movs	r5, #0
 8002558:	f104 0619 	add.w	r6, r4, #25
 800255c:	e7f5      	b.n	800254a <_printf_i+0x22e>
 800255e:	bf00      	nop
 8002560:	08002851 	.word	0x08002851
 8002564:	08002862 	.word	0x08002862

08002568 <_sbrk_r>:
 8002568:	b538      	push	{r3, r4, r5, lr}
 800256a:	4d06      	ldr	r5, [pc, #24]	; (8002584 <_sbrk_r+0x1c>)
 800256c:	2300      	movs	r3, #0
 800256e:	4604      	mov	r4, r0
 8002570:	4608      	mov	r0, r1
 8002572:	602b      	str	r3, [r5, #0]
 8002574:	f7fe fe42 	bl	80011fc <_sbrk>
 8002578:	1c43      	adds	r3, r0, #1
 800257a:	d102      	bne.n	8002582 <_sbrk_r+0x1a>
 800257c:	682b      	ldr	r3, [r5, #0]
 800257e:	b103      	cbz	r3, 8002582 <_sbrk_r+0x1a>
 8002580:	6023      	str	r3, [r4, #0]
 8002582:	bd38      	pop	{r3, r4, r5, pc}
 8002584:	200000e4 	.word	0x200000e4

08002588 <__sread>:
 8002588:	b510      	push	{r4, lr}
 800258a:	460c      	mov	r4, r1
 800258c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002590:	f000 f8a0 	bl	80026d4 <_read_r>
 8002594:	2800      	cmp	r0, #0
 8002596:	bfab      	itete	ge
 8002598:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800259a:	89a3      	ldrhlt	r3, [r4, #12]
 800259c:	181b      	addge	r3, r3, r0
 800259e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80025a2:	bfac      	ite	ge
 80025a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80025a6:	81a3      	strhlt	r3, [r4, #12]
 80025a8:	bd10      	pop	{r4, pc}

080025aa <__swrite>:
 80025aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025ae:	461f      	mov	r7, r3
 80025b0:	898b      	ldrh	r3, [r1, #12]
 80025b2:	05db      	lsls	r3, r3, #23
 80025b4:	4605      	mov	r5, r0
 80025b6:	460c      	mov	r4, r1
 80025b8:	4616      	mov	r6, r2
 80025ba:	d505      	bpl.n	80025c8 <__swrite+0x1e>
 80025bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025c0:	2302      	movs	r3, #2
 80025c2:	2200      	movs	r2, #0
 80025c4:	f000 f868 	bl	8002698 <_lseek_r>
 80025c8:	89a3      	ldrh	r3, [r4, #12]
 80025ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80025ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80025d2:	81a3      	strh	r3, [r4, #12]
 80025d4:	4632      	mov	r2, r6
 80025d6:	463b      	mov	r3, r7
 80025d8:	4628      	mov	r0, r5
 80025da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80025de:	f000 b817 	b.w	8002610 <_write_r>

080025e2 <__sseek>:
 80025e2:	b510      	push	{r4, lr}
 80025e4:	460c      	mov	r4, r1
 80025e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025ea:	f000 f855 	bl	8002698 <_lseek_r>
 80025ee:	1c43      	adds	r3, r0, #1
 80025f0:	89a3      	ldrh	r3, [r4, #12]
 80025f2:	bf15      	itete	ne
 80025f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80025f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80025fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80025fe:	81a3      	strheq	r3, [r4, #12]
 8002600:	bf18      	it	ne
 8002602:	81a3      	strhne	r3, [r4, #12]
 8002604:	bd10      	pop	{r4, pc}

08002606 <__sclose>:
 8002606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800260a:	f000 b813 	b.w	8002634 <_close_r>
	...

08002610 <_write_r>:
 8002610:	b538      	push	{r3, r4, r5, lr}
 8002612:	4d07      	ldr	r5, [pc, #28]	; (8002630 <_write_r+0x20>)
 8002614:	4604      	mov	r4, r0
 8002616:	4608      	mov	r0, r1
 8002618:	4611      	mov	r1, r2
 800261a:	2200      	movs	r2, #0
 800261c:	602a      	str	r2, [r5, #0]
 800261e:	461a      	mov	r2, r3
 8002620:	f7fe fd9b 	bl	800115a <_write>
 8002624:	1c43      	adds	r3, r0, #1
 8002626:	d102      	bne.n	800262e <_write_r+0x1e>
 8002628:	682b      	ldr	r3, [r5, #0]
 800262a:	b103      	cbz	r3, 800262e <_write_r+0x1e>
 800262c:	6023      	str	r3, [r4, #0]
 800262e:	bd38      	pop	{r3, r4, r5, pc}
 8002630:	200000e4 	.word	0x200000e4

08002634 <_close_r>:
 8002634:	b538      	push	{r3, r4, r5, lr}
 8002636:	4d06      	ldr	r5, [pc, #24]	; (8002650 <_close_r+0x1c>)
 8002638:	2300      	movs	r3, #0
 800263a:	4604      	mov	r4, r0
 800263c:	4608      	mov	r0, r1
 800263e:	602b      	str	r3, [r5, #0]
 8002640:	f7fe fda7 	bl	8001192 <_close>
 8002644:	1c43      	adds	r3, r0, #1
 8002646:	d102      	bne.n	800264e <_close_r+0x1a>
 8002648:	682b      	ldr	r3, [r5, #0]
 800264a:	b103      	cbz	r3, 800264e <_close_r+0x1a>
 800264c:	6023      	str	r3, [r4, #0]
 800264e:	bd38      	pop	{r3, r4, r5, pc}
 8002650:	200000e4 	.word	0x200000e4

08002654 <_fstat_r>:
 8002654:	b538      	push	{r3, r4, r5, lr}
 8002656:	4d07      	ldr	r5, [pc, #28]	; (8002674 <_fstat_r+0x20>)
 8002658:	2300      	movs	r3, #0
 800265a:	4604      	mov	r4, r0
 800265c:	4608      	mov	r0, r1
 800265e:	4611      	mov	r1, r2
 8002660:	602b      	str	r3, [r5, #0]
 8002662:	f7fe fda2 	bl	80011aa <_fstat>
 8002666:	1c43      	adds	r3, r0, #1
 8002668:	d102      	bne.n	8002670 <_fstat_r+0x1c>
 800266a:	682b      	ldr	r3, [r5, #0]
 800266c:	b103      	cbz	r3, 8002670 <_fstat_r+0x1c>
 800266e:	6023      	str	r3, [r4, #0]
 8002670:	bd38      	pop	{r3, r4, r5, pc}
 8002672:	bf00      	nop
 8002674:	200000e4 	.word	0x200000e4

08002678 <_isatty_r>:
 8002678:	b538      	push	{r3, r4, r5, lr}
 800267a:	4d06      	ldr	r5, [pc, #24]	; (8002694 <_isatty_r+0x1c>)
 800267c:	2300      	movs	r3, #0
 800267e:	4604      	mov	r4, r0
 8002680:	4608      	mov	r0, r1
 8002682:	602b      	str	r3, [r5, #0]
 8002684:	f7fe fda1 	bl	80011ca <_isatty>
 8002688:	1c43      	adds	r3, r0, #1
 800268a:	d102      	bne.n	8002692 <_isatty_r+0x1a>
 800268c:	682b      	ldr	r3, [r5, #0]
 800268e:	b103      	cbz	r3, 8002692 <_isatty_r+0x1a>
 8002690:	6023      	str	r3, [r4, #0]
 8002692:	bd38      	pop	{r3, r4, r5, pc}
 8002694:	200000e4 	.word	0x200000e4

08002698 <_lseek_r>:
 8002698:	b538      	push	{r3, r4, r5, lr}
 800269a:	4d07      	ldr	r5, [pc, #28]	; (80026b8 <_lseek_r+0x20>)
 800269c:	4604      	mov	r4, r0
 800269e:	4608      	mov	r0, r1
 80026a0:	4611      	mov	r1, r2
 80026a2:	2200      	movs	r2, #0
 80026a4:	602a      	str	r2, [r5, #0]
 80026a6:	461a      	mov	r2, r3
 80026a8:	f7fe fd9a 	bl	80011e0 <_lseek>
 80026ac:	1c43      	adds	r3, r0, #1
 80026ae:	d102      	bne.n	80026b6 <_lseek_r+0x1e>
 80026b0:	682b      	ldr	r3, [r5, #0]
 80026b2:	b103      	cbz	r3, 80026b6 <_lseek_r+0x1e>
 80026b4:	6023      	str	r3, [r4, #0]
 80026b6:	bd38      	pop	{r3, r4, r5, pc}
 80026b8:	200000e4 	.word	0x200000e4

080026bc <__malloc_lock>:
 80026bc:	4801      	ldr	r0, [pc, #4]	; (80026c4 <__malloc_lock+0x8>)
 80026be:	f7ff bb1d 	b.w	8001cfc <__retarget_lock_acquire_recursive>
 80026c2:	bf00      	nop
 80026c4:	200000d8 	.word	0x200000d8

080026c8 <__malloc_unlock>:
 80026c8:	4801      	ldr	r0, [pc, #4]	; (80026d0 <__malloc_unlock+0x8>)
 80026ca:	f7ff bb18 	b.w	8001cfe <__retarget_lock_release_recursive>
 80026ce:	bf00      	nop
 80026d0:	200000d8 	.word	0x200000d8

080026d4 <_read_r>:
 80026d4:	b538      	push	{r3, r4, r5, lr}
 80026d6:	4d07      	ldr	r5, [pc, #28]	; (80026f4 <_read_r+0x20>)
 80026d8:	4604      	mov	r4, r0
 80026da:	4608      	mov	r0, r1
 80026dc:	4611      	mov	r1, r2
 80026de:	2200      	movs	r2, #0
 80026e0:	602a      	str	r2, [r5, #0]
 80026e2:	461a      	mov	r2, r3
 80026e4:	f7fe fd1c 	bl	8001120 <_read>
 80026e8:	1c43      	adds	r3, r0, #1
 80026ea:	d102      	bne.n	80026f2 <_read_r+0x1e>
 80026ec:	682b      	ldr	r3, [r5, #0]
 80026ee:	b103      	cbz	r3, 80026f2 <_read_r+0x1e>
 80026f0:	6023      	str	r3, [r4, #0]
 80026f2:	bd38      	pop	{r3, r4, r5, pc}
 80026f4:	200000e4 	.word	0x200000e4

080026f8 <_init>:
 80026f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026fa:	bf00      	nop
 80026fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026fe:	bc08      	pop	{r3}
 8002700:	469e      	mov	lr, r3
 8002702:	4770      	bx	lr

08002704 <_fini>:
 8002704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002706:	bf00      	nop
 8002708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800270a:	bc08      	pop	{r3}
 800270c:	469e      	mov	lr, r3
 800270e:	4770      	bx	lr
